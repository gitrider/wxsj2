//---------------------------------------------------------------------------
// Script Engine by FireFox
// Desc:	File In Dat Class
//---------------------------------------------------------------------------
#include "FoxWin32.h"
#include "FoxFilePath.h"
#include "FoxPakFile.h"

//---------------------------------------------------------------------------
// 文件读取模式 0 = 优先从磁盘读取 1 = 优先从文件包读取
static int m_nPakFileMode = 0;

//---------------------------------------------------------------------------
// 函数:	SetFileMode
// 功能:	设置文件读取模式
// 参数:	int
// 返回:	void
//---------------------------------------------------------------------------
void g_SetPakFileMode(int nFileMode)
{
	m_nPakFileMode = nFileMode;
}

#define	PAK_INDEX_STORE_IN_RESERVED	0


//---------------------------------------------------------------------------
// 功能:	购造函数
//---------------------------------------------------------------------------
FoxPakFile::FoxPakFile()
{
}

//---------------------------------------------------------------------------
// 功能:	析造函数
//---------------------------------------------------------------------------
FoxPakFile::~FoxPakFile()
{
	Close();
}

//---------------------------------------------------------------------------
// 功能:	判断此文件是否从包中打开的
//---------------------------------------------------------------------------
bool FoxPakFile::IsFileInPak()
{
	return false;
}

//---------------------------------------------------------------------------
// 功能:	打开一个文件, 先寻找当前目录下是否有同名的单独文件,
// 参数:	FileName	文件名
// 返回:	TRUE		成功
//			FALSE		失败
//---------------------------------------------------------------------------
BOOL FoxPakFile::Open(const char* pszFileName)
{
	if (pszFileName == NULL || pszFileName[0] == 0)
		return false;

	bool bOk = false;
	Close();

		bOk = (m_File.Open((char*)pszFileName) != FALSE);

	return bOk;
}

//---------------------------------------------------------------------------
// 功能:	从文件中读取数据
// 参数:	pBuffer		缓冲区指针
//			dwSize		要读取的长度
// 返回:	读到的字节长度
//---------------------------------------------------------------------------
DWORD FoxPakFile::Read(void* pBuffer, unsigned int uSize)
{
	{
		uSize = m_File.Read(pBuffer, uSize);
	}
	return uSize;
}

//---------------------------------------------------------------------------
// 功能:	文件读指针定位
// 参数:	lOffset			偏移量
//			dwMethod		定位方法
// 返回:	文件的指针
//---------------------------------------------------------------------------
DWORD FoxPakFile::Seek(int nOffset, unsigned int uMethod)
{
	{
		nOffset = m_File.Seek(nOffset, uMethod);
	}
	return nOffset;
}

//---------------------------------------------------------------------------
// 功能:	返回文件的指针
// 返回:	文件的指针
//---------------------------------------------------------------------------
DWORD FoxPakFile::Tell()
{
	int nOffset;
		nOffset = m_File.Tell();
	return nOffset;
}

//---------------------------------------------------------------------------
// 功能:	返回文件大小
// 返回:	文件的大小 in bytes
//---------------------------------------------------------------------------
DWORD FoxPakFile::Size()
{
	unsigned int uSize;
		uSize = m_File.Size();
	return uSize;
}
//---------------------------------------------------------------------------
// 功能:	关闭一个文件
//---------------------------------------------------------------------------
void FoxPakFile::Close()
{
	{
		m_File.Close();
	}
}


//---------------------------------------------------------------------------
// 每次读取数据块的大小
#define BLOCK_SIZE	(0x10000L)

