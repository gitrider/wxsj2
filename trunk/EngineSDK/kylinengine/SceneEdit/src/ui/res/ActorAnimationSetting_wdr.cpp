//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ActorAnimationSetting.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ActorAnimationSetting_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ActorAnimationSetting_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *ActorAnimationSetting( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, /*_("Animation")*/ wxT("动作"), wxDefaultPosition, wxSize(150,-1), wxALIGN_CENTRE );
    item3->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, ID_LISTBOX_ANIMATION, wxDefaultPosition, wxSize(200,400), 0, strs4, wxLB_SINGLE );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxBitmapButton *item6 = new wxBitmapButton( parent, ID_BUTTON_PLAY, AnimationSettingBitmap( 0 ), wxDefaultPosition, wxDefaultSize );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item7 = new wxBitmapButton( parent, ID_BUTTON_STOP, AnimationSettingBitmap( 1 ), wxDefaultPosition, wxDefaultSize );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item8 = new wxBitmapButton( parent, ID_BUTTON_STEP_BACK, AnimationSettingBitmap( 2 ), wxDefaultPosition, wxDefaultSize );
    item5->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item9 = new wxBitmapButton( parent, ID_BUTTON_STEP_FRONT, AnimationSettingBitmap( 3 ), wxDefaultPosition, wxDefaultSize );
    item5->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item10 = new wxCheckBox( parent, ID_CHECKBOX_LOOP, _("循环"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->SetValue( TRUE );
    item5->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("所有技能"), wxDefaultPosition, wxSize(150,-1), wxALIGN_CENTRE );
    item12->SetFont( wxFont( 12, wxROMAN, wxNORMAL, wxBOLD ) );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs13 = (wxString*) NULL;
    wxListBox *item13 = new wxListBox( parent, ID_LISTBOX_ALL_SKILL, wxDefaultPosition, wxSize(250,400), 0, strs13, wxLB_SINGLE );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_BUTTON_ADD_SKILL, /*_("Add Skill")*/wxT("添加新技能"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item15 = new wxButton( parent, ID_BUTTON_DEL_SKILL, _("删除技能"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, ID_BUTTON_SET_SKILL, _("设置技能参数"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item17 = new wxGridSizer( 3, 0, 0 );

    wxButton *item18 = new wxButton( parent, ID_BUTTON_LEFTWEAPON, _("左手武器"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, ID_BUTTON_RIGTHTWEAPON, _("右手武器"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item20 = new wxButton( parent, ID_BUTTON_MOUNT, _("Mount"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("头"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_TEXTCTRL_HAIR, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_TEXTCTRL_HAIR_MAT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, _("帽子"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_TEXTCTRL_CAP, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID_TEXTCTRL_CAP_MAT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, _("身体"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_TEXTCTRL_BODY, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, ID_TEXTCTRL_BODY_MAT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, _("手"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, ID_TEXTCTRL_HAND, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, ID_TEXTCTRL_HAND_MAT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT, _("脚"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item34 = new wxTextCtrl( parent, ID_TEXTCTRL_FOOT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item35 = new wxTextCtrl( parent, ID_TEXTCTRL_FOOT_MAT, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item17->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item36 = new wxButton( parent, ID_BUTTON_COLOUR, _("颜色"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item37 = new wxButton( parent, ID_BUTTON_CLOTH, _("衣服"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item17, 0, wxALIGN_CENTER|wxALL, 0 );

    wxSlider *item38 = new wxSlider( parent, ID_SLIDER_TIME, 0, 0, 100, wxDefaultPosition, wxSize(300,-1), wxSL_HORIZONTAL|wxSL_AUTOTICKS|wxSL_LABELS );
    item0->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item39 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, _("动作速率"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item41 = new wxSlider( parent, ID_SLIDER_GLOBAL_ANIM_RATE, 0, 0, 10, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL|wxSL_AUTOTICKS );
    item39->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item42 = new wxStaticText( parent, ID_TEXT, _("动作混合时间"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item43 = new wxSlider( parent, ID_SLIDER_FADE_OUT_TIME, 3, 0, 10, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL|wxSL_AUTOTICKS );
    item39->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions

wxBitmap AnimationSettingBitmap( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "a c Black",
        "b c #FF0000",
        /* pixels */
        "aaaaaaaaaaaaaaaa",
        "aabaaaaaaaaaaaaa",
        "aabbbaaaaaaaaaaa",
        "aabbbbaaaaaaaaaa",
        "aabbbbbbaaaaaaaa",
        "aabbbbbbbaaaaaaa",
        "aabbbbbbbbbaaaaa",
        "aabbbbbbbbbbaaaa",
        "aabbbbbbbbbaaaaa",
        "aabbbbbbbaaaaaaa",
        "aabbbbbbaaaaaaaa",
        "aabbbbbaaaaaaaaa",
        "aabbaaaaaaaaaaaa",
        "aabaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "a c Black",
        "b c #FF0000",
        /* pixels */
        "aaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaabbbbbbbbbbaaa",
        "aaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "a c Black",
        "b c #FF0000",
        /* pixels */
        "aaaaaaaaaaaaaaaa",
        "aaaaaaaaaaababba",
        "aaaaaaaaabbbabba",
        "aaaaaaabbbbbabba",
        "aaaaaabbbbbbabba",
        "aaaabbbbbbbbabba",
        "aabbbbbbbbbbabba",
        "abbbbbbbbbbbabba",
        "aabbbbbbbbbbabba",
        "aaaabbbbbbbbabba",
        "aaaaaabbbbbbabba",
        "aaaaaaabbbbbabba",
        "aaaaaaaaabbbabba",
        "aaaaaaaaaaababba",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "a c Black",
        "b c #FF0000",
        /* pixels */
        "aaaaaaaaaaaaaaaa",
        "abbabaaaaaaaaaaa",
        "abbabbbaaaaaaaaa",
        "abbabbbbbaaaaaaa",
        "abbabbbbbbaaaaaa",
        "abbabbbbbbbbaaaa",
        "abbabbbbbbbbbbaa",
        "abbabbbbbbbbbbba",
        "abbabbbbbbbbbbaa",
        "abbabbbbbbbbaaaa",
        "abbabbbbbbaaaaaa",
        "abbabbbbbaaaaaaa",
        "abbabbbaaaaaaaaa",
        "abbabaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
