//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ParticleEditor.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "ParticleEditor_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ParticleEditor_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

#include <wx/propgrid/propgrid.h>
#include <wx/propgrid/manager.h>


// Implement window functions

wxSizer *ParticleEditor( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
	item0->AddGrowableCol(0);

	item0->AddGrowableRow(1);

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0, 0 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item3 = new wxButton( parent, ID_BUTTON_REFRESH, _("R"), wxDefaultPosition, wxSize(20,20), 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_BUTTON_SAVE, _("S"), wxDefaultPosition, wxSize(20,20), 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_BUTTON_ADD_EMITTER, _("AE"), wxDefaultPosition, wxSize(20,20), 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxComboBox *item6 = new wxComboBox( parent, ID_COMBO_EMITTER, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs6, wxCB_DROPDOWN );
    item2->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_BUTTON_ADD_AFFECTOR, _("AF"), wxDefaultPosition, wxSize(20,20), 0 );
    item2->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxComboBox *item8 = new wxComboBox( parent, ID_COMBO_AFFECTOR, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs8, wxCB_DROPDOWN );
    item2->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item9 = new wxCheckBox( parent, ID_CHECKBOX_INSERT, _("Before"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item11 = new wxButton( parent, ID_BUTTON_DELETE, _("D"), wxDefaultPosition, wxSize(20,20), 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

	wxButton *item13 = new wxButton( parent, ID_BUTTON_SHOW_MATERIAL_EDITOR, _("Material"), wxDefaultPosition, wxDefaultSize, 0 );
	item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxPropertyGridManager *item12 = new wxPropertyGridManager(parent, ID_PROPERTY_EDITOR,
            wxDefaultPosition, // position 
            wxDefaultSize, // size
            wxCLIP_CHILDREN | wxCLIP_SIBLINGS |
			wxPG_BOLD_MODIFIED | // Modified values are drawn in bold font
			wxPG_SPLITTER_AUTO_CENTER | // Automatically center splitter until user manually adjusts it
			wxPG_TOOLTIPS | // Display tooltips for cell text that cannot be shown completely
			wxPG_TOOLBAR | // Include toolbar
			wxPG_DESCRIPTION | // Include description box
			wxFULL_REPAINT_ON_RESIZE |
			wxPGMAN_DEFAULT_STYLE); // Plus default style
    item12->SetExtraStyle(wxPG_EX_CLASSIC_SPACING);
    wxASSERT( item12 );
    item0->Add( item12, 0, wxALIGN_CENTER|wxALL|wxGROW, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
