//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: TerrainLightmapOption.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "TerrainLightmapOption_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "TerrainLightmapOption_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *mProgressSizer;
wxSizer *TerrainLightmapOption( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Preview") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxStaticBitmap *item3 = new wxStaticBitmap( parent, feID_PREVIEW, BitmapList( 0 ), wxDefaultPosition, wxSize(220,220) );
    item3->SetForegroundColour( *wxBLACK );
    item3->SetBackgroundColour( *wxBLACK );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, feID_UPDATE_TERRAIN_LIGHTMAP, _("&Update terrain shadowmap"), wxDefaultPosition, wxDefaultSize, wxNO_BORDER );
    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );
    mProgressSizer = item5;

    wxGauge *item6 = new wxGauge( parent, feID_UPDATE_TERRAIN_LIGHTMAP_PROGRESS, 100, wxDefaultPosition, wxSize(138,-1), wxGA_SMOOTH|wxGA_PROGRESSBAR );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, feID_CANCEL_UPDATE_TERRAIN_LIGHTMAP, _("C&ancel"), wxDefaultPosition, wxDefaultSize, wxNO_BORDER );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item9 = new wxStaticBox( parent, -1, _("Option") );
    wxStaticBoxSizer *item8 = new wxStaticBoxSizer( item9, wxVERTICAL );

    wxRadioButton *item10 = new wxRadioButton( parent, feID_HIDE_TERRAIN_LIGHTMAP, _("&Hide terrain shadowmap"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item10->SetValue( TRUE );
    item8->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item11 = new wxRadioButton( parent, feID_SHOW_LOW_QUALITY_TERRAIN_LIGHTMAP, _("Show &low quality terrain shadowmap"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item12 = new wxRadioButton( parent, feID_SHOW_HIGH_QUALITY_TERRAIN_LIGHTMAP, _("Show hi&gh quality terrain shadowmap"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item14 = new wxButton( parent, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->SetDefault();
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item15 = new wxButton( parent, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item15, 0, wxADJUST_MINSIZE|wxFIXED_MINSIZE|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item13, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions

wxBitmap BitmapList( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "1 1 1 1",
        "a c Black",
        /* pixels */
        "a"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
