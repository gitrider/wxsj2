//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: CameraTrackSetting.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "CameraTrackSetting_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "CameraTrackSetting_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *InitCameraTrackSetting( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, /*_("Camera Info")*/_("摄象机信息"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs2 = (wxString*) NULL;
    wxListBox *item2 = new wxListBox( parent, ID_LISTBOX_CAMERA_INFO, wxDefaultPosition, wxSize(300,100), 0, strs2, wxLB_SINGLE );
    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, /*_("Code")*/_("编码"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_TEXTCTRL_CODE, wxT(""), wxDefaultPosition, wxSize(300,150), wxTE_MULTILINE|wxTE_READONLY );
    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item5 = new wxGridSizer( 2, 0, 0 );

    wxButton *item6 = new wxButton( parent, ID_BUTTON_SAVE, /*_("Save")*/_("保存"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_BUTTON_LOAD, /*_("Load")*/_("加载"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, /*_("Animation Length")*/_("动作时长"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TEXTCTRL_TRACK_LENGTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item5->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_TEXTCTRL_POINT_TIME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item5->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, ID_BUTTON_ADDPOINT, /*_("Add Point")*/_("添加点"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item12 = new wxSpinCtrl( parent, ID_SPINCTRL_MODIFY_POINT, wxT("1"), wxDefaultPosition, wxSize(100,-1), 0, 1, 100, 1 );
    item5->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, ID_BUTTON_MODIFY, /*_("Modify Point")*/_("更改点"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_BUTTON_PLAY, /*_("Play")*/_("运行"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item15 = new wxButton( parent, ID_BUTTON_STOP, /*_("Stop")*/_("终止"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, ID_BUTTON_CLEAR, /*_("Clear")*/_("清除"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item17 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, /*_("Point Index")*/_("点索引"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, ID_TEXTCTRL_POINT_INDEX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, /*_("Position")*/_("位置"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_TEXTCTRL_POSITION, wxT(""), wxDefaultPosition, wxSize(150,-1), 0 );
    item17->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, /*_("Rotation")*/_("旋转"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_TEXTCTRL_ROTATION, wxT(""), wxDefaultPosition, wxSize(150,-1), 0 );
    item17->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, /*_("Time")*/_("时间"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_TEXTCTRL_TIME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item17->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item26 = new wxButton( parent, ID_BUTTON_MODIFY_MANUAL, /*_("Manual Modify")*/_("手动更改"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID_BUTTON_REMOVE_POINT, /*_("Remove Point")*/_("移除点"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT_CURR_CAMERA_POS, wxT(""), wxDefaultPosition, wxSize(300,-1), 0 );
    item0->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
