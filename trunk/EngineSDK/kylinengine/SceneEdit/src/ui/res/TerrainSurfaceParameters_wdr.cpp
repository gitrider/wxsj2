//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: TerrainSurfaceParameters.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "TerrainSurfaceParameters_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "TerrainSurfaceParameters_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *TerrainSurfaceParams( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxGridSizer *item0 = new wxGridSizer( 1, 0, 0 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, /*_("Terrain Surface Parameters")*/_("地形材质参数"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item2 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, /*_("Ambient")*/_("环境光"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_TEXTCTRL_AMBIENT, wxT(""), wxDefaultPosition, wxSize(160,-1), wxTE_PROCESS_ENTER );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_BUTTON_COLOUR_AMBIENT, _("Colour"), wxDefaultPosition, wxSize(50,-1), 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item6 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, /*_("Diffuse")*/_("漫反射"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_TEXTCTRL_DIFFUSE, wxT(""), wxDefaultPosition, wxSize(160,-1), wxTE_PROCESS_ENTER );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, ID_BUTTON_COLOUR_DIFFUSE, _("Colour"), wxDefaultPosition, wxSize(50,-1), 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item10 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, /*_("Specular")*/_("镜面反射"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_TEXTCTRL_SPECULAR, wxT(""), wxDefaultPosition, wxSize(160,-1), wxTE_PROCESS_ENTER );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, ID_BUTTON_COLOUR_SPECULAR, _("Colour"), wxDefaultPosition, wxSize(50,-1), 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxFlexGridSizer *item14 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, /*_("Emissive")*/_("自发光"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_TEXTCTRL_EMISSIVE, wxT(""), wxDefaultPosition, wxSize(160,-1), wxTE_PROCESS_ENTER );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, ID_BUTTON_COLOUR_EMISSIVE, _("Colour"), wxDefaultPosition, wxSize(50,-1), 0 );
    item14->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item18 = new wxGridSizer( 3, 0, 0 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, /*_("Shininess")*/_("发光强度"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_TEXTCTRL_SHININESS, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxGridSizer *item21 = new wxGridSizer( 2, 0, 0 );

    wxButton *item22 = new wxButton( parent, ID_BUTTON_OK, /*_("OK")*/wxT("确认[&O]"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item23 = new wxButton( parent, ID_BUTTON_CANCEL,/*_("Cancel")*/wxT("取消[&C]"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
