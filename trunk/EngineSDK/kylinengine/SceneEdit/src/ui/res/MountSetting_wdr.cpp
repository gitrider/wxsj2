//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: MountSetting.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "MountSetting_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "MountSetting_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *MountSetting( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 4, 0, 0 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, _("Attached Model"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_TEXTCTRL_ATTACHED_MODEL_ONE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Locator"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxComboBox *item4 = new wxComboBox( parent, ID_COMBO_LOCATOR1, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs4, wxCB_DROPDOWN );
    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Offset Position"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_TEXTCTRL_OFFSET_POS1, wxT(""), wxDefaultPosition, wxSize(150,-1), wxTE_PROCESS_ENTER );
    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_TEXTCTRL_ANIMATION1, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item0->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item9 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item10 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item11 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item12 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("Attached Model"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_TEXTCTRL_ATTACHED_MODEL_TWO, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item0->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Locator"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs16 = (wxString*) NULL;
    wxComboBox *item16 = new wxComboBox( parent, ID_COMBO_LOCATOR2, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs16, wxCB_DROPDOWN );
    item0->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Offset Position"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_TEXTCTRL_OFFSET_POS2, wxT(""), wxDefaultPosition, wxSize(150,-1), wxTE_PROCESS_ENTER );
    item0->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_TEXTCTRL_ANIMATION2, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_PROCESS_ENTER );
    item0->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item21 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item22 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item23 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item24 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, _("Mount Animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs26 = (wxString*) NULL;
    wxComboBox *item26 = new wxComboBox( parent, ID_COMBO_MOUNT_ANIM, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs26, wxCB_DROPDOWN );
    item0->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID_BUTTON_RESET_ANIM, _("Reset Animation"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
