<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: custctrl.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>custctrl.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        custctrl.h</span>
00003 <span class="comment">// Purpose:     wxCustomControls (v1.0.8)</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Oct-24-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_CUSTCTRL_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_CUSTCTRL_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "custctrl.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">// Doxygen special</span>
00020 <span class="preprocessor">#ifndef _WX_WINDOW_H_BASE_</span>
00021 <span class="preprocessor"></span><span class="preprocessor"># include "cc_dox_mainpage.h"</span>
00022 <span class="preprocessor">#endif</span>
00023 <span class="preprocessor"></span>
00024 <span class="comment">// -----------------------------------------------------------------------</span>
00025 
00026 <span class="preprocessor">#include "wx/caret.h"</span>
00027 
00028 <span class="preprocessor">#include "wx/renderer.h"</span>
00029 
00030 <span class="comment">// -----------------------------------------------------------------------</span>
00031 
00032 <span class="preprocessor">#if defined(WXMAKINGDLL_CUSTCTRL) || defined(WXMAKINGDLL_PROPGRID)</span>
00033 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_CC WXEXPORT</span>
00034 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00035 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_CC WXIMPORT</span>
00036 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00037 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_CC</span>
00038 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00039 <span class="preprocessor"></span>
00040 <span class="comment">// If given in button renderer flags, then popup arrow</span>
00041 <span class="comment">// is drawn on it as well.</span>
00042 <span class="preprocessor">#define wxCONTROL_POPUP_ARROW       wxCONTROL_CHECKED</span>
00043 <span class="preprocessor"></span>
00044 <span class="comment">// -----------------------------------------------------------------------</span>
00045 
00046 <span class="comment">//</span>
00047 <span class="comment">// Here are some platform dependent defines</span>
00048 <span class="comment">// (more in custctrl.cpp)</span>
00049 <span class="comment">//</span>
00050 
00051 <span class="preprocessor">#if defined(__WXMSW__)</span>
00052 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00053 
00054 <span class="preprocessor">#if wxUSE_UXTHEME</span>
00055 <span class="preprocessor"></span><span class="preprocessor"># include "wx/msw/uxtheme.h"</span>
00056 <span class="preprocessor">#endif</span>
00057 <span class="preprocessor"></span>
00058 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00059 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00060 <span class="preprocessor"></span>
00061 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00062 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00063 <span class="preprocessor"></span>
00064 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               1  // 1 if wxPopupWindow can be used.</span>
00065 <span class="preprocessor"></span>
00066 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00067 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00068 
00069 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00070 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00071 <span class="preprocessor"></span>
00072 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00073 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00074 <span class="preprocessor"></span>
00075     <span class="comment">// Disabled because no proper border support.</span>
00076 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               0  // 1 if wxPopupWindow can be used.</span>
00077 <span class="preprocessor"></span>
00078 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00079 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00080 
00081 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00082 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00083 <span class="preprocessor"></span>
00084 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00085 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00086 <span class="preprocessor"></span>
00087 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               1  // 1 if wxPopupWindow can be used.</span>
00088 <span class="preprocessor"></span>
00089 <span class="preprocessor">#else</span>
00090 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00091 
00092 <span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN1       2  // before image</span>
00093 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_CUSTOM_IMAGE_MARGIN2       7  // after image</span>
00094 <span class="preprocessor"></span>
00095 <span class="preprocessor">    #define wxCC_TEXTCTRL_YSPACING          2</span>
00096 <span class="preprocessor"></span><span class="preprocessor">    #define wxCC_TEXTCTRL_XSPACING          3</span>
00097 <span class="preprocessor"></span>
00098 <span class="preprocessor">    #define wxCC_USE_POPUPWIN               0  // 1 if wxPopupWindow can be used.</span>
00099 <span class="preprocessor"></span>
00100 <span class="preprocessor">#endif</span>
00101 <span class="preprocessor"></span>
00102 <span class="comment">// Conform to wxUSE_POPUPWIN</span>
00103 <span class="preprocessor">#if !wxUSE_POPUPWIN</span>
00104 <span class="preprocessor"></span><span class="preprocessor"># undef wxCC_USE_POPUPWIN</span>
00105 <span class="preprocessor"></span><span class="preprocessor"># define wxCC_USE_POPUPWIN                  0</span>
00106 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00107 <span class="preprocessor"></span>
00111 <span class="preprocessor">#define wxCC_CORRECT_CONTROL_POSITION     0</span>
00112 <span class="preprocessor"></span>
00113 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
00114 <span class="preprocessor"></span><span class="preprocessor"># undef wxCC_CUSTOM_IMAGE_MARGIN1</span>
00115 <span class="preprocessor"></span><span class="preprocessor"># undef wxCC_CUSTOM_IMAGE_MARGIN2</span>
00116 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00117 <span class="preprocessor"></span>
00118 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
00119 <span class="preprocessor"></span>
00120 <span class="comment">// -----------------------------------------------------------------------</span>
00121 
00122 <span class="preprocessor">#ifndef SWIG</span>
00123 <span class="preprocessor"></span><span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControl;
00124 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomTextCtrl;
00125 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomButton;
00126 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBox;
00127 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBoxHandler;
00128 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControlManager;
00129 <span class="preprocessor">#endif</span>
00130 <span class="preprocessor"></span>
00131 <span class="comment">// -----------------------------------------------------------------------</span>
00132 
00135 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControlHandler
00136 {
00137 <span class="keyword">public</span>:
00138 
00139     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetControl ( wxCustomControl* pctrl )
00140     {
00141         m_control = pctrl;
00142         m_flags = 0;
00143     }
00144     <span class="keyword">inline</span> wxCustomControl* GetControl()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_control; }
00145     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsMouseFocused() <span class="keyword">const</span>;
00146     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y ) { m_rect.x = x; m_rect.y = y; }
00147     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height ) { m_rect.width = width; m_rect.height = height; }
00148 
00149     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz )
00150     {
00151         m_rect.x = pos.x; m_rect.y = pos.y;
00152         m_rect.width = sz.x; m_rect.height = sz.y;
00153     }
00154 
00155     <span class="keyword">inline</span> <span class="keyword">const</span> wxRect&amp; GetRect()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_rect; }
00156 
00157     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">long</span> flag ) { m_flags &amp;= ~(flag); }
00158     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">long</span> flag ) { m_flags |= flag; }
00159 
00160     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
00161 
00162 <span class="keyword">protected</span>:
00163     wxCustomControl*        m_control;
00164     wxRect                  m_rect;
00165     <span class="keywordtype">long</span>                    m_flags; <span class="comment">// barely needed</span>
00166 };
00167 
00168 <span class="comment">// -----------------------------------------------------------------------</span>
00169 
00170 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomTextCtrlHandler : <span class="keyword">public</span> wxCustomControlHandler
00171 {
00172 <span class="keyword">public</span>:
00173     
00174     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz,
00175         <span class="keyword">const</span> wxString&amp; value );
00176 
00177     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00178 
00179     <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00180     
00181     <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event );
00182 
00183     <span class="keywordtype">int</span> HitTest ( wxCoord x, <span class="keywordtype">int</span>* pCol );
00184 
00185     <span class="keywordtype">bool</span> SetInsertionPoint ( <span class="keywordtype">long</span> pos, <span class="keywordtype">long</span> first_visible );
00186 
00187     <span class="keywordtype">bool</span> SetSelection ( <span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to );
00188 
00189     <span class="keywordtype">void</span> SetValue ( <span class="keyword">const</span> wxString&amp; value );
00190 
00191     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPosition ()<span class="keyword"> const</span>
00192 <span class="keyword">    </span>{
00193         <span class="keywordflow">return</span> m_position;
00194     }
00195 
00196     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_text; }
00197 
00198     <span class="comment">// like DEL key was pressed</span>
00199     <span class="keywordtype">void</span> DeleteSelection ();
00200 
00201     <span class="comment">// wxCC_FL_MODIFIED</span>
00202 
00203 <span class="keyword">protected</span>:
00204 
00205     wxString        m_text;
00206     <span class="comment">//wxString        m_textAtPos; // text that begins at position</span>
00207     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    m_position;
00208     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    m_scrollPosition;
00209     <span class="keywordtype">int</span>             m_selStart;
00210     <span class="keywordtype">int</span>             m_selEnd;
00211     <span class="keywordtype">int</span>             m_itemButDown; <span class="comment">// dragging centers around this</span>
00212 
00213     wxArrayInt      m_arrExtents; <span class="comment">// cached array of text extents</span>
00214 
00215     <span class="keywordtype">int</span> UpdateExtentCache ( wxString&amp; tempstr, size_t index );
00216 
00217 };
00218 
00219 <span class="comment">// -----------------------------------------------------------------------</span>
00220 
00221 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomButtonHandler : <span class="keyword">public</span> wxCustomControlHandler
00222 {
00223     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButton;
00224 <span class="keyword">public</span>:
00225     
00226     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00227 
00228     <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event );
00229 
00230     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetButtonState ( <span class="keywordtype">int</span> state ) { m_down = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)state; }
00231 
00232 <span class="keyword">protected</span>:
00233     wxString        m_label;
00234     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_down; <span class="comment">// 0 means button is up</span>
00235 
00236 };
00237 
00238 <span class="comment">// -----------------------------------------------------------------------</span>
00239 
00240 <span class="preprocessor">#if wxCC_USE_POPUPWIN</span>
00241 <span class="preprocessor"></span><span class="preprocessor"># include "wx/popupwin.h"</span>
00242 <span class="preprocessor"># define wxCustomComboPopupBase      wxPopupWindow</span>
00243 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00244 <span class="preprocessor"></span><span class="preprocessor"># define wxCustomComboPopupBase      wxWindow</span>
00245 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00246 <span class="preprocessor"></span>
00247 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboItem
00248 {
00249 <span class="keyword">public</span>:
00250     wxCustomComboItem();
00251     <span class="keyword">virtual</span> ~wxCustomComboItem();
00252 <span class="keyword">protected</span>:
00253 };
00254 
00255 <span class="comment">// -----------------------------------------------------------------------</span>
00256 
00257 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboPopup : <span class="keyword">public</span> wxCustomComboPopupBase
00258 {
00259     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomControlManager;
00260 <span class="keyword">public</span>:
00261     wxCustomComboPopup ();
00262     <span class="keyword">virtual</span> ~wxCustomComboPopup();
00263 
00264     <span class="keywordtype">bool</span> Create ( wxWindow* frame, wxCCustomComboBoxHandler* data,
00265         <span class="keyword">const</span> wxRect&amp; ctrl_rect, wxCustomControl* ctrl,
00266         <span class="keyword">const</span> wxSize&amp; size, <span class="keywordtype">int</span> sizealign );
00267 
00268 <span class="comment">/*#if wxCC_USE_POPUPWIN</span>
00269 <span class="comment">    inline wxScrolledWindow* GetWindow() const { return m_subWindow; };</span>
00270 <span class="comment">#else</span>
00271 <span class="comment">    inline wxScrolledWindow* GetWindow() { return this; };</span>
00272 <span class="comment">#endif*/</span>
00273 
00274     <span class="comment">// kbscroll allows forcing to scroll one item at a time.</span>
00275     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ShowItem ( <span class="keyword">const</span> wxCustomComboItem&amp; item, <span class="keywordtype">bool</span> kbscroll = FALSE ) = 0;
00276     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnKeyEvent ( wxKeyEvent&amp; event ) = 0;
00277     <span class="comment">//virtual void SetSelection ( const wxCustomComboItem&amp; item ) = 0;</span>
00278 
00279     <span class="keywordtype">void</span> ForcedClose ();
00280 
00281     <span class="keyword">inline</span> wxCustomControl* GetControl ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_control; }
00282 
00283     <span class="comment">// Event handlers.</span>
00284     <span class="keywordtype">void</span> OnMouseEntry( wxMouseEvent&amp; event );
00285 
00286 <span class="keyword">protected</span>:
00287     wxCustomControl*            m_control;
00288     wxCustomControlManager*     m_manager;
00289     wxCCustomComboBoxHandler*   m_chData;
00290 
00291     wxArrayPtrVoid              m_labels; <span class="comment">// holds pointers to labels</span>
00292 
00293     <span class="keywordtype">int</span>                         m_wheelSum;
00294 
00295     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_orientation;
00296 
00297     <span class="comment">//unsigned char               m_entryStatus;</span>
00298 <span class="keyword">private</span>:
00299     DECLARE_EVENT_TABLE()
00300 };
00301 
00302 <span class="comment">// -----------------------------------------------------------------------</span>
00303 
00304 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboListItem : <span class="keyword">public</span> wxCustomComboItem
00305 {
00306 <span class="keyword">public</span>:
00307     wxCustomComboListItem();
00308     wxCustomComboListItem( <span class="keywordtype">int</span> index ) { m_index = index; }
00309     <span class="keyword">virtual</span> ~wxCustomComboListItem();
00310 
00311     <span class="keywordtype">int</span> m_index;
00312 
00313 <span class="keyword">protected</span>:
00314 };
00315 
00316 <span class="comment">// -----------------------------------------------------------------------</span>
00317 
00318 <span class="preprocessor">#include "wx/scrolbar.h"</span>
00319 
00320 <span class="keyword">class </span>WXDLLIMPEXP_CC wxComboPopupDefaultList : <span class="keyword">public</span> wxCustomComboPopup
00321 {
00322 <span class="keyword">public</span>:
00323     wxComboPopupDefaultList ( wxWindow* frame, wxCCustomComboBoxHandler* data,
00324         <span class="keyword">const</span> wxRect&amp; rect, wxCustomControl* ctrl );
00325     <span class="keyword">virtual</span> ~wxComboPopupDefaultList();
00326 
00327     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ShowItem ( <span class="keyword">const</span> wxCustomComboItem&amp; item, <span class="keywordtype">bool</span> kbscroll = FALSE );
00328 
00329     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowItem ( <span class="keywordtype">int</span> index, <span class="keywordtype">bool</span> kbscroll = FALSE )
00330     {
00331         wxCustomComboListItem item(index);
00332         ShowItem (item,kbscroll);
00333     }
00334 
00335     <span class="comment">//virtual void SetSelection ( const wxCustomComboItem&amp; item );</span>
00336 
00337     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnKeyEvent ( wxKeyEvent&amp; event );
00338 
00339     <span class="keywordtype">int</span> HitTest ( <span class="keywordtype">int</span> y );
00340 
00341     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( <span class="keywordtype">int</span> index )
00342     {
00343         wxCustomComboListItem item(index);
00344         DrawItem(item);
00345     }
00346     <span class="keywordtype">void</span> DrawItem ( <span class="keyword">const</span> wxCustomComboItem&amp; item );
00347     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxRect&amp; r, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index );
00348 
00349     <span class="keywordtype">void</span> OnMouseWheelEvent ( wxMouseEvent&amp; event );
00350 
00351     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent&amp; event );
00352 
00353     <span class="keywordtype">void</span> OnMouseDown ( wxMouseEvent&amp; event );
00354     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent&amp; event );
00355     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollEvent&amp; event );
00356 
00357     <span class="keywordtype">void</span> SetViewStart ( <span class="keywordtype">int</span> index, <span class="keywordtype">bool</span> adjust_sb );
00358     <span class="keywordtype">void</span> RecheckHilighted ( <span class="keywordtype">int</span> y );
00359 
00360     <span class="comment">//void OnMouseUp ( wxMouseEvent&amp; event );</span>
00361 
00362     <span class="comment">//void SetImagePaintFunction ( wxCustomPaintFunc paintfunc ) { m_paintFunc = paintfunc; }</span>
00363 
00364 <span class="keyword">protected</span>:
00365 
00366     <span class="keywordtype">int</span>             m_hilighted;
00367     <span class="keywordtype">int</span>             m_itemHeight;
00368 
00369     <span class="comment">// Scrolling related.</span>
00370     wxScrollBar*    m_pScrollBar;
00371     <span class="keywordtype">int</span>             m_clientWidth;
00372     <span class="keywordtype">int</span>             m_viewStartY;
00373     <span class="keywordtype">int</span>             m_viewStartIndex;
00374     <span class="keywordtype">int</span>             m_sbWidth;
00375 
00376 <span class="keyword">private</span>:
00377     DECLARE_EVENT_TABLE()
00378 };
00379 
00380 <span class="comment">// -----------------------------------------------------------------------</span>
00381 
00382 <span class="keyword">typedef</span> wxSize (*wxCustomPaintFunc) ( wxDC&amp;, <span class="keyword">const</span> wxRect&amp;, <span class="keywordtype">int</span>, <span class="keywordtype">void</span>* );
00383 
00384 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboPopup;
00385 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomComboItem;
00386 <span class="keyword">class </span>WXDLLIMPEXP_CC wxComboPopupDefaultList;
00387 
00388 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBoxHandler : <span class="keyword">public</span> wxCustomControlHandler
00389 {
00390     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBox;
00391     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomComboPopup;
00392 <span class="keyword">public</span>:
00393     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxString&amp; value,
00394         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
00395 
00396     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetControl ( wxCustomControl* pctrl )
00397     {
00398         wxCustomControlHandler::SetControl ( pctrl );
00399         m_btData.SetControl ( pctrl );
00400     }
00401 
00402     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSelection ( <span class="keyword">const</span> wxCustomComboItem&amp; item ) = 0;
00403 
00404     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect, <span class="keywordtype">bool</span> item_too );
00405 
00406     <span class="keyword">inline</span> wxCustomComboPopup* GetPopupInstance ()<span class="keyword"> const</span>
00407 <span class="keyword">    </span>{
00408         <span class="keywordflow">return</span> m_listInstance;
00409     }
00410 
00411     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSelect ( <span class="keyword">const</span> wxCustomComboItem&amp; item ) = 0;
00412 
00413     <span class="keyword">inline</span> <span class="keywordtype">void</span> IntOnSelect ( <span class="keywordtype">int</span> index )
00414     {
00415         wxCustomComboListItem item(index);
00416         OnSelect (item);
00417     }
00418 
00419     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event ) = 0;
00420 
00421     <span class="keyword">virtual</span> wxCustomComboPopup* CreatePopup ( wxWindow* frame,
00422         <span class="keyword">const</span> wxRect&amp; ctrl_rect, wxCustomControl* ctrl ) = 0;
00423 
00424     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00425 
00426     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y )
00427     {
00428         m_rect.x = x; m_rect.y = y;
00429         m_btData.Move ( x + m_rect.width - m_buttonWidth, y );
00430     }
00431     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height )
00432     {
00433         m_rect.width = width - m_buttonWidth;
00434         m_rect.height = height;
00435         m_btData.Move ( m_rect.x + width - m_buttonWidth, m_rect.y );
00436         m_btData.SetSize ( m_buttonWidth, height );
00437     }
00438 
00439     <span class="comment">//inline const wxArrayPtrVoid&amp; GetLabels() const { return m_labels; }</span>
00440     <span class="keyword">inline</span> wxCustomPaintFunc GetPaintFunc()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_paintfunc; }
00441     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPaintFuncCustomData()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_paintfunc_customdata; }
00442     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetImageSize()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_imageSize; }
00443     <span class="comment">//inline int GetSelection() const { return m_selection; }</span>
00444 
00445     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValue( <span class="keyword">const</span> wxString&amp; text ) { m_text = text; }
00446     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_text; }
00447 
00448     <span class="keyword">inline</span> wxCCustomButtonHandler* GetButtonData() { <span class="keywordflow">return</span> &amp;m_btData; }
00449 
00450     <span class="keyword">virtual</span> ~wxCCustomComboBoxHandler();
00451 
00452 <span class="keyword">protected</span>:
00453 
00454     <span class="comment">//int                     m_selection;</span>
00455 
00456     <span class="keywordtype">int</span>                     m_buttonWidth;
00457 
00458     wxSize                  m_imageSize; <span class="comment">// size of custom image in the list</span>
00459 
00460     wxString                m_text; <span class="comment">// text currently shown</span>
00461 
00462     <span class="comment">//wxArrayPtrVoid          m_labels; // holds pointers to labels</span>
00463 
00464     wxCCustomButtonHandler      m_btData;
00465 
00466     <span class="comment">//wxCustomComboItem*      m_pItem;</span>
00467 
00468     wxCustomComboPopup*     m_listInstance;
00469 
00470     wxCustomPaintFunc       m_paintfunc;
00471     <span class="keywordtype">void</span>*                   m_paintfunc_customdata;
00472 
00473     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>           m_prevMouseFocus; <span class="comment">// used detect in which portion of control mouse is</span>
00474 
00475 };
00476 
00477 <span class="comment">// -----------------------------------------------------------------------</span>
00478 
00479 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBoxDefaultHandler : <span class="keyword">public</span> wxCCustomComboBoxHandler
00480 {
00481 <span class="keyword">public</span>:
00482     <span class="keywordtype">void</span> Create ( wxCustomControl* pctrl, <span class="keyword">const</span> wxString&amp; value,
00483         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz,
00484         <span class="keywordtype">int</span> n, <span class="keyword">const</span> wxChar* choices[] );
00485 
00486     <span class="keywordtype">int</span> Append( <span class="keyword">const</span> wxString&amp; str );
00487 
00488     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSelection ( <span class="keyword">const</span> wxCustomComboItem&amp; item );
00489     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnSelect ( <span class="keyword">const</span> wxCustomComboItem&amp; item );
00490     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00491     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00492     <span class="keyword">virtual</span> wxCustomComboPopup* CreatePopup ( wxWindow* frame,
00493         <span class="keyword">const</span> wxRect&amp; ctrl_rect, wxCustomControl* ctrl );
00494 
00495     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayPtrVoid&amp; GetLabels()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_labels; }
00496     <span class="keyword">inline</span> wxArrayPtrVoid&amp; GetWritableLabels() { <span class="keywordflow">return</span> m_labels; }
00497     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selection; }
00498 
00499     <span class="keyword">virtual</span> ~wxCCustomComboBoxDefaultHandler();
00500 
00501 <span class="keyword">protected</span>:
00502 
00503     <span class="keywordtype">int</span>                     m_selection;
00504 
00505     wxArrayPtrVoid          m_labels; <span class="comment">// Holds pointers to labels.</span>
00506 
00507     wxArrayString           m_extraStrings; <span class="comment">// Place extra appended strings here.</span>
00508 
00509 };
00510 
00515 <span class="preprocessor">#define wxCCM_FL_SCROLLEDWIN        0x0001</span>
00516 <span class="preprocessor"></span>
00518 <span class="preprocessor">#define wxCCM_FL_EVENTREADY         0x0002</span>
00519 <span class="preprocessor"></span>
00521 <span class="preprocessor">#define wxCCM_FL_DRAGGING           0x0004</span>
00522 <span class="preprocessor"></span>
00524 <span class="preprocessor">#define wxCCM_FL_MOUSE_INSIDE       0x0008</span>
00525 <span class="preprocessor"></span>
00527 <span class="preprocessor">#define wxCCM_FL_VIEWSTARTCHANGED   0x0010</span>
00528 <span class="preprocessor"></span>
00530 <span class="preprocessor">#define wxCCM_FL_CARETVISIBLE       0x0020</span>
00531 <span class="preprocessor"></span>
00532 <span class="comment">// -----------------------------------------------------------------------</span>
00533 
00538 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControlManager
00539 {
00540     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomControl;
00541     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomTextCtrlHandler;
00542     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomTextCtrl;
00543     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButtonHandler;
00544     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButton;
00545     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBoxHandler;
00546     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBox;
00547 <span class="keyword">public</span>:
00548     
00549     wxCustomControlManager();
00550     wxCustomControlManager( wxWindow* parent );
00551     ~wxCustomControlManager();
00552 
00553     <span class="keywordtype">void</span> AddChild ( wxCustomControl* child );
00554 
00555     <span class="keywordtype">void</span> AddChildData ( wxCustomControlHandler* pdata );
00556 
00557     <span class="keywordtype">void</span> AddEvent ( wxCustomControl* child, <span class="keywordtype">int</span> eventtype );
00558 
00559     <span class="keywordtype">void</span> ClosePopup ();
00560 
00561     <span class="keywordtype">void</span> Create ( wxWindow* parent );
00562 
00567     wxDC&amp; CreateDC ( wxPoint* palignpt );
00568 
00571     wxWindow* CreatePopupParent() { <span class="keywordflow">return</span> m_parent; }
00572 
00576     <span class="keywordtype">void</span> CtrlWriteText ( wxDC&amp; dc, <span class="keyword">const</span> wxChar* text,
00577         <span class="keyword">const</span> wxRect&amp; rect, wxCustomControl* ctrl, <span class="keywordtype">int</span> state );
00578 
00580     <span class="keywordtype">void</span> DestroyDC ( wxDC&amp; dc );
00581 
00582     wxCustomControlHandler* FindDataByPosition ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00583     wxCustomControl* FindWindowByPosition ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00584 
00585     <span class="keyword">inline</span> <span class="keywordtype">void</span> ForceMouseLeave ( wxMouseEvent&amp; event )
00586     {
00587         DoMouseLeave ( event, NULL, TRUE );
00588     }
00589 
00590     <span class="keyword">inline</span> wxEvent&amp; GetEvent ()
00591     {
00592         m_flags &amp;= ~(wxCCM_FL_EVENTREADY);
00593         <span class="keywordflow">return</span> *(&amp;m_event);
00594     }
00595 
00596     <span class="keyword">inline</span> wxPoint GetCaretPosition ()<span class="keyword"> const</span>
00597 <span class="keyword">    </span>{
00598         wxPoint p = m_pCaret-&gt;GetPosition();
00599         <span class="comment">//TranslatePositionToLogical ( &amp;p.x, &amp;p.y );</span>
00600         <span class="keywordflow">return</span> p;
00601     }
00602 
00603     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_flags; }
00604 
00605     <span class="keyword">inline</span> wxWindow* GetPopup ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_openPopup; }
00606 
00607     <span class="keyword">inline</span> wxCustomControl* GetFocused ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ctrlKbFocus; }
00608     <span class="keyword">inline</span> wxCustomControlHandler* GetMouseFocusedData ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_dataMouseFocus; }
00609 
00610     <span class="keyword">inline</span> wxWindow* GetWindow ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
00611 
00612     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetWindowColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colBackground); }
00613     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetWindowTextColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colText); }
00614     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetSelectionColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colSelection); }
00615     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetSelectionTextColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colSelectionText); }
00616     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetButtonColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colButton); }
00617     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetButtonTextColour ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_colButtonText); }
00618 
00619     <span class="keyword">inline</span> wxString&amp; GetTempString() { <span class="keywordflow">return</span> *(&amp;m_tempStr1); }
00620 
00621     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasEvent ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_flags &amp; wxCCM_FL_EVENTREADY)?TRUE:FALSE; }
00622 
00623     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasKbFocus ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_ctrlKbFocus!=NULL)?TRUE:FALSE; }
00624 
00625     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasMouseFocus ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_ctrlMouseFocus!=NULL)?TRUE:FALSE; }
00626 
00627     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDragging ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_flags &amp; wxCCM_FL_DRAGGING)?TRUE:FALSE; }
00628 
00629     <span class="keywordtype">void</span> MoveCaret ( <span class="keyword">const</span> wxRect&amp; ctrl_rect, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00630     <span class="comment">//void MoveCaretRelative ( int x, int y );</span>
00631     <span class="keywordtype">void</span> RepositionCaret ();
00632 
00635     <span class="keywordtype">void</span> OnParentFocusChange ( <span class="keywordtype">bool</span> state );
00636 
00639     <span class="keywordtype">void</span> OnParentScrollWinEvent ( wxScrollWinEvent &amp;event );
00640 
00641     <span class="keywordtype">void</span> OnParentScrollChange ();
00642 
00643     <span class="keywordtype">bool</span> ProcessKeyboardEvent ( wxKeyEvent&amp; event );
00644 
00651     <span class="keywordtype">bool</span> ProcessMouseEvent ( wxMouseEvent&amp; event );
00652 
00653     <span class="keywordtype">void</span> RemoveChild ( wxCustomControl* child );
00654 
00655     <span class="keywordtype">void</span> RemoveFocus ( wxCustomControl* child );
00656 
00657     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowCaret ()
00658     {
00659         <span class="keywordflow">if</span> ( m_pCaret &amp;&amp; !(m_flags &amp; wxCCM_FL_CARETVISIBLE) )
00660         {
00661             m_pCaret-&gt;Show ( TRUE );
00662             m_flags |= wxCCM_FL_CARETVISIBLE;
00663             <span class="comment">//wxLogDebug ( wxT("ShowCaret( visible_after=%i )"), (int)m_pCaret-&gt;IsVisible() );</span>
00664         }
00665     }
00666 
00667     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowCaretBalanced ()
00668     {
00669         m_pCaret-&gt;Show ( TRUE );
00670     }
00671 
00672     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideCaretBalanced ()
00673     {
00674         m_pCaret-&gt;Show ( FALSE );
00675     }
00676 
00677     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideCaret ()
00678     {
00679         <span class="keywordflow">if</span> ( m_pCaret &amp;&amp; ( m_flags &amp; wxCCM_FL_CARETVISIBLE ) )
00680         {
00681             m_pCaret-&gt;Show ( FALSE );
00682             m_flags &amp;= ~(wxCCM_FL_CARETVISIBLE);
00683             <span class="comment">//wxLogDebug ( wxT("HideCaret( visible_after=%i )"), (int)m_pCaret-&gt;IsVisible() );</span>
00684         }
00685     }
00686 
00687     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsCaretVisible ()<span class="keyword"> const</span>
00688 <span class="keyword">    </span>{
00689         <span class="comment">//if ( m_pCaret )</span>
00690             <span class="keywordflow">return</span> m_pCaret-&gt;IsVisible();
00691         <span class="comment">//return FALSE;</span>
00692     }
00693 
00694     <span class="keywordtype">void</span> SetDoubleBuffer ( wxBitmap* buffer ) { m_bmpDoubleBuffer = buffer; }
00695 
00696     <span class="keywordtype">void</span> SetFocus ( wxCustomControl* child );
00697 
00698     <span class="keywordtype">void</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font ) { m_font = font; }
00699 
00700     <span class="keywordtype">void</span> SetPopup ( wxCustomComboPopup* popup );
00701 
00702     <span class="keyword">inline</span> <span class="keywordtype">void</span> StartDragging () { m_flags |= wxCCM_FL_DRAGGING; }
00703     
00704     <span class="keyword">inline</span> <span class="keywordtype">void</span> StopDragging () { m_flags &amp;= ~(wxCCM_FL_DRAGGING); }
00705 
00708     <span class="keywordtype">void</span> TranslatePositionToPhysical ( <span class="keywordtype">int</span>* x, <span class="keywordtype">int</span>* y ) <span class="keyword">const</span>;
00709     <span class="keywordtype">void</span> TranslatePositionToLogical ( <span class="keywordtype">int</span>* x, <span class="keywordtype">int</span>* y ) <span class="keyword">const</span>;
00710 
00711 <span class="keyword">protected</span>:
00712 
00713     <span class="comment">// returns index to first data of a control</span>
00714     <span class="keywordtype">int</span> GetControlsFirstData ( wxCustomControl* ctrl );
00715 
00716 <span class="keyword">protected</span>:
00717 
00718 
00719     wxWindow*               m_parent;
00720 
00721     wxBitmap*               m_bmpDoubleBuffer; <span class="comment">// never owns; just borrows parent's, if available;</span>
00722 
00723     <span class="comment">//wxArrayPtrVoid          m_controls;</span>
00724 
00725     wxArrayPtrVoid          m_handlers; <span class="comment">// one control may comprise of more than one controldata</span>
00726 
00727     wxCustomControl*    m_ctrlMouseFocus; <span class="comment">// which control has mouse focus</span>
00728     wxCustomControlHandler*    m_dataMouseFocus; <span class="comment">// which controldata has mouse focus</span>
00729     wxCustomControl*    m_ctrlKbFocus; <span class="comment">// which control has keyboard focus</span>
00730 
00731     wxCaret*                m_pCaret;
00732 
00733     wxPoint                 m_caretRelativePos; <span class="comment">// caret x inside m_ctrlKbFocus</span>
00734 
00735     wxColour                m_colBackground;
00736     wxColour                m_colText;
00737     wxColour                m_colSelection;
00738     wxColour                m_colSelectionText;
00739     wxColour                m_colButton;
00740     wxColour                m_colButtonText;
00741 
00742     wxFont                  m_font;
00743 
00744     wxCursor                m_cursorIBeam;
00745 
00746     wxString                m_tempStr1;
00747 
00748     <span class="keywordtype">long</span>                    m_flags;
00749 
00750     wxCommandEvent          m_event;
00751 
00752 <span class="preprocessor">#if wxCC_CORRECT_CONTROL_POSITION</span>
00753 <span class="preprocessor"></span>    wxSize                  m_prevViewStart; <span class="comment">// for wxScrolledWindow scroll management</span>
00754 <span class="preprocessor">#endif</span>
00755 <span class="preprocessor"></span>
00756     wxWindow*               m_openPopup;
00757 
00758     <span class="keywordtype">void</span> DoMouseLeave ( wxMouseEvent&amp; event, wxCustomControlHandler* newdata, <span class="keywordtype">bool</span> force );
00759 
00760 };
00761 
00762 <span class="comment">// -----------------------------------------------------------------------</span>
00763 
00764 <span class="preprocessor">#define wxCC_FL_KBFOCUS         0x0001</span>
00765 <span class="preprocessor"></span>
00766 <span class="preprocessor">#define wxCC_FL_MOUSEFOCUS      0x0002 // When mouse is over the control and it is not dragging for another control</span>
00767 <span class="preprocessor"></span>
00768 <span class="preprocessor">#define wxCC_FL_NEEDSCARET      0x0004</span>
00769 <span class="preprocessor"></span>
00770 <span class="preprocessor">#define wxCC_FL_DRAWN           0x0008 // Set by drawing function</span>
00771 <span class="preprocessor"></span>
00772 <span class="preprocessor">#define wxCC_FL_MODIFIED        0x0010 // May be needed internally by various controls/datas</span>
00773 <span class="preprocessor"></span>
00774 <span class="preprocessor">#define wxCC_FL_REMOVED         0x0020 // Manager's RemoveChild already called on this.</span>
00775 <span class="preprocessor"></span>
00776 <span class="preprocessor">#define wxCC_EXTRA_FLAG(N)      (1&lt;&lt;(16+N))</span>
00777 <span class="preprocessor"></span>
00778 <span class="comment">// -----------------------------------------------------------------------</span>
00779 
00780 <span class="keywordtype">void</span> wxRendererNative_DrawButton (wxWindow* win, wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect, <span class="keywordtype">int</span> flags = wxUP );
00781 
00782 <span class="comment">// -----------------------------------------------------------------------</span>
00783 
00784 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCustomControl : <span class="keyword">public</span> wxObject
00785 {
00786         DECLARE_DYNAMIC_CLASS(wxCustomControl)
00787 
00788     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomControlManager;
00789     <span class="keyword">friend</span> <span class="keyword">class </span>wxCustomTextCtrlHandler;
00790     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomButtonHandler;
00791     <span class="keyword">friend</span> <span class="keyword">class </span>wxCCustomComboBoxHandler;
00792 <span class="keyword">public</span>:
00793 
00794     wxCustomControl();
00795     wxCustomControl ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>,
00796         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; size, <span class="keywordtype">long</span> style = 0 );
00797     <span class="keyword">virtual</span> ~wxCustomControl();
00798 
00799     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00800 
00801     <span class="keyword">inline</span> <span class="keyword">const</span> wxColour&amp; GetBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_manager-&gt;m_colBackground);}
00802 
00803     <span class="keyword">inline</span> wxFont&amp; GetFont ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_pFont; }
00804     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
00805 
00806     <span class="keyword">inline</span> wxWindowID GetId ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_id; }
00807 
00808     <span class="keyword">inline</span> wxCustomControlManager* GetManager ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_manager; }
00809 
00810     <span class="keyword">inline</span> wxWindow* GetParent ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_manager-&gt;m_parent; }
00811     
00812     <span class="keyword">inline</span> wxPoint GetPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPoint(m_rect.x,m_rect.y); }
00813     
00814     <span class="keyword">inline</span> wxRect GetRect ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_rect; }
00815     
00816     <span class="keyword">inline</span> wxSize GetSize ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxSize(m_rect.width,m_rect.height); }
00817 
00818     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetX ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_rect.x; }
00819     
00820     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetWindowStyle ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_windowStyle; }
00821 
00822     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( <span class="keyword">const</span> wxPoint&amp; pos ) { DoMove (pos.x,pos.y); }
00823 
00824     <span class="keyword">inline</span> <span class="keywordtype">void</span> Move ( wxCoord x, wxCoord y ) { DoMove (x,y); }
00825 
00828     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnFocus ( <span class="keywordtype">bool</span> focused );
00829 
00832     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00833 
00836     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
00837 
00838     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00839 
00841     <span class="keywordtype">void</span> DrawPDC ( wxDC* dc = NULL );
00842 
00843     <span class="keyword">inline</span> <span class="keywordtype">void</span> Draw () { DrawPDC ( NULL ); }
00844 
00845     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc );
00846 
00850     <span class="keywordtype">void</span> Draw ( wxDC&amp; dc, <span class="keyword">const</span> wxPoint* align );
00851 
00859     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00860 
00861     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00862 
00863     wxCommandEvent&amp; GetEvent ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *(&amp;m_manager-&gt;m_event); }
00864 
00865     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasFocus ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_manager-&gt;m_ctrlKbFocus == <span class="keyword">this</span> )?TRUE:FALSE; }
00866 
00867     <span class="keyword">inline</span> <span class="keywordtype">void</span> Refresh ( <span class="keywordtype">bool</span> = FALSE, <span class="keyword">const</span> wxRect* = (<span class="keyword">const</span> wxRect*) NULL ) { Draw(); }
00868 
00869     <span class="keyword">inline</span> <span class="keywordtype">void</span> RemoveFocus ()
00870     {
00871         m_manager-&gt;RemoveFocus ( <span class="keyword">this</span> );
00872     }
00873 
00874     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetFont () { m_pFont = &amp;m_manager-&gt;m_font; }
00875 
00876     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFocus ()
00877     {
00878         m_manager-&gt;SetFocus ( <span class="keyword">this</span> );
00879     }
00880 
00881     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFocusFromKbd ()
00882     {
00883         m_manager-&gt;SetFocus ( <span class="keyword">this</span> );
00884     }
00885 
00890     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFont ( wxFont&amp; font, wxDC* pdc = NULL );
00891 
00892     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height )
00893     {
00894         DoMove ( x, y );
00895         DoSetSize ( width, height );
00896     }
00897 
00898     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keyword">const</span> wxRect&amp; rect )
00899     {
00900         DoMove ( rect.x, rect.y );
00901         DoSetSize ( rect.width, rect.height );
00902     }
00903 
00904     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height )
00905     { 
00906         DoSetSize ( width, height );
00907     }
00908 
00909     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSize ( <span class="keyword">const</span> wxSize&amp; size )
00910     {
00911         DoSetSize ( size.x, size.y );
00912     }
00913 
00914 <span class="keyword">protected</span>:
00915     wxCustomControlManager  *m_manager;
00916     wxFont                  *m_pFont;
00917     wxRect                  m_rect;
00918     <span class="comment">//wxSize                  m_imageSize; // Size of image in front of the control</span>
00919     wxWindowID              m_id;
00920     <span class="keywordtype">long</span>                    m_windowStyle;
00921     wxUint32                m_flags;
00922     <span class="keywordtype">int</span>                     m_fontHeight;
00923     <span class="keywordtype">int</span>                     m_xSplit; <span class="comment">// splitting the control into two parts (wxCCustomComboBox needs)</span>
00924     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>           m_curPart; <span class="comment">// which part of the control is focused? (only if m_xSplit)</span>
00925 };
00926 
00927 <span class="comment">// -----------------------------------------------------------------------</span>
00928 
00929 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxCustomControlHandler::IsMouseFocused()<span class="keyword"> const</span>
00930 <span class="keyword"></span>{
00931     <span class="keywordflow">return</span> m_control-&gt;GetManager()-&gt;GetMouseFocusedData() == <span class="keyword">this</span>;
00932 }
00933 
00934 <span class="comment">// -----------------------------------------------------------------------</span>
00935 
00936 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomTextCtrl : <span class="keyword">public</span> wxCustomControl
00937 {
00938         DECLARE_DYNAMIC_CLASS(wxCCustomTextCtrl)
00939 
00940 <span class="keyword">public</span>:
00941 
00942     wxCCustomTextCtrl () : wxCustomControl() { }
00943 
00944     wxCCustomTextCtrl ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
00945         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00946         <span class="keywordtype">long</span> style = 0 );
00947 
00948     <span class="keyword">virtual</span> ~wxCCustomTextCtrl();
00949 
00950     <span class="keyword">inline</span> wxString GetValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_data.GetValue(); }
00951 
00952     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetSelection(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to)
00953     {
00954         <span class="keywordflow">if</span> ( m_data.SetSelection(from,to) )
00955             Draw ();
00956     }
00957 
00958     <span class="keywordtype">void</span> SetValue ( <span class="keyword">const</span> wxString&amp; value );
00959 
00960     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetInsertionPoint ( <span class="keywordtype">long</span> pos, <span class="keywordtype">long</span> first_visible = -1 )
00961     {
00962         <span class="keywordflow">if</span> ( m_data.SetInsertionPoint (pos,first_visible) )
00963             Draw ();
00964     }
00965 
00966     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00967     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00968     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00969     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnFocus ( <span class="keywordtype">bool</span> focused );
00970     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
00971     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
00972     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
00973     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFont ( wxFont&amp; font, wxDC* pdc );
00974 
00975 <span class="keyword">protected</span>:
00976     wxCustomTextCtrlHandler    m_data;
00977 };
00978 
00979 <span class="comment">// -----------------------------------------------------------------------</span>
00980 
00981 <span class="comment">//#define wxCC_BT_DOWN    wxCC_EXTRA_FLAG(0)</span>
00982 
00983 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomButton : <span class="keyword">public</span> wxCustomControl
00984 {
00985         DECLARE_DYNAMIC_CLASS(wxCCustomButton)
00986 
00987 <span class="keyword">public</span>:
00988 
00989     wxCCustomButton () : wxCustomControl() { }
00990 
00991     wxCCustomButton ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* label,
00992         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize );
00993     <span class="keyword">virtual</span> ~wxCCustomButton();
00994 
00995     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabel ( <span class="keyword">const</span> wxChar* label ) { m_data.m_label = label; }
00996 
00997     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
00998     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
00999     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
01000     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
01001     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
01002     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
01003     <span class="comment">//virtual void SetFont ( wxFont&amp; font );</span>
01004 
01005 <span class="keyword">protected</span>:
01006     wxCCustomButtonHandler      m_data;
01007 };
01008 
01009 <span class="comment">// -----------------------------------------------------------------------</span>
01010 
01011 <span class="preprocessor">#define wxCH_CC_DOUBLE_CLICK_CYCLES     0x0010 // double-clicking cycles the selection</span>
01012 <span class="preprocessor"></span><span class="preprocessor">#define wxCH_CC_IMAGE_EXTENDS           0x0020 // image is drawn outside in non-popup portion</span>
01013 <span class="preprocessor"></span><span class="preprocessor">#define wxCH_CC_DROPDOWN_ANCHOR_RIGHT   0x0040 // anchor drop-down to right edge of parent window.</span>
01014 <span class="preprocessor"></span>
01015 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomComboBox : <span class="keyword">public</span> wxCustomControl
01016 {
01017         DECLARE_DYNAMIC_CLASS(wxCCustomComboBox)
01018 
01019 <span class="keyword">public</span>:
01020 
01021     wxCCustomComboBox () : wxCustomControl() { }
01022 
01023     wxCCustomComboBox ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>,
01024         <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
01025         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01026         <span class="keywordtype">int</span> n = 0, <span class="keyword">const</span> wxChar* choices[] = NULL, <span class="keywordtype">long</span> style = 0,
01027         <span class="keyword">const</span> wxSize&amp; imagesize = wxDefaultSize );
01028     <span class="keyword">virtual</span> ~wxCCustomComboBox();
01029 
01030     <span class="keyword">inline</span> <span class="keywordtype">int</span> Append( <span class="keyword">const</span> wxString&amp; str )
01031     {
01032         <span class="keywordflow">return</span> ((wxCCustomComboBoxDefaultHandler*)m_chData)-&gt;Append( str );
01033     }
01034 
01035     <span class="keyword">inline</span> wxWindow* GetPopupInstance()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_chData-&gt;GetPopupInstance(); }
01036 
01037     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((wxCCustomComboBoxDefaultHandler*)m_chData)-&gt;GetSelection(); }
01038 
01039     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetValue ()<span class="keyword"> const</span>
01040 <span class="keyword">    </span>{
01041         <span class="keywordflow">return</span> m_chData-&gt;m_text;
01042     }
01043 
01044     <span class="keywordtype">void</span> SetSelection ( <span class="keywordtype">int</span> n );
01045 
01046     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetImagePaintFunction ( wxCustomPaintFunc paintfunc, <span class="keywordtype">void</span>* userdata )
01047     {
01048         m_chData-&gt;m_paintfunc = paintfunc;
01049         m_chData-&gt;m_paintfunc_customdata = userdata;
01050     }
01051 
01052     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoDraw ( wxDC&amp; dc, <span class="keyword">const</span> wxRect&amp; rect );
01053     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnKeyEvent ( wxKeyEvent&amp; event );
01054     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseFocus ( <span class="keywordtype">bool</span> entry );
01055     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnMouseEvent ( wxMouseEvent&amp; event, wxCustomControlHandler* pdata );
01056     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y );
01057     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetSize ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
01058 
01059     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValue ( <span class="keyword">const</span> wxString&amp; text )
01060     {
01061         m_chData-&gt;SetValue(text);
01062         Draw();
01063     }
01064 
01065     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; SetValue ()<span class="keyword"> const</span>
01066 <span class="keyword">    </span>{
01067         <span class="keywordflow">return</span> m_chData-&gt;GetValue();
01068     }
01069 
01070 <span class="keyword">protected</span>:
01071     wxCCustomComboBoxHandler*    m_chData;
01072 };
01073 
01074 <span class="keyword">class </span>WXDLLIMPEXP_CC wxCCustomChoice : <span class="keyword">public</span> wxCCustomComboBox
01075 {
01076         DECLARE_DYNAMIC_CLASS(wxCCustomChoice)
01077 
01078 <span class="keyword">public</span>:
01079 
01080     wxCCustomChoice () : wxCCustomComboBox() { }
01081 
01082     wxCCustomChoice ( wxCustomControlManager* manager, wxWindowID <span class="keywordtype">id</span>,
01083         <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition, <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01084         <span class="keywordtype">int</span> n = 0, <span class="keyword">const</span> wxChar* choices[] = NULL, <span class="keywordtype">long</span> style = 0,
01085         <span class="keyword">const</span> wxSize&amp; imagesize = wxDefaultSize );
01086     <span class="keyword">virtual</span> ~wxCCustomChoice();
01087 };
01088 
01089 <span class="comment">// -----------------------------------------------------------------------</span>
01090 
01091 <span class="preprocessor">#endif // wxPG_USE_CUSTOM_CONTROLS</span>
01092 <span class="preprocessor"></span>
01093 <span class="preprocessor">#if wxPG_USE_GENERIC_TEXTCTRL</span>
01094 <span class="preprocessor"></span>
01095 <span class="preprocessor">#define wxGTextCtrlBase wxControl</span>
01096 <span class="preprocessor"></span>
01097 <span class="keyword">class </span>WXDLLIMPEXP_CC wxGenericTextCtrl : <span class="keyword">public</span> wxGTextCtrlBase
01098 {
01099 <span class="keyword">public</span>:
01100     <span class="comment">// creation</span>
01101     <span class="comment">// --------</span>
01102 
01103     wxGenericTextCtrl() { Init(); }
01104     wxGenericTextCtrl(wxWindow *parent, wxWindowID <span class="keywordtype">id</span>,
01105                       <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
01106                       <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
01107                       <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01108                       <span class="keywordtype">long</span> style = 0,
01109                       <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
01110                       <span class="keyword">const</span> wxString&amp; name = wxTextCtrlNameStr)
01111     {
01112         Init();
01113 
01114         Create(parent, <span class="keywordtype">id</span>, value, pos, size, style, validator, name);
01115     }
01116     ~wxGenericTextCtrl();
01117 
01118     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span>,
01119                 <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
01120                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
01121                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
01122                 <span class="keywordtype">long</span> style = 0,
01123                 <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
01124                 <span class="keyword">const</span> wxString&amp; name = wxTextCtrlNameStr);
01125 
01126     <span class="comment">// implement base class pure virtuals</span>
01127     <span class="comment">// ----------------------------------</span>
01128     <span class="keyword">virtual</span> wxString GetValue() <span class="keyword">const</span>;
01129     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValue(<span class="keyword">const</span> wxString&amp; value);
01130 
01131     <span class="keyword">virtual</span> wxString GetRange(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to) <span class="keyword">const</span>;
01132 
01133     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetLineLength(<span class="keywordtype">long</span> lineNo) <span class="keyword">const</span>;
01134     <span class="keyword">virtual</span> wxString GetLineText(<span class="keywordtype">long</span> lineNo) <span class="keyword">const</span>;
01135     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetNumberOfLines() <span class="keyword">const</span>;
01136 
01137     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsModified() <span class="keyword">const</span>;
01138     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsEditable() <span class="keyword">const</span>;
01139 
01140     <span class="keyword">virtual</span> <span class="keywordtype">void</span> GetSelection(<span class="keywordtype">long</span>* from, <span class="keywordtype">long</span>* to) <span class="keyword">const</span>;
01141 
01142     <span class="comment">// operations</span>
01143     <span class="comment">// ----------</span>
01144     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Remove(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to);
01145 
01146     <span class="comment">// special</span>
01147     <span class="keywordtype">void</span> DispatchEvent( <span class="keywordtype">int</span> evtId );
01148     <span class="keywordtype">bool</span> SetInsertionPoint (<span class="keywordtype">long</span> pos,
01149                             <span class="keywordtype">long</span> first_visible = -1);
01150     <span class="keywordtype">void</span> DeleteSelection ();
01151     <span class="keywordtype">bool</span> SetSelection ( <span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to );
01152 
01153     <span class="keyword">inline</span> wxTextPos GetLastPosition()<span class="keyword"> const</span>
01154 <span class="keyword">    </span>{
01155         <span class="keywordflow">return</span> m_text.length();
01156     }
01157 
01158     <span class="comment">// Standard wxWindow virtual overrides</span>
01159     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFocus();
01160 
01161 <span class="keyword">protected</span>:
01162 
01163     <span class="keywordtype">int</span> HitTest ( wxCoord x, <span class="keywordtype">int</span>* pCol );
01164     <span class="keywordtype">void</span> RecalculateMetrics();
01165 
01166     <span class="comment">// common part of all ctors</span>
01167     <span class="keywordtype">void</span> Init();
01168 
01169     wxString        m_text;
01170     wxCaret*        m_pCaret;
01171     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    m_position;
01172     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    m_scrollPosition;
01173     <span class="keywordtype">int</span>             m_selStart;
01174     <span class="keywordtype">int</span>             m_selEnd;
01175     <span class="keywordtype">int</span>             m_itemButDown; <span class="comment">// dragging centers around this</span>
01176     <span class="keywordtype">int</span>             m_fontHeight;
01177 
01178     <span class="keywordtype">bool</span>            m_isModified;
01179     <span class="keywordtype">bool</span>            m_isEditable;
01180 
01181     wxArrayInt      m_arrExtents; <span class="comment">// cached array of text extents</span>
01182 
01183     <span class="comment">//int UpdateExtentCache ( wxString&amp; tempstr, size_t index );</span>
01184 
01185     <span class="comment">// event handlers</span>
01186     <span class="keywordtype">void</span> OnKeyEvent ( wxKeyEvent&amp; event );
01187     <span class="keywordtype">void</span> OnMouseEvent ( wxMouseEvent&amp; event );
01188     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent&amp; event );
01189 
01190 <span class="comment">/*    inline void ShowCaret ()</span>
01191 <span class="comment">    {</span>
01192 <span class="comment">        if ( m_pCaret &amp;&amp; !(m_flags &amp; wxCCM_FL_CARETVISIBLE) )</span>
01193 <span class="comment">        {</span>
01194 <span class="comment">            m_pCaret-&gt;Show ( TRUE );</span>
01195 <span class="comment">            m_flags |= wxCCM_FL_CARETVISIBLE;</span>
01196 <span class="comment">            //wxLogDebug ( wxT("ShowCaret( visible_after=%i )"), (int)m_pCaret-&gt;IsVisible() );</span>
01197 <span class="comment">        }</span>
01198 <span class="comment">    }*/</span>
01199 
01200     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowCaretBalanced ()
01201     {
01202         m_pCaret-&gt;Show ( TRUE );
01203     }
01204 
01205     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideCaretBalanced ()
01206     {
01207         m_pCaret-&gt;Show ( FALSE );
01208     }
01209 
01210     <span class="comment">//void MoveCaret ( int x, int y );</span>
01211 
01212 <span class="comment">/*    inline void HideCaret ()</span>
01213 <span class="comment">    {</span>
01214 <span class="comment">        if ( m_pCaret &amp;&amp; ( m_flags &amp; wxCCM_FL_CARETVISIBLE ) )</span>
01215 <span class="comment">        {</span>
01216 <span class="comment">            m_pCaret-&gt;Show ( FALSE );</span>
01217 <span class="comment">            m_flags &amp;= ~(wxCCM_FL_CARETVISIBLE);</span>
01218 <span class="comment">            //wxLogDebug ( wxT("HideCaret( visible_after=%i )"), (int)m_pCaret-&gt;IsVisible() );</span>
01219 <span class="comment">        }</span>
01220 <span class="comment">    }*/</span>
01221 
01222     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsCaretVisible ()<span class="keyword"> const</span>
01223 <span class="keyword">    </span>{
01224         <span class="comment">//if ( m_pCaret )</span>
01225             <span class="keywordflow">return</span> m_pCaret-&gt;IsVisible();
01226         <span class="comment">//return FALSE;</span>
01227     }
01228 
01229     <span class="comment">/*</span>
01230 <span class="comment">    // editing</span>
01231 <span class="comment">    virtual void Clear();</span>
01232 <span class="comment">    virtual void Replace(long from, long to, const wxString&amp; value);</span>
01233 <span class="comment">    virtual void Remove(long from, long to);</span>
01234 <span class="comment"></span>
01235 <span class="comment">    // load the controls contents from the file</span>
01236 <span class="comment">    virtual bool LoadFile(const wxString&amp; file);</span>
01237 <span class="comment"></span>
01238 <span class="comment">    // clears the dirty flag</span>
01239 <span class="comment">    virtual void MarkDirty();</span>
01240 <span class="comment">    virtual void DiscardEdits();</span>
01241 <span class="comment"></span>
01242 <span class="comment">    virtual void SetMaxLength(unsigned long len);</span>
01243 <span class="comment"></span>
01244 <span class="comment">    // writing text inserts it at the current position, appending always</span>
01245 <span class="comment">    // inserts it at the end</span>
01246 <span class="comment">    virtual void WriteText(const wxString&amp; text);</span>
01247 <span class="comment">    virtual void AppendText(const wxString&amp; text);</span>
01248 <span class="comment"></span>
01249 <span class="comment">#ifdef __WIN32__</span>
01250 <span class="comment">    virtual bool EmulateKeyPress(const wxKeyEvent&amp; event);</span>
01251 <span class="comment">#endif // __WIN32__</span>
01252 <span class="comment"></span>
01253 <span class="comment">#if wxUSE_RICHEDIT</span>
01254 <span class="comment">    // apply text attribute to the range of text (only works with richedit</span>
01255 <span class="comment">    // controls)</span>
01256 <span class="comment">    virtual bool SetStyle(long start, long end, const wxTextAttr&amp; style);</span>
01257 <span class="comment">    virtual bool SetDefaultStyle(const wxTextAttr&amp; style);</span>
01258 <span class="comment">    virtual bool GetStyle(long position, wxTextAttr&amp; style);</span>
01259 <span class="comment">#endif // wxUSE_RICHEDIT</span>
01260 <span class="comment"></span>
01261 <span class="comment">    // translate between the position (which is just an index in the text ctrl</span>
01262 <span class="comment">    // considering all its contents as a single strings) and (x, y) coordinates</span>
01263 <span class="comment">    // which represent column and line.</span>
01264 <span class="comment">    virtual long XYToPosition(long x, long y) const;</span>
01265 <span class="comment">    virtual bool PositionToXY(long pos, long *x, long *y) const;</span>
01266 <span class="comment"></span>
01267 <span class="comment">    virtual void ShowPosition(long pos);</span>
01268 <span class="comment">    virtual wxTextCtrlHitTestResult HitTest(const wxPoint&amp; pt, long *pos) const;</span>
01269 <span class="comment">    virtual wxTextCtrlHitTestResult HitTest(const wxPoint&amp; pt,</span>
01270 <span class="comment">                                            wxTextCoord *col,</span>
01271 <span class="comment">                                            wxTextCoord *row) const</span>
01272 <span class="comment">    {</span>
01273 <span class="comment">        return wxTextCtrlBase::HitTest(pt, col, row);</span>
01274 <span class="comment">    }</span>
01275 <span class="comment"></span>
01276 <span class="comment">    // Clipboard operations</span>
01277 <span class="comment">    virtual void Copy();</span>
01278 <span class="comment">    virtual void Cut();</span>
01279 <span class="comment">    virtual void Paste();</span>
01280 <span class="comment"></span>
01281 <span class="comment">    virtual bool CanCopy() const;</span>
01282 <span class="comment">    virtual bool CanCut() const;</span>
01283 <span class="comment">    virtual bool CanPaste() const;</span>
01284 <span class="comment"></span>
01285 <span class="comment">    // Undo/redo</span>
01286 <span class="comment">    virtual void Undo();</span>
01287 <span class="comment">    virtual void Redo();</span>
01288 <span class="comment"></span>
01289 <span class="comment">    virtual bool CanUndo() const;</span>
01290 <span class="comment">    virtual bool CanRedo() const;</span>
01291 <span class="comment"></span>
01292 <span class="comment">    // Insertion point</span>
01293 <span class="comment">    virtual void SetInsertionPoint(long pos);</span>
01294 <span class="comment">    virtual void SetInsertionPointEnd();</span>
01295 <span class="comment">    virtual long GetInsertionPoint() const;</span>
01296 <span class="comment">    virtual wxTextPos GetLastPosition() const;</span>
01297 <span class="comment"></span>
01298 <span class="comment">    virtual void SetSelection(long from, long to);</span>
01299 <span class="comment">    virtual void SetEditable(bool editable);</span>
01300 <span class="comment"></span>
01301 <span class="comment">    // Caret handling (Windows only)</span>
01302 <span class="comment"></span>
01303 <span class="comment">    bool ShowNativeCaret(bool show = true);</span>
01304 <span class="comment">    bool HideNativeCaret() { return ShowNativeCaret(false); }</span>
01305 <span class="comment"></span>
01306 <span class="comment">    // Implementation from now on</span>
01307 <span class="comment">    // --------------------------</span>
01308 <span class="comment"></span>
01309 <span class="comment">    virtual void SetWindowStyleFlag(long style);</span>
01310 <span class="comment"></span>
01311 <span class="comment">    virtual void Command(wxCommandEvent&amp; event);</span>
01312 <span class="comment">    virtual bool MSWCommand(WXUINT param, WXWORD id);</span>
01313 <span class="comment">    virtual WXHBRUSH MSWControlColor(WXHDC hDC);</span>
01314 <span class="comment"></span>
01315 <span class="comment">#if wxUSE_RICHEDIT</span>
01316 <span class="comment">    virtual bool MSWOnNotify(int idCtrl, WXLPARAM lParam, WXLPARAM *result);</span>
01317 <span class="comment"></span>
01318 <span class="comment">    int GetRichVersion() const { return m_verRichEdit; }</span>
01319 <span class="comment">    bool IsRich() const { return m_verRichEdit != 0; }</span>
01320 <span class="comment"></span>
01321 <span class="comment">    // rich edit controls are not compatible with normal ones and wem ust set</span>
01322 <span class="comment">    // the colours for them otherwise</span>
01323 <span class="comment">    virtual bool SetBackgroundColour(const wxColour&amp; colour);</span>
01324 <span class="comment">    virtual bool SetForegroundColour(const wxColour&amp; colour);</span>
01325 <span class="comment">#endif // wxUSE_RICHEDIT</span>
01326 <span class="comment"></span>
01327 <span class="comment">    virtual void AdoptAttributesFromHWND();</span>
01328 <span class="comment"></span>
01329 <span class="comment">    virtual bool AcceptsFocus() const;</span>
01330 <span class="comment"></span>
01331 <span class="comment">    // callbacks</span>
01332 <span class="comment">    void OnDropFiles(wxDropFilesEvent&amp; event);</span>
01333 <span class="comment">    void OnChar(wxKeyEvent&amp; event); // Process 'enter' if required</span>
01334 <span class="comment"></span>
01335 <span class="comment">    void OnCut(wxCommandEvent&amp; event);</span>
01336 <span class="comment">    void OnCopy(wxCommandEvent&amp; event);</span>
01337 <span class="comment">    void OnPaste(wxCommandEvent&amp; event);</span>
01338 <span class="comment">    void OnUndo(wxCommandEvent&amp; event);</span>
01339 <span class="comment">    void OnRedo(wxCommandEvent&amp; event);</span>
01340 <span class="comment">    void OnDelete(wxCommandEvent&amp; event);</span>
01341 <span class="comment">    void OnSelectAll(wxCommandEvent&amp; event);</span>
01342 <span class="comment"></span>
01343 <span class="comment">    void OnUpdateCut(wxUpdateUIEvent&amp; event);</span>
01344 <span class="comment">    void OnUpdateCopy(wxUpdateUIEvent&amp; event);</span>
01345 <span class="comment">    void OnUpdatePaste(wxUpdateUIEvent&amp; event);</span>
01346 <span class="comment">    void OnUpdateUndo(wxUpdateUIEvent&amp; event);</span>
01347 <span class="comment">    void OnUpdateRedo(wxUpdateUIEvent&amp; event);</span>
01348 <span class="comment">    void OnUpdateDelete(wxUpdateUIEvent&amp; event);</span>
01349 <span class="comment">    void OnUpdateSelectAll(wxUpdateUIEvent&amp; event);</span>
01350 <span class="comment"></span>
01351 <span class="comment">    // Show a context menu for Rich Edit controls (the standard</span>
01352 <span class="comment">    // EDIT control has one already)</span>
01353 <span class="comment">    void OnContextMenu(wxContextMenuEvent&amp; event);</span>
01354 <span class="comment"></span>
01355 <span class="comment">    // be sure the caret remains invisible if the user</span>
01356 <span class="comment">    // called HideNativeCaret() before</span>
01357 <span class="comment">    void OnSetFocus(wxFocusEvent&amp; event);</span>
01358 <span class="comment"></span>
01359 <span class="comment">protected:</span>
01360 <span class="comment"></span>
01361 <span class="comment">    // intercept WM_GETDLGCODE</span>
01362 <span class="comment">    virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);</span>
01363 <span class="comment"></span>
01364 <span class="comment">    // call this to increase the size limit (will do nothing if the current</span>
01365 <span class="comment">    // limit is big enough)</span>
01366 <span class="comment">    //</span>
01367 <span class="comment">    // returns true if we increased the limit to allow entering more text,</span>
01368 <span class="comment">    // false if we hit the limit set by SetMaxLength() and so didn't change it</span>
01369 <span class="comment">    bool AdjustSpaceLimit();</span>
01370 <span class="comment"></span>
01371 <span class="comment">#if wxUSE_RICHEDIT &amp;&amp; (!wxUSE_UNICODE || wxUSE_UNICODE_MSLU)</span>
01372 <span class="comment">    // replace the selection or the entire control contents with the given text</span>
01373 <span class="comment">    // in the specified encoding</span>
01374 <span class="comment">    bool StreamIn(const wxString&amp; value, wxFontEncoding encoding, bool selOnly);</span>
01375 <span class="comment"></span>
01376 <span class="comment">    // get the contents of the control out as text in the given encoding</span>
01377 <span class="comment">    wxString StreamOut(wxFontEncoding encoding, bool selOnly = false) const;</span>
01378 <span class="comment">#endif // wxUSE_RICHEDIT</span>
01379 <span class="comment"></span>
01380 <span class="comment">    // replace the contents of the selection or of the entire control with the</span>
01381 <span class="comment">    // given text</span>
01382 <span class="comment">    void DoWriteText(const wxString&amp; text, bool selectionOnly = true);</span>
01383 <span class="comment"></span>
01384 <span class="comment">    // set the selection possibly without scrolling the caret into view</span>
01385 <span class="comment">    void DoSetSelection(long from, long to, bool scrollCaret = true);</span>
01386 <span class="comment"></span>
01387 <span class="comment">    // return true if there is a non empty selection in the control</span>
01388 <span class="comment">    bool HasSelection() const;</span>
01389 <span class="comment"></span>
01390 <span class="comment">    // get the length of the line containing the character at the given</span>
01391 <span class="comment">    // position</span>
01392 <span class="comment">    long GetLengthOfLineContainingPos(long pos) const;</span>
01393 <span class="comment"></span>
01394 <span class="comment">    // send TEXT_UPDATED event, return true if it was handled, false otherwise</span>
01395 <span class="comment">    bool SendUpdateEvent();</span>
01396 <span class="comment"></span>
01397 <span class="comment">    // override some base class virtuals</span>
01398 <span class="comment">    virtual bool MSWShouldPreProcessMessage(WXMSG* pMsg);</span>
01399 <span class="comment">    virtual wxSize DoGetBestSize() const;</span>
01400 <span class="comment"></span>
01401 <span class="comment">    virtual WXDWORD MSWGetStyle(long style, WXDWORD *exstyle) const;</span>
01402 <span class="comment"></span>
01403 <span class="comment">#if wxUSE_RICHEDIT</span>
01404 <span class="comment">    // we're using RICHEDIT (and not simple EDIT) control if this field is not</span>
01405 <span class="comment">    // 0, it also gives the version of the RICHEDIT control being used (1, 2 or</span>
01406 <span class="comment">    // 3 so far)</span>
01407 <span class="comment">    int m_verRichEdit;</span>
01408 <span class="comment">#endif // wxUSE_RICHEDIT</span>
01409 <span class="comment"></span>
01410 <span class="comment">    // number of EN_UPDATE events sent by Windows when we change the controls</span>
01411 <span class="comment">    // text ourselves: we want this to be exactly 1</span>
01412 <span class="comment">    int m_updatesCount;</span>
01413 <span class="comment"></span>
01414 <span class="comment">    virtual wxVisualAttributes GetDefaultAttributes() const;</span>
01415 <span class="comment"></span>
01416 <span class="comment">    wxMenu* m_privateContextMenu;</span>
01417 <span class="comment"></span>
01418 <span class="comment">    bool m_isNativeCaretShown;</span>
01419 <span class="comment">*/</span>
01420 
01421 <span class="keyword">private</span>:
01422     DECLARE_EVENT_TABLE()
01423     DECLARE_DYNAMIC_CLASS_NO_COPY(wxGenericTextCtrl)
01424 };
01425 
01426 <span class="preprocessor">#endif</span>
01427 <span class="preprocessor"></span>
01428 <span class="comment">//</span>
01429 <span class="comment">// Undefine macros that are not needed outside library source files</span>
01430 <span class="comment">//</span>
01431 <span class="preprocessor">#ifndef __wxCCM_SOURCE_FILE__</span>
01432 <span class="preprocessor"></span><span class="preprocessor"># undef WXDLLIMPEXP_CC</span>
01433 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
01434 <span class="preprocessor"></span>
01435 <span class="preprocessor">#endif // __WX_CUSTCTRL_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Apr 14 22:21:04 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
