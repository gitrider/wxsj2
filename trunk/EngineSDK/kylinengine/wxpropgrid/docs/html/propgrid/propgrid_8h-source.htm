<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propgrid.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propgrid.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propgrid.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Sep-25-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_PROPGRID_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_PROPGRID_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "propgrid.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">/*</span>
00020 <span class="comment"></span>
00021 <span class="comment">  -- IMPORTANT API NOTES --</span>
00022 <span class="comment"></span>
00023 <span class="comment">  * Intermediate property classes that should only be inherited from</span>
00024 <span class="comment">    have names that begin with wxPG (for example, wxPGProperty and</span>
00025 <span class="comment">    wxPGPropertyWithChildren).</span>
00026 <span class="comment"></span>
00027 <span class="comment">*/</span>
00028 
00029 <span class="preprocessor">#include &lt;wx/dynarray.h&gt;</span>
00030 
00031 <span class="preprocessor">#include &lt;wx/hashmap.h&gt;</span>
00032 
00033 <span class="preprocessor">#include &lt;wx/variant.h&gt;</span>
00034 
00035 <span class="preprocessor">#include &lt;wx/tooltip.h&gt;</span>
00036 
00037 <span class="comment">//#include &lt;wx/validate.h&gt;</span>
00038 
00039 <span class="comment">// Doxygen special</span>
00040 <span class="preprocessor">#if !defined(_WX_WINDOW_H_BASE_) &amp;&amp; !defined(SWIG)</span>
00041 <span class="preprocessor"></span><span class="preprocessor"># include "pg_dox_mainpage.h"</span>
00042 <span class="preprocessor">#endif</span>
00043 <span class="preprocessor"></span>
00044 <span class="comment">// Custom version information (takes CVS(i.e. subrelease) into account)</span>
00045 <span class="preprocessor">#define wxPG_WX_VERSION ((wxMAJOR_VERSION*100)+(wxMINOR_VERSION*10)+(wxRELEASE_NUMBER+wxSUBRELEASE_NUMBER))</span>
00046 <span class="preprocessor"></span>
00047 <span class="comment">// -----------------------------------------------------------------------</span>
00048 
00049 
00050 <span class="comment">//</span>
00051 <span class="comment">// Here are some platform dependent defines</span>
00052 <span class="comment">// NOTE: More in propertygrid.cpp</span>
00053 <span class="comment">//</span>
00054 
00055 <span class="preprocessor">#ifndef SWIG</span>
00056 <span class="preprocessor"></span><span class="preprocessor">#if defined(__WXMSW__)</span>
00057 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00058 
00059 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00060 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00061 <span class="preprocessor"></span>
00062 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00063 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00064 <span class="preprocessor"></span>
00065 <span class="preprocessor"># if defined(__WXWINCE__)</span>
00066 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00067 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00068 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00069 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00070 <span class="preprocessor"></span>
00071 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00072 <span class="preprocessor"></span>
00073 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00074 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00075 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00076 <span class="preprocessor"></span>
00077 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00078 <span class="preprocessor"></span>
00079 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00080 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00081 
00082 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00083 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00084 <span class="preprocessor"></span>
00085 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00086 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00087 <span class="preprocessor"></span>
00088 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00089 <span class="preprocessor"></span>
00090 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00091 <span class="preprocessor"></span>
00092 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00093 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00094 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00095 <span class="preprocessor"></span>
00096 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00097 <span class="preprocessor"></span>
00098 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00099 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00100 
00101 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00102 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00103 <span class="preprocessor"></span>
00104 <span class="preprocessor">    #define wxPG_ICON_WIDTH             11  // comment to use bitmap buttons</span>
00105 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    1 // 1 if wxRendererNative should be employed</span>
00106 <span class="preprocessor"></span>
00107 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00108 <span class="preprocessor"></span>
00109 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00110 <span class="preprocessor"></span>
00111 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00112 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00113 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00114 <span class="preprocessor"></span>
00115 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00116 <span class="preprocessor"></span>
00117 <span class="preprocessor">#else</span>
00118 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00119     <span class="comment">// tested on: none.</span>
00120 
00121 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00122 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00123 <span class="preprocessor"></span>
00124 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00125 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00126 <span class="preprocessor"></span>
00127 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00128 <span class="preprocessor"></span>
00129 <span class="preprocessor">    #define wxPG_HEAVY_GFX              0 // 1 for prettier appearance</span>
00130 <span class="preprocessor"></span>
00131 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00132 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00133 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00134 <span class="preprocessor"></span>
00135 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       0  // Enable tooltips</span>
00136 <span class="preprocessor"></span>
00137 <span class="preprocessor">#endif</span>
00138 <span class="preprocessor"></span>
00139 <span class="preprocessor">#endif // SWIG</span>
00140 <span class="preprocessor"></span>
00141 <span class="comment">// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead</span>
00142 <span class="comment">// (for tree buttons)</span>
00143 <span class="comment">//#undef wxPG_ICON_WIDTH</span>
00144 
00145 <span class="comment">// Need to force disable tooltips?</span>
00146 <span class="preprocessor">#if !wxUSE_TOOLTIPS</span>
00147 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
00148 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SUPPORT_TOOLTIPS       0</span>
00149 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00150 <span class="preprocessor"></span>
00151 <span class="comment">// Set 1 to include basic properties ( ~48k in 0.9.9.2 )</span>
00152 <span class="preprocessor">#define wxPG_INCLUDE_BASICPROPS         1</span>
00153 <span class="preprocessor"></span>
00154 <span class="comment">// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.) ( ~32k in 0.9.9.2 )</span>
00155 <span class="preprocessor">#define wxPG_INCLUDE_ADVPROPS           1</span>
00156 <span class="preprocessor"></span>
00157 <span class="comment">// Set 1 include wxPropertyGridManager ( ~36k in 0.9.9.1 )</span>
00158 <span class="comment">//#define wxPG_INCLUDE_MANAGER            1</span>
00159 
00160 <span class="comment">// Set 1 to include checkbox editor class ( ~4k in 0.9.9.1 )</span>
00161 <span class="preprocessor">#define wxPG_INCLUDE_CHECKBOX           1</span>
00162 <span class="preprocessor"></span>
00163 <span class="comment">// 1 to allow user data for each property</span>
00164 <span class="preprocessor">#define wxPG_USE_USERDATA               1</span>
00165 <span class="preprocessor"></span>
00166 <span class="comment">// 1 to allow per-property validators</span>
00167 <span class="preprocessor">#define wxPG_USE_VALIDATORS             0</span>
00168 <span class="preprocessor"></span>
00169 <span class="comment">// 1 if use array for categories. Limits number of categories</span>
00170 <span class="comment">// to 256, but improves GetPropertyCategory performance (used</span>
00171 <span class="comment">// a lot in DoDrawItems).</span>
00172 <span class="comment">// No significant code size difference.</span>
00173 <span class="comment">// Recommended: Use 0, as is solves various issues.</span>
00174 <span class="preprocessor">#define wxPG_USE_CATEGORY_ARRAY         0</span>
00175 <span class="preprocessor"></span>
00176 <span class="comment">// NOTE: Currently advantages granted by wxPG_EMBED_VARIANT are probably minimal.</span>
00177 <span class="preprocessor">#define wxPG_EMBED_VARIANT              0 // 1 if wxVariant is in wxPGProperty (should be better if used a lot)</span>
00178 <span class="preprocessor"></span>
00179 <span class="comment">// NOTE: Use this only if you really need wxDynamicCast etc. Property class name</span>
00180 <span class="comment">//   can be acquired with wxPropertyGrid::GetPropertyClassName() anyway.</span>
00181 <span class="comment">// ALSO NOTE: Causes quite a code size increase (~20k in main object file) considering what</span>
00182 <span class="comment">//   it does.</span>
00183 <span class="preprocessor">#define wxPG_INCLUDE_WXOBJECT           0 // 1 if inherit wxPGProperty from wxObject - always 1 if wxPG_EMBED_VARIANT</span>
00184 <span class="preprocessor"></span>
00185 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00186 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_EMBED_VARIANT is currently broken."</span>
00187 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_INCLUDE_WXOBJECT</span>
00188 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_INCLUDE_WXOBJECT           1</span>
00189 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00190 <span class="preprocessor"></span>
00191 <span class="comment">// -----------------------------------------------------------------------</span>
00192 
00193 <span class="comment">// Our very custom dynamic object macros. Should only be used</span>
00194 <span class="comment">// directly in an abstract (typeless etc.) base property classes.</span>
00195 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00196 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_INCLUDE_WXOBJECT is not currently supported (as of 1.0.0b)."</span>
00197 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)       DECLARE_CLASS(A)</span>
00198 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)   IMPLEMENT_CLASS(A,B)</span>
00199 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()</span>
00200 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00201 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)</span>
00202 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)</span>
00203 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()          virtual const wxChar* GetClassName() const;</span>
00204 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00205 <span class="preprocessor"></span>
00206 <span class="comment">// -----------------------------------------------------------------------</span>
00207 
00208 <span class="preprocessor">#ifdef WXMAKINGDLL_PROPGRID</span>
00209 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXEXPORT</span>
00210 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00211 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXIMPORT</span>
00212 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00213 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG</span>
00214 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00215 <span class="preprocessor"></span>
00216 <span class="comment">// -----------------------------------------------------------------------</span>
00217 
00218 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
00219 <span class="preprocessor"></span><span class="preprocessor"># include "wx/propgrid/custctrl.h"</span>
00220 <span class="preprocessor"># define wxPGCtrlClass wxCustomControl</span>
00221 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00222 <span class="preprocessor"></span><span class="preprocessor"># define wxPGCtrlClass wxWindow</span>
00223 <span class="preprocessor"></span><span class="preprocessor"># if !wxPG_USE_GENERIC_TEXTCTRL</span>
00224 <span class="preprocessor"></span><span class="preprocessor">#  define wxCCustomTextCtrl wxTextCtrl</span>
00225 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00226 <span class="preprocessor"></span><span class="preprocessor">#  include "wx/propgrid/custctrl.h"</span>
00227 <span class="preprocessor">#  define wxCCustomTextCtrl wxGenericTextCtrl</span>
00228 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00229 <span class="preprocessor"></span><span class="comment">//# define wxCCustomComboBox wxComboBox</span>
00230 <span class="keyword">class </span>WXDLLEXPORT wxOwnerDrawnComboBox;
00231 <span class="preprocessor"># define wxCCustomComboBox wxOwnerDrawnComboBox</span>
00232 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomButton wxButton</span>
00233 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00234 <span class="preprocessor"></span>
00235 <span class="comment">// -----------------------------------------------------------------------</span>
00236 
00237 <span class="preprocessor">#ifndef SWIG</span>
00238 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGVariant;
00239 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGValueType;
00240 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGEditor;
00241 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGProperty;
00242 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren;
00243 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyCategoryClass;
00244 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGConstants;
00245 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridState;
00246 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGrid;
00247 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridEvent;
00248 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridManager;
00249 <span class="preprocessor">#endif</span>
00250 <span class="preprocessor"></span>
00251 <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>;
00252 
00253 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridNameStr;
00254 
<a name="l00261"></a><a class="code" href="group__miscellaneous.htm#ga2">00261</a> <span class="preprocessor">#define wxPG_LABEL (*((const wxString*)NULL))</span>
00262 <span class="preprocessor"></span>
<a name="l00265"></a><a class="code" href="group__miscellaneous.htm#ga3">00265</a> <span class="preprocessor">#define wxPG_COLOUR(R,G,B) ((wxUint32)(R+(G&lt;&lt;8)+(B&lt;&lt;16)))</span>
00266 <span class="preprocessor"></span>
<a name="l00272"></a><a class="code" href="group__miscellaneous.htm#ga4">00272</a> <span class="preprocessor">#define wxPG_FLEXIBLE_SIZE(PREFWID,PREFHEI) wxSize(-(PREFWID),-(PREFHEI))</span>
00273 <span class="preprocessor"></span>
<a name="l00287"></a><a class="code" href="group__miscellaneous.htm#ga0">00287</a> <span class="keyword">typedef</span> bool (*<a class="code" href="group__miscellaneous.htm#ga0">wxPropertyGridCallback</a>)(wxPropertyGrid* propGrid,
00288                                        wxPGProperty* property,
00289                                        wxPGCtrlClass* ctrl,
00290                                        <span class="keywordtype">int</span> data);
00291 
<a name="l00297"></a><a class="code" href="group__miscellaneous.htm#ga1">00297</a> <span class="keyword">typedef</span> void (*<a class="code" href="group__miscellaneous.htm#ga1">wxPGPaintCallback</a>)(wxPGProperty* property,
00298                                   wxDC&amp; dc,
00299                                   <span class="keyword">const</span> wxRect&amp; rect,
00300                                   <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata);
00301 
00302 
00306 <span class="comment">// -----------------------------------------------------------------------</span>
00307 
<a name="l00317"></a><a class="code" href="group__wndflags.htm#ga0">00317</a> <span class="preprocessor">#define wxPG_AUTO_SORT              0x00000010</span>
00318 <span class="preprocessor"></span>
<a name="l00324"></a><a class="code" href="group__wndflags.htm#ga1">00324</a> <span class="preprocessor">#define wxPG_HIDE_CATEGORIES          0x00000020</span>
00325 <span class="preprocessor"></span>
00326 <span class="comment">/* This style combines non-categoric mode and automatic sorting.</span>
00327 <span class="comment">*/</span>
00328 <span class="preprocessor">#define wxPG_ALPHABETIC_MODE        (wxPG_HIDE_CATEGORIES|wxPG_AUTO_SORT)</span>
00329 <span class="preprocessor"></span>
<a name="l00333"></a><a class="code" href="group__wndflags.htm#ga3">00333</a> <span class="preprocessor">#define wxPG_BOLD_MODIFIED           0x00000040</span>
00334 <span class="preprocessor"></span>
<a name="l00338"></a><a class="code" href="group__wndflags.htm#ga4">00338</a> <span class="preprocessor">#define wxPG_SPLITTER_AUTO_CENTER   0x00000080</span>
00339 <span class="preprocessor"></span>
<a name="l00343"></a><a class="code" href="group__wndflags.htm#ga5">00343</a> <span class="preprocessor">#define wxPG_TOOLTIPS               0x00000100</span>
00344 <span class="preprocessor"></span>
<a name="l00349"></a><a class="code" href="group__wndflags.htm#ga6">00349</a> <span class="preprocessor">#define wxPG_HIDE_MARGIN            0x00000200</span>
00350 <span class="preprocessor"></span>
<a name="l00353"></a><a class="code" href="group__wndflags.htm#ga7">00353</a> <span class="preprocessor">#define wxPG_STATIC_SPLITTER        0x00000400</span>
00354 <span class="preprocessor"></span>
<a name="l00358"></a><a class="code" href="group__wndflags.htm#ga8">00358</a> <span class="preprocessor">#define wxPG_STATIC_LAYOUT          (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER)</span>
00359 <span class="preprocessor"></span>
<a name="l00364"></a><a class="code" href="group__wndflags.htm#ga9">00364</a> <span class="preprocessor">#define wxPG_LIMITED_EDITING        0x00000800</span>
00365 <span class="preprocessor"></span>
<a name="l00367"></a><a class="code" href="group__wndflags.htm#ga10">00367</a> <span class="preprocessor">#define wxPG_TOOLBAR                0x00001000</span>
00368 <span class="preprocessor"></span>
<a name="l00372"></a><a class="code" href="group__wndflags.htm#ga11">00372</a> <span class="preprocessor">#define wxPG_DESCRIPTION            0x00002000</span>
00373 <span class="preprocessor"></span>
<a name="l00377"></a><a class="code" href="group__wndflags.htm#ga12">00377</a> <span class="preprocessor">#define wxPG_COMPACTOR              0x00004000</span>
00378 <span class="preprocessor"></span>
<a name="l00386"></a><a class="code" href="group__wndflags.htm#ga13">00386</a> <span class="preprocessor">#define wxPG_EX_INIT_NOCAT          0x00001000</span>
00387 <span class="preprocessor"></span>
<a name="l00391"></a><a class="code" href="group__wndflags.htm#ga14">00391</a> <span class="preprocessor">#define wxPG_EX_NO_FLAT_TOOLBAR     0x00002000</span>
00392 <span class="preprocessor"></span>
<a name="l00395"></a><a class="code" href="group__wndflags.htm#ga15">00395</a> <span class="preprocessor">#define wxPG_EX_CLASSIC_SPACING     0x00004000</span>
00396 <span class="preprocessor"></span>
<a name="l00399"></a><a class="code" href="group__wndflags.htm#ga16">00399</a> <span class="preprocessor">#define wxPG_EX_NO_MODE_BUTTONS     0x00008000</span>
00400 <span class="preprocessor"></span>
<a name="l00403"></a><a class="code" href="group__wndflags.htm#ga17">00403</a> <span class="preprocessor">#define wxPG_DEFAULT_STYLE              (wxNO_FULL_REPAINT_ON_RESIZE)</span>
00404 <span class="preprocessor"></span>
<a name="l00407"></a><a class="code" href="group__wndflags.htm#ga18">00407</a> <span class="preprocessor">#define wxPGMAN_DEFAULT_STYLE       (wxNO_FULL_REPAINT_ON_RESIZE)</span>
00408 <span class="preprocessor"></span>
00413 <span class="preprocessor">#ifndef wxKEEP_STRUCTURE</span>
00414 <span class="preprocessor"></span><span class="preprocessor"># define wxKEEP_STRUCTURE               0x00000010</span>
00415 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00416 <span class="preprocessor"></span>
00418 <span class="preprocessor">#ifndef wxRECURSE</span>
00419 <span class="preprocessor"></span><span class="preprocessor"># define wxRECURSE                      0x00000020</span>
00420 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00421 <span class="preprocessor"></span>
00422 <span class="comment">// -----------------------------------------------------------------------</span>
00423 
00424 <span class="comment">// Property priorities</span>
00425 <span class="preprocessor">#define wxPG_LOW                    1</span>
00426 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_HIGH                   2</span>
00427 <span class="preprocessor"></span>
00428 <span class="comment">// -----------------------------------------------------------------------</span>
00429 
00430 <span class="comment">// Misc argument flags.</span>
00431 <span class="preprocessor">#define wxPG_FULL_VALUE             0x00000001 // Get/Store full value instead of displayed value.</span>
00432 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_REPORT_ERROR           0x00000002</span>
00433 <span class="preprocessor"></span>
00434 <span class="comment">// -----------------------------------------------------------------------</span>
00435 
00436 <span class="comment">// Simple class to hold the wxPGProperty pointer.</span>
00437 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGId
00438 {
00439 <span class="keyword">public</span>:
00440     <span class="keyword">inline</span> wxPGId() { m_ptr = (wxPGProperty*) NULL; }
00441     <span class="keyword">inline</span> wxPGId ( wxPGProperty* ptr ) { m_ptr = ptr; }
00442     <span class="keyword">inline</span> wxPGId ( wxPGProperty&amp; ref ) { m_ptr = &amp;ref; }
00443     ~wxPGId() {}
00444 
00445     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_ptr != NULL ); }
00446 
00447     <span class="keywordtype">bool</span> operator == (<span class="keyword">const</span> wxPGId&amp; other)
00448     {
00449         <span class="keywordflow">return</span> m_ptr == other.m_ptr;
00450     }
00451 
00452     operator wxPGProperty* ()
00453     {
00454         <span class="keywordflow">return</span> m_ptr;
00455     }
00456 
00457     wxPGProperty&amp; GetProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_ptr; }
00458     wxPGProperty* GetPropertyPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ptr; }
00459 <span class="keyword">private</span>:
00460     wxPGProperty* m_ptr;
00461 };
00462 
00463 <span class="preprocessor">#define wxPGIdGen(PTR) wxPGId(PTR)</span>
00464 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdToPtr(ID) ID.GetPropertyPtr()</span>
00465 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdIsOk(ID) ID.IsOk()</span>
00466 <span class="preprocessor"></span>
00467 <span class="comment">// -----------------------------------------------------------------------</span>
00468 
00469 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGTypeOperationFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr, <span class="keyword">const</span> wxChar* op );
00470 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGGetFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr );
00471 
00472 <span class="comment">// -----------------------------------------------------------------------</span>
00473 
00474 <span class="comment">/*</span>
00475 <span class="comment">#define wxPG_CURSOR_FROM_FILE       0xFFFFFE</span>
00476 <span class="comment"></span>
00477 <span class="comment">#define wxPG_CURSOR_FROM_RESOURCE   0xFFFFFF</span>
00478 <span class="comment">*/</span>
00479 
00480 <span class="comment">// -----------------------------------------------------------------------</span>
00481 
00486 <span class="comment">// NOTE: Do not change order of these, and if you add</span>
00487 <span class="comment">//   any, remember also to update gs_property_flag_to_string</span>
00488 <span class="comment">//   in propgrid.cpp.</span>
00489 
<a name="l00492"></a><a class="code" href="group__propflags.htm#ga0">00492</a> <span class="preprocessor">#define wxPG_PROP_MODIFIED          0x0001</span>
00493 <span class="preprocessor"></span>
<a name="l00496"></a><a class="code" href="group__propflags.htm#ga1">00496</a> <span class="preprocessor">#define wxPG_PROP_DISABLED          0x0002</span>
00497 <span class="preprocessor"></span>
00500 <span class="comment">//#define wxPG_PROP_CUSTCOLBG         0x0004</span>
00501 
<a name="l00504"></a><a class="code" href="group__propflags.htm#ga2">00504</a> <span class="preprocessor">#define wxPG_PROP_HIDEABLE          0x0004</span>
00505 <span class="preprocessor"></span>
<a name="l00510"></a><a class="code" href="group__propflags.htm#ga3">00510</a> <span class="preprocessor">#define wxPG_PROP_CUSTOMIMAGE       0x0008</span>
00511 <span class="preprocessor"></span>
<a name="l00515"></a><a class="code" href="group__propflags.htm#ga4">00515</a> <span class="preprocessor">#define wxPG_PROP_NOEDITOR          0x0010</span>
00516 <span class="preprocessor"></span>
<a name="l00519"></a><a class="code" href="group__propflags.htm#ga5">00519</a> <span class="preprocessor">#define wxPG_PROP_UNSPECIFIED       0x0020</span>
00520 <span class="preprocessor"></span>
<a name="l00523"></a><a class="code" href="group__propflags.htm#ga6">00523</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC_1  0x0040</span>
00524 <span class="preprocessor"></span>
<a name="l00527"></a><a class="code" href="group__propflags.htm#ga7">00527</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC_2  0x0080</span>
00528 <span class="preprocessor"></span>
00532 <span class="comment">// -----------------------------------------------------------------------</span>
00533 
<a name="l00543"></a><a class="code" href="group__attrids.htm#ga0">00543</a> <span class="preprocessor">#define wxPG_BOOL_USE_CHECKBOX              64</span>
00544 <span class="preprocessor"></span>
<a name="l00548"></a><a class="code" href="group__attrids.htm#ga1">00548</a> <span class="preprocessor">#define wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING  65</span>
00549 <span class="preprocessor"></span>
<a name="l00554"></a><a class="code" href="group__attrids.htm#ga2">00554</a> <span class="preprocessor">#define wxPG_FLOAT_PRECISION                66</span>
00555 <span class="preprocessor"></span>
<a name="l00560"></a><a class="code" href="group__attrids.htm#ga3">00560</a> <span class="preprocessor">#define wxPG_FILE_WILDCARD                  67</span>
00561 <span class="preprocessor"></span>
<a name="l00565"></a><a class="code" href="group__attrids.htm#ga4">00565</a> <span class="preprocessor">#define wxPG_FILE_SHOW_FULL_PATH            68</span>
00566 <span class="preprocessor"></span>
<a name="l00572"></a><a class="code" href="group__attrids.htm#ga5">00572</a> <span class="preprocessor">#define wxPG_CUSTOM_EDITOR                  128</span>
00573 <span class="preprocessor"></span>
<a name="l00578"></a><a class="code" href="group__attrids.htm#ga6">00578</a> <span class="preprocessor">#define wxPG_CUSTOM_IMAGE                   129</span>
00579 <span class="preprocessor"></span>
<a name="l00583"></a><a class="code" href="group__attrids.htm#ga7">00583</a> <span class="preprocessor">#define wxPG_CUSTOM_CALLBACK                130</span>
00584 <span class="preprocessor"></span>
<a name="l00593"></a><a class="code" href="group__attrids.htm#ga8">00593</a> <span class="preprocessor">#define wxPG_CUSTOM_PAINT_CALLBACK          131</span>
00594 <span class="preprocessor"></span>
<a name="l00601"></a><a class="code" href="group__attrids.htm#ga9">00601</a> <span class="preprocessor">#define wxPG_CUSTOM_PRIVATE_CHILDREN        132</span>
00602 <span class="preprocessor"></span>
<a name="l00606"></a><a class="code" href="group__attrids.htm#ga10">00606</a> <span class="preprocessor">#define wxPG_USER_ATTRIBUTE                 192</span>
00607 <span class="preprocessor"></span>
00611 <span class="comment">// -----------------------------------------------------------------------</span>
00612 <span class="comment">// Value type.</span>
00613 
00614 <span class="comment">// Value type declarer, with optional declaration part.</span>
00615 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(VALUETYPE,DECL) \</span>
00616 <span class="preprocessor">    extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00617 <span class="preprocessor"></span>
00618 <span class="comment">// Value type declarer.</span>
00619 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE(VALUETYPE) \</span>
00620 <span class="preprocessor">    extern const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00621 <span class="preprocessor"></span>
00622 <span class="comment">// Value type accessor.</span>
00623 <span class="preprocessor">#define wxPG_VALUETYPE(T)       wxPGValueType_##T</span>
00624 <span class="preprocessor"></span>
00625 <span class="comment">// Like wxPG_VALUETYPE, but casts pointer to exact class.</span>
00626 <span class="preprocessor">#define wxPG_VALUETYPE_EXACT(T) ((wxPGValueType##VALUETYPE##Class)wxPGValueType##T)</span>
00627 <span class="preprocessor"></span>
00628 <span class="comment">// Declare builtin value types.</span>
00629 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(none,WXDLLIMPEXP_PG)
00630 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxString,WXDLLIMPEXP_PG)
00631 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">long</span>,WXDLLIMPEXP_PG)
00632 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">bool</span>,WXDLLIMPEXP_PG)
00633 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">double</span>,WXDLLIMPEXP_PG)
00634 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">void</span>,WXDLLIMPEXP_PG)
00635 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxArrayString,WXDLLIMPEXP_PG)
00636 
00637 #define WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \
00638 wxVariantData_##VALUETYPE : <span class="keyword">public</span> <a class="code" href="classwxPGVariantDataWxObj.htm">wxPGVariantDataWxObj</a> \
00639 { \
00640     DECLARE_DYNAMIC_CLASS(wxVariantData_##VALUETYPE) \
00641 <span class="keyword">protected</span>: \
00642     VALUETYPE   m_value; \
00643 <span class="keyword">public</span>: \
00644     wxVariantData_##VALUETYPE(); \
00645     wxVariantData_##VALUETYPE(<span class="keyword">const</span> VALUETYPE&amp; value); \
00646     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Copy(wxVariantData&amp; data); \
00647     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Eq(wxVariantData&amp; data) <span class="keyword">const</span>; \
00648     <span class="keyword">virtual</span> wxString GetType() <span class="keyword">const</span>; \
00649     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr(); \
00650     <span class="keyword">inline</span> <span class="keyword">const</span> VALUETYPE&amp; GetValue ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_value; }
00651 
00652 <span class="comment">// Value type declarer for void* that need auto-generated .</span>
00653 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP_WITH_DECL(VALUETYPE,DECL) \</span>
00654 <span class="preprocessor">class DECL WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00655 <span class="preprocessor">}; \</span>
00656 <span class="preprocessor">extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00657 <span class="preprocessor"></span>
00658 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP(VALUETYPE) \</span>
00659 <span class="preprocessor">class WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00660 <span class="preprocessor">}; \</span>
00661 <span class="preprocessor">WX_PG_DECLARE_VALUE_TYPE(VALUETYPE)</span>
00662 <span class="preprocessor"></span>
<a name="l00668"></a><a class="code" href="classwxPGVariantDataWxObj.htm">00668</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGVariantDataWxObj : <span class="keyword">public</span> wxVariantData
00669 {
00670 <span class="keyword">public</span>:
00671 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00672 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxSTD ostream&amp; str) <span class="keyword">const</span>;
00673 <span class="preprocessor">#endif</span>
00674 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxString&amp; str) <span class="keyword">const</span>;
00675 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00676 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxSTD istream&amp; str);
00677 <span class="preprocessor">#endif</span>
00678 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxString&amp; str);
00679 
00680     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr() = 0;
00681 };
00682 
00683 <span class="comment">// -----------------------------------------------------------------------</span>
00684 <span class="comment">// Editor class.</span>
00685 
00686 <span class="comment">// Editor accessor.</span>
00687 <span class="preprocessor">#define wxPG_EDITOR(T)          wxPGEditor_##T</span>
00688 <span class="preprocessor"></span>
00689 <span class="comment">// Declare editor class, with optional part.</span>
00690 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(EDITOR,DECL) \</span>
00691 <span class="preprocessor">extern DECL wxPGEditor* wxPGEditor_##EDITOR; \</span>
00692 <span class="preprocessor">extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00693 <span class="preprocessor"></span>
00694 <span class="comment">// Declare editor class.</span>
00695 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS(EDITOR) \</span>
00696 <span class="preprocessor">extern wxPGEditor* wxPGEditor_##EDITOR; \</span>
00697 <span class="preprocessor">extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00698 <span class="preprocessor"></span>
00699 <span class="comment">// Declare builtin editor classes.</span>
00700 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrl,WXDLLIMPEXP_PG)
00701 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(Choice,WXDLLIMPEXP_PG)
00702 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PG)
00703 #<span class="keywordflow">if</span> wxPG_INCLUDE_CHECKBOX
00704 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(CheckBox,WXDLLIMPEXP_PG)
00705 #endif
00706 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(ChoiceAndButton,WXDLLIMPEXP_PG)
00707 
00708 <span class="comment">// -----------------------------------------------------------------------</span>
00709 
00710 
<a name="l00715"></a><a class="code" href="classwxPGValueType.htm">00715</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGValueType
00716 {
00717 <span class="keyword">public</span>:
00718 
00719     <span class="keyword">virtual</span> ~wxPGValueType() = 0;
00720 
00723     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetTypeName() <span class="keyword">const</span> = 0;
00724 
00729     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetCustomTypeName() <span class="keyword">const</span>;
00730 
00733     <span class="keyword">virtual</span> wxPGVariant GetDefaultValue () <span class="keyword">const</span> = 0;
00734 
00737     <span class="keyword">virtual</span> wxVariant GenerateVariant ( wxPGVariant value, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00738 
00742     <span class="keyword">virtual</span> wxPGProperty* GenerateProperty ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00743 
00746     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00747 
<a name="l00750"></a><a class="code" href="classwxPGValueType.htm#wxPGValueTypea4">00750</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetType()<span class="keyword"> const</span>
00751 <span class="keyword">    </span>{
00752         <span class="keywordflow">return</span> GetCustomTypeName();
00753     }
00754 
00755 <span class="keyword">protected</span>:
00756 };
00757 
00758 <span class="comment">// -----------------------------------------------------------------------</span>
00759 
00760 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
00761 <span class="preprocessor"></span>
00804 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyValidator
00805 {
00806 <span class="keyword">public</span>:
00807     wxPropertyValidator();
00808     <span class="keyword">virtual</span> ~wxPropertyValidator();
00809 
00812     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span> = 0;
00813 
00826     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span> = 0;
00827 
00828 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00829 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00830 <span class="preprocessor">#else</span>
00831 <span class="preprocessor"></span>
00835     <span class="keyword">inline</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* ) { }
00836 <span class="preprocessor">#endif</span>
00837 <span class="preprocessor"></span>
00840     wxPropertyValidator* Ref();
00841 
00844     <span class="keywordtype">bool</span> UnRef();
00845 
00846 <span class="keyword">private</span>:
00847     wxPropertyValidator* m_refObject;
00848     <span class="keywordtype">int</span> m_refCount;
00849 };
00850 
00857 <span class="keyword">class </span>WXDLLIMPEXP_PG wxStringPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00858 {
00859 <span class="keyword">public</span>:
00863     wxStringPropertyValidator( <span class="keyword">const</span> wxString&amp; excludeList );
00864     <span class="keyword">virtual</span> ~wxStringPropertyValidator();
00865 
00866     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00867     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00868 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00869 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00870 <span class="preprocessor">#endif</span>
00871 <span class="preprocessor"></span>
00872 <span class="keyword">protected</span>:
00873     wxString m_excludeList;
00874 };
00875 
00881 <span class="keyword">class </span>WXDLLIMPEXP_PG wxIntPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00882 {
00883 <span class="keyword">public</span>:
00884     wxIntPropertyValidator( <span class="keywordtype">long</span> min, <span class="keywordtype">long</span> max );
00885     <span class="keyword">virtual</span> ~wxIntPropertyValidator();
00886 
00887     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00888     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00889 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00890 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00891 <span class="preprocessor">#endif</span>
00892 <span class="preprocessor"></span>
00893 <span class="keyword">protected</span>:
00894     <span class="keywordtype">long</span> m_min, m_max;
00895 };
00896 
00902 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFloatPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00903 {
00904 <span class="keyword">public</span>:
00905     wxFloatPropertyValidator( <span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max );
00906     <span class="keyword">virtual</span> ~wxFloatPropertyValidator();
00907 
00908     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00909     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00910 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00911 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00912 <span class="preprocessor">#endif</span>
00913 <span class="preprocessor"></span>
00914 <span class="keyword">protected</span>:
00915     <span class="keywordtype">double</span> m_min, m_max;
00916 };
00917 
00918 <span class="preprocessor">#endif</span>
00919 <span class="preprocessor"></span>
00920 <span class="comment">// -----------------------------------------------------------------------</span>
00921 
00922 <span class="keyword">union </span>wxPGVariantUnion
00923 {
00924     <span class="keywordtype">long</span>        m_long;
00925     <span class="keywordtype">void</span>*       m_ptr;
00926     <span class="keywordtype">bool</span>        m_bool;
00927 };
00928 
00929 <span class="comment">// Very simple value wrapper.</span>
00930 <span class="keyword">class </span>wxPGVariant
00931 {
00932 <span class="keyword">public</span>:
00933 
00935     wxPGVariant ()
00936     {
00937         m_v.m_ptr = (<span class="keywordtype">void</span>*)NULL;
00938     }
00939 <span class="preprocessor">#ifndef SWIG</span>
00940 <span class="preprocessor"></span>
00941     wxPGVariant ( <span class="keywordtype">long</span> v_long )
00942     {
00943         m_v.m_long = v_long;
00944     }
00946     wxPGVariant ( <span class="keywordtype">int</span> v_long )
00947     {
00948         m_v.m_long = v_long;
00949     }
00951     wxPGVariant ( <span class="keywordtype">bool</span> value )
00952     {
00953         m_v.m_bool = value;
00954     }
00956     wxPGVariant ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; v_ptr )
00957     {
00958         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00959     }
00961     wxPGVariant ( <span class="keyword">const</span> wxString&amp; v_ptr )
00962     {
00963         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00964     }
00966     wxPGVariant ( <span class="keyword">const</span> wxArrayString&amp; v_ptr )
00967     {
00968         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00969     }
00971     wxPGVariant ( <span class="keyword">const</span> wxObject&amp; v_ptr )
00972     {
00973         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00974     }
00976     wxPGVariant ( <span class="keyword">const</span> wxObject* v_ptr )
00977     {
00978         m_v.m_ptr = (<span class="keywordtype">void</span>*)v_ptr;
00979     }
00981     wxPGVariant ( <span class="keywordtype">void</span>* v_ptr )
00982     {
00983         m_v.m_ptr = v_ptr;
00984     }
00985 
00987     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetLong ()<span class="keyword"> const</span>
00988 <span class="keyword">    </span>{
00989         <span class="keywordflow">return</span> m_v.m_long;
00990     }
00992     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetBool ()<span class="keyword"> const</span>
00993 <span class="keyword">    </span>{
00994         <span class="keywordflow">return</span> m_v.m_bool;
00995     }
00997     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetDouble ()<span class="keyword"> const</span>
00998 <span class="keyword">    </span>{
00999         <span class="keywordflow">return</span> *((<span class="keywordtype">double</span>*)m_v.m_ptr);
01000     }
01002     <span class="keyword">inline</span> <span class="keywordtype">double</span>* GetDoublePtr ()<span class="keyword"> const</span>
01003 <span class="keyword">    </span>{
01004         <span class="keywordflow">return</span> (<span class="keywordtype">double</span>*) m_v.m_ptr;
01005     }
01007     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetString ()<span class="keyword"> const</span>
01008 <span class="keyword">    </span>{
01009         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxString*)m_v.m_ptr);
01010     }
01012     <span class="keyword">inline</span> wxArrayString&amp; GetArrayString ()<span class="keyword"> const</span>
01013 <span class="keyword">    </span>{
01014         wxArrayString* temp = (wxArrayString*)m_v.m_ptr;
01015         <span class="keywordflow">return</span> *temp;
01016     }
01017 
01018     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject&amp; GetWxObject()<span class="keyword"> const</span>
01019 <span class="keyword">    </span>{
01020         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxObject*)m_v.m_ptr);
01021     }
01022 
01023     <span class="keyword">inline</span> wxObject* GetWxObjectPtr()<span class="keyword"> const</span>
01024 <span class="keyword">    </span>{
01025         <span class="keywordflow">return</span> (wxObject*)m_v.m_ptr;
01026     }
01027 
01029     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetVoidPtr ()<span class="keyword"> const</span>
01030 <span class="keyword">    </span>{
01031         <span class="keywordflow">return</span> m_v.m_ptr;
01032     }
01033 <span class="preprocessor">#endif</span>
01034 <span class="preprocessor"></span>
01036     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetRawLong ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_long; }
01037 
01039     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetRawPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_ptr; }
01040 
01041 <span class="preprocessor">#undef wxPG_ASSERT_VARIANT_GET</span>
01042 <span class="preprocessor"></span>
01044     wxPGVariantUnion          m_v;
01045 };
01046 
01047 <span class="preprocessor">#define wxPGVariantToString(A)      A.GetString()</span>
01048 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToLong(A)        A.GetLong()</span>
01049 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToBool(A)        A.GetBool()</span>
01050 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToDouble(A)      A.GetDouble()</span>
01051 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToArrayString(A) A.GetArrayString()</span>
01052 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObject(A)        A.GetWxObject()</span>
01053 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObjectPtr(A,B)   wxDynamicCast((wxObject*)A.GetRawPtr(),B);</span>
01054 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToVoidPtr(A)     A.GetVoidPtr()</span>
01055 <span class="preprocessor"></span>
01056 <span class="preprocessor">#define wxPGVariantFromString(A)        A</span>
01057 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromLong(A)          A</span>
01058 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromDouble(A)        A</span>
01059 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromArrayString(A)   A</span>
01060 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromBool(A)          A</span>
01061 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromWxObject(A)      *((const wxObject*)A)</span>
01062 <span class="preprocessor"></span>
01063 <span class="comment">// -----------------------------------------------------------------------</span>
01064 
01065 <span class="comment">//</span>
01066 <span class="comment">// Property class declaration helper macros</span>
01067 <span class="comment">// (wxPGRootPropertyClass and wxPropertyCategory require this).</span>
01068 <span class="comment">//</span>
01069 
01070 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_CLASS() \</span>
01071 <span class="preprocessor">public: \</span>
01072 <span class="preprocessor">    virtual const wxPGValueType* GetValueType () const; \</span>
01073 <span class="preprocessor">    virtual const wxPGEditor* GetEditorClass () const; \</span>
01074 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSNAME() \</span>
01075 <span class="preprocessor">private:</span>
01076 <span class="preprocessor"></span>
01077 <span class="comment">// -----------------------------------------------------------------------</span>
01078 <span class="comment">// wxPGPropertyClassInfo</span>
01079 
01080 
01081 <span class="keyword">typedef</span> wxPGProperty* (*wxPGPropertyConstructor) (<span class="keyword">const</span> wxString&amp;,<span class="keyword">const</span> wxString&amp;);
01082 
<a name="l01088"></a><a class="code" href="structwxPGPropertyClassInfo.htm">01088</a> <span class="keyword">struct </span><a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>
01089 {
01090     <span class="comment">// One returned by GetPropertyClassName</span>
01091     <span class="keyword">const</span> wxChar*               m_name;
01092 
01093     <span class="comment">// Simple property constructor function.</span>
01094     wxPGPropertyConstructor     m_constructor;
01095 };
01096 
01097 
01098 <span class="comment">// Use this macro to register your custom property classes.</span>
01099 <span class="preprocessor">#define wxPGRegisterPropertyClass(NAME) \</span>
01100 <span class="preprocessor">    wxPropertyGrid::RegisterPropertyClass(wxT(#NAME),&amp;NAME##ClassInfo)</span>
01101 <span class="preprocessor"></span>
01102 
01103 <span class="comment">// -----------------------------------------------------------------------</span>
01104 
01105 
01106 <span class="comment">// Structure for relaying choice/list info.</span>
01107 <span class="keyword">struct </span>wxPGChoiceInfo
01108 {
01109     <span class="keyword">const</span> wxChar**  m_arrWxChars;
01110     wxString*       m_arrWxString;
01111     wxPGConstants** m_constants;
01112     <span class="keywordtype">int</span>             m_itemCount;
01113 };
01114 
01115 
01128 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01129 <span class="preprocessor"></span><span class="keyword">class </span>WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxVariant
01130 #elif wxPG_INCLUDE_WXOBJECT
01131 class WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxObject
01132 #else
<a name="l01133"></a><a class="code" href="classwxPGProperty.htm">01133</a> class WXDLLIMPEXP_PG wxPGProperty
01134 #endif
01135 {
01136     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGPropertyWithChildren;
01137     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01138     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01139     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGProperty)</span>
01140 <span class="keyword">public</span>:
01141 
01144     <a class="code" href="classwxPGProperty.htm#wxPGPropertya46">wxPGProperty</a>();
01145 
01172     <a class="code" href="classwxPGProperty.htm#wxPGPropertya46">wxPGProperty</a>( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01173 
01175     <span class="keyword">virtual</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya47">~wxPGProperty</a>();
01176 
01211     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa7">DoSetValue</a> ( wxPGVariant value );
01212 
01215     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a> () <span class="keyword">const</span>;
01216 
01217 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01218 <span class="preprocessor"></span>
01220     <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetValueAsVariant</a> ()<span class="keyword"> const</span>
01221 <span class="keyword">    </span>{
01222         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
01223     }
01224 <span class="preprocessor">#else</span>
01225 <span class="preprocessor"></span>
01227     <span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetValueAsVariant</a> () <span class="keyword">const</span>;
01228 <span class="preprocessor">#endif</span>
01229 <span class="preprocessor"></span>
01235     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya23">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
01236 
01246     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya41">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01247 
01257     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa54">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> flags );
01258 
01263     <span class="keyword">virtual</span> wxSize <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa21">GetImageSize</a>() <span class="keyword">const</span>;
01264 
01283     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa44">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
01284 
01285 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
01286 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa13">GetClassName</a> ()<span class="keyword"> const</span>
01287 <span class="keyword">    </span>{
01288         <span class="keywordflow">return</span> GetClassInfo()-&gt;GetClassName();
01289     }
01290 <span class="preprocessor">#else</span>
01291 <span class="preprocessor"></span>
01294     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa13">GetClassName</a> () <span class="keyword">const</span> = 0;
01295 <span class="preprocessor">#endif</span>
01296 <span class="preprocessor"></span>
01308     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGValueType* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueType</a> () <span class="keyword">const</span> = 0;
01309 
01312     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGEditor* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa17">GetEditorClass</a> () <span class="keyword">const</span>;
01313 
01319     <span class="comment">//virtual int GetParentingType() const;</span>
<a name="l01320"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">01320</a>     <span class="keyword">inline</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentingType; }
01321 
01333     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa12">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01334 
01369     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa43">OnCustomPaint</a> ( wxDC&amp; dc,
01370         <span class="keyword">const</span> wxRect&amp; rect, <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata );
01371 
01380     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa47">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxVariant value );
01381 
<a name="l01383"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa24">01383</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa24">GetLabel</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_label; }
01384 
01386     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#wxPGPropertya21">GetParentState</a>() <span class="keyword">const</span>;
01387 
01388 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01389 <span class="preprocessor"></span>
01390     <span class="comment">//inline const wxString&amp; GetName() const { return wxVariant::GetName(); }</span>
01391     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { SetName(str); }
01392 <span class="preprocessor">#else</span>
01393 <span class="preprocessor"></span>
<a name="l01394"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa25">01394</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa25">GetName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_name; }
01395     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { m_name = str; }
01396 <span class="preprocessor">#endif</span>
01397 <span class="preprocessor"></span>
<a name="l01402"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">01402</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetY</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_y; }
01403 
01404     <span class="keywordtype">void</span> UpdateControl ( wxPGCtrlClass* primary );
01405 
01406     <span class="keyword">inline</span> wxString GetDisplayedString ()<span class="keyword"> const</span>
01407 <span class="keyword">    </span>{
01408         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya23">GetValueAsString</a>(0);
01409     }
01410 
<a name="l01412"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa20">01412</a>     <span class="keyword">inline</span> wxPGId <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa20">GetId</a>() { <span class="keywordflow">return</span> wxPGIdGen(<span class="keyword">this</span>); }
01413 
<a name="l01415"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa26">01415</a>     <span class="keyword">inline</span> wxPGPropertyWithChildren* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa26">GetParent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
01416 
<a name="l01420"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa38">01420</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa38">IsOk</a>()<span class="keyword"> const</span>
01421 <span class="keyword">    </span>{
01422         <span class="keywordflow">return</span> (( m_y &gt;= -1 )?TRUE:FALSE);
01423     }
01424 
01425     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFlagSet( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag )<span class="keyword"> const</span>
01426 <span class="keyword">    </span>{
01427         <span class="keywordflow">return</span> ( m_flags &amp; flag ) ? TRUE : FALSE;
01428     }
01429 
<a name="l01433"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa2">01433</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa2">CanHaveExtraChildren</a>()<span class="keyword"> const</span>
01434 <span class="keyword">    </span>{
01435         <span class="keywordflow">return</span> ( m_parentingType == 1 || m_parentingType == -2 );
01436     }
01437 
01438     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetFlags()<span class="keyword"> const</span>
01439 <span class="keyword">    </span>{
01440         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_flags;
01441     }
01442 
<a name="l01446"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa30">01446</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa30">GetType</a>()<span class="keyword"> const</span>
01447 <span class="keyword">    </span>{
01448         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea4">GetType</a>();
01449     }
01450 
<a name="l01452"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa40">01452</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa40">IsSubProperty</a>()<span class="keyword"> const</span>
01453 <span class="keyword">    </span>{
01454         wxPGProperty* parent = (wxPGProperty*)m_parent;
01455         <span class="keywordflow">if</span> ( parent &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>() &lt; 0 &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassp14">m_y</a> &gt; -2 )
01456             <span class="keywordflow">return</span> TRUE;
01457         <span class="keywordflow">return</span> FALSE;
01458     }
01459 
01461     size_t <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa11">GetChildCount</a>() <span class="keyword">const</span>;
01462 
01463     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetArrIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrIndex; }
01464 
01465     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDepth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_depth; }
01466 
01467 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01468 <span class="preprocessor"></span>
01469     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCatIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_category; }
01470 
01472     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCatIndex(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ind) { m_category = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)ind; }
01473 <span class="preprocessor">#endif</span>
01474 <span class="preprocessor"></span>
<a name="l01476"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa22">01476</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa22">GetIndexInParent</a>()<span class="keyword"> const</span>
01477 <span class="keyword">    </span>{
01478         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_arrIndex;
01479     }
01480 
01484     <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa49">SetChoicesPrivate</a>();
01485 
01486     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags |= flag; }
01487 
01488     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetHelpString ( <span class="keyword">const</span> wxString&amp; help_string ) { m_helpString = help_string; }
01489 
01490     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabel( <span class="keyword">const</span> wxString&amp; label ) { m_label = label; }
01491 
01492 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
01493 <span class="preprocessor"></span>
01494     <span class="keywordtype">void</span> SetValidator ( wxPropertyValidator&amp; validator );
01495 
01497     wxPropertyValidator&amp; GetValidator () <span class="keyword">const</span>;
01498 
01502     <span class="keywordtype">bool</span> StdValidationProcedure( wxPGVariant value );
01503 
01504 <span class="preprocessor">#else</span>
01505 <span class="preprocessor"></span>
01506     <span class="keyword">inline</span> <span class="keywordtype">bool</span> StdValidationProcedure( wxPGVariant value )
01507     {
01508         <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa7">DoSetValue</a>( value );
01509         <span class="keywordflow">return</span> TRUE;
01510     }
01511 
01512 <span class="preprocessor">#endif</span>
01513 <span class="preprocessor"></span>
01529     <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa45">PrepareValueForDialogEditing</a>( wxPropertyGrid* propgrid );
01530 
01531 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
01532 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetClientData ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_clientData; }
01533     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDataData ( <span class="keywordtype">void</span>* clientData ) { m_clientData = clientData; }
01534 <span class="preprocessor">#endif</span>
01535 <span class="preprocessor"></span>
01540     size_t <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa48">SetChoices</a> ( size_t <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values );
01541 
01542     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetHelpString ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_helpString; }
01543 
01544     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags &amp;= ~(flag); }
01545 
01546     <span class="comment">// Use, for example, to detect if item is inside collapsed section.</span>
01547     <span class="keywordtype">bool</span> IsSomeParent ( wxPGProperty* candidate_parent ) <span class="keyword">const</span>;
01548 
01549     <span class="comment">// Shows error as a tooltip or something similar (depends on platform).</span>
01550     <span class="keywordtype">void</span> ShowError ( <span class="keyword">const</span> wxString&amp; msg );
01551 
01552 <span class="keyword">protected</span>:
01553 
01554     <span class="comment">// Called in constructors.</span>
01555     <span class="keywordtype">void</span> Init ();
01556 
01557     wxString                    m_label;
01558 <span class="comment">//#if wxPG_EMBED_VARIANT</span>
01559 <span class="comment">//    wxVariant                   m_variant;</span>
01560 <span class="comment">//#else</span>
01561     wxString                    m_name;
01562     wxPGPropertyWithChildren*   m_parent;
01563     wxString                    m_helpString; <span class="comment">// Help shown in statusbar or help box.</span>
01564 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
01565 <span class="preprocessor"></span>    <span class="keywordtype">void</span>*                       m_clientData;
01566 <span class="preprocessor">#endif</span>
01567 <span class="preprocessor"></span><span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
01568 <span class="preprocessor"></span>    wxPropertyValidator*        m_validator;
01569 <span class="preprocessor">#endif</span>
01570 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                m_arrIndex; <span class="comment">// Index in parent.</span>
01571     <span class="keywordtype">int</span>                         m_y; <span class="comment">// This could be short int.</span>
01572     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_flags; <span class="comment">// This could be short int.</span>
01573 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01574 <span class="preprocessor"></span>    <span class="comment">// 0xFF if doesn't belong to a category and is not a category;</span>
01575     <span class="comment">// otherwise index to category table (if is category, then own index)</span>
01576     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_category;
01577 <span class="preprocessor">#endif</span>
01578 <span class="preprocessor"></span>
01579     <span class="comment">// 1 = category</span>
01580     <span class="comment">// 0 = no children</span>
01581     <span class="comment">// -1 = has fixed-set of sub-properties</span>
01582     <span class="comment">// -2 = this is wxCustomProperty (sub-properties can be added)</span>
01583     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>                 m_parentingType;
01584 
01585     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depth; <span class="comment">// Root has 0, categories etc. at that level 1, etc.</span>
01586 
01587     <span class="comment">// m_depthBgCol indicates width of background colour between margin and item</span>
01588     <span class="comment">// (essentially this is category's depth, if none then equals m_depth).</span>
01589     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depthBgCol;
01590 
01591     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_bgColIndex; <span class="comment">// Cell background brush index.</span>
01592 
01593 };
01594 
01595 <span class="comment">//</span>
01596 <span class="comment">// wxPGId comparison operators.</span>
01597 <span class="comment">// TODO: Are these really used?</span>
01598 <span class="comment">//</span>
01599 
01600 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; b)
01601 {
01602     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01603     <span class="keyword">const</span> wxString&amp; a = <span class="keywordtype">id</span>.GetProperty().GetName();
01604     <span class="keywordflow">return</span> (a.Len() == b.Len()) &amp;&amp; (a.Cmp(b) == 0);
01605 }
01606 
01607 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* b)
01608 {
01609     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01610     <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty().GetName().Cmp(b) == 0;
01611 }
01612 
01613 
01614 <span class="comment">// For dual-pointer-usage reasons, we need to use this trickery</span>
01615 <span class="comment">// instead of wxObjArray. wxPGValueType hash map is declared</span>
01616 <span class="comment">// in propdev.h.</span>
01617 <span class="keyword">typedef</span> wxArrayPtrVoid wxPGArrayProperty;
01618 
01619 <span class="comment">// It was reported that the alternative does not work with GCC 4.1</span>
01620 <span class="preprocessor">#if wxUSE_UNICODE || wxCHECK_GCC_VERSION(4,0)</span>
01621 <span class="preprocessor"></span>
01622 <span class="comment">// Always use wxString based hashmap with unicode</span>
01623 WX_DECLARE_STRING_HASH_MAP_WITH_DECL(<span class="keywordtype">void</span>*,
01624                                      wxPGHashMapS2P,
01625                                      <span class="keyword">class</span> WXDLLIMPEXP_PG);
01626 
01627 <span class="preprocessor"># define wxPGNameStr            const wxString&amp;</span>
01628 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)      STR</span>
01629 <span class="preprocessor"></span>
01630 <span class="preprocessor">#else</span>
01631 <span class="preprocessor"></span>
01632 WX_DECLARE_HASH_MAP_WITH_DECL(wxChar*,     <span class="comment">// type of the keys</span>
01633                               <span class="keywordtype">void</span>*,                 <span class="comment">// type of the values</span>
01634                               wxStringHash,          <span class="comment">// hasher</span>
01635                               wxStringEqual,         <span class="comment">// key equality predicate</span>
01636                               wxPGHashMapS2P,       <span class="comment">// name of the class</span>
01637                               <span class="keyword">class</span> WXDLLIMPEXP_PG);
01638 
01639 <span class="preprocessor"># define wxPGNameStr         const wxChar*       // Should be same as hashmap type</span>
01640 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)   ((char * const)STR.c_str())</span>
01641 <span class="preprocessor"></span>
01642 <span class="preprocessor">#endif</span>
01643 <span class="preprocessor"></span>
01644 <span class="comment">// -----------------------------------------------------------------------</span>
01645 
01646 <span class="comment">// Hash map for int-to-int mapping</span>
01647 WX_DECLARE_HASH_MAP_WITH_DECL(size_t,
01648                               size_t,
01649                               wxIntegerHash,
01650                               wxIntegerEqual,
01651                               wxPGHashMapI2I,
01652                               <span class="keyword">class</span> WXDLLIMPEXP_PG);
01653 
01654 <span class="comment">// -----------------------------------------------------------------------</span>
01655 
01656 <span class="preprocessor">#if !wxPG_EMBED_VARIANT</span>
<a name="l01657"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">01657</a> <span class="preprocessor"></span><span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">wxPGProperty::GetValueAsVariant</a> ()<span class="keyword"> const</span>
01658 <span class="keyword"></span>{
01659     wxPGVariant value = <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>();
01660     <span class="keyword">const</span> wxPGValueType* typeclass = <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueType</a>();
01661     wxASSERT_MSG ( typeclass, wxT(<span class="stringliteral">"Did you forgot to use wxPG_INIT_REQUIRED_TYPE(T) in constructor?"</span>) );
01662     <span class="keywordflow">return</span> typeclass-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea1">GenerateVariant</a>(value,m_name);
01663 }
01664 <span class="preprocessor">#endif</span>
01665 <span class="preprocessor"></span>
01666 <span class="comment">// -----------------------------------------------------------------------</span>
01667 
<a name="l01673"></a><a class="code" href="classwxPGPropertyWithChildren.htm">01673</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren : <span class="keyword">public</span> wxPGProperty
01674 {
01675     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01676     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01677     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01678     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGPropertyWithChildren)</span>
01679 <span class="keyword">public</span>:
01680 
01682     wxPGPropertyWithChildren();
01683 
01688     wxPGPropertyWithChildren( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01689 
01691     <span class="keyword">virtual</span> ~wxPGPropertyWithChildren();
01692 
01693     <span class="comment">//virtual int GetParentingType() const;</span>
01694 
01698     <span class="comment">// Advanced version that gives property list and index to this item</span>
01699     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya23">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
01700 
01704     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya41">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01705 
01708     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshChildren();
01709 
01713     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ChildChanged ( wxPGProperty* p );
01714 
<a name="l01716"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa14">01716</a>     <span class="keyword">inline</span> size_t GetCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.GetCount(); }
01717 
<a name="l01719"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa41">01719</a>     <span class="keyword">inline</span> wxPGProperty* Item ( size_t i )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Item(i); }
01720 
<a name="l01722"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa42">01722</a>     <span class="keyword">inline</span> wxPGProperty* Last ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Last(); }
01723 
<a name="l01725"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa35">01725</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> Index ( <span class="keyword">const</span> wxPGProperty* p )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.Index((<span class="keywordtype">void</span>*)p); }
01726 
01728     <span class="keywordtype">void</span> Empty();
01729 
01730     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsExpanded()<span class="keyword"> const</span>
01731 <span class="keyword">    </span>{
01732         <span class="keywordflow">return</span> ( m_expanded &gt; 0 ) ? TRUE : FALSE;
01733     }
01734 
<a name="l01735"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa28">01735</a>     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#wxPGPropertya21">GetParentState</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentState; }
01736 
01737     <span class="comment">// Puts correct indexes to children</span>
01738     <span class="keywordtype">void</span> FixIndexesOfChildren ( size_t starthere = 0 );
01739 
01740     wxPGProperty* GetItemAtY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lh );
01741 
01742     <span class="keywordtype">void</span> AddChild ( wxPGProperty* prop, <span class="keywordtype">int</span> index = -1, <span class="keywordtype">bool</span> correct_mode = TRUE );
01743 
01744     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetParentState ( wxPropertyGridState* pstate ) { m_parentState = pstate; }
01745 
01746 <span class="keyword">protected</span>:
01747 
01748     wxPropertyGridState*    m_parentState;
01749 
01750     wxPGArrayProperty   m_children;
01751     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_expanded;
01752 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
01753 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_ctIndex; <span class="comment">// index in category table, 0xFF if not category</span>
01754 <span class="preprocessor">#endif</span>
01755 <span class="preprocessor"></span>};
01756 
01757 <span class="comment">// -----------------------------------------------------------------------</span>
01758 
<a name="l01763"></a><a class="code" href="classwxPGRootPropertyClass.htm">01763</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGRootPropertyClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01764 {
01765     WX_PG_DECLARE_PROPERTY_CLASS()
01766 <span class="keyword">public</span>:
01767 
01769     wxPGRootPropertyClass();
01770     <span class="keyword">virtual</span> ~wxPGRootPropertyClass();
01771 
01773     <span class="comment">//virtual int GetParentingType() const;</span>
01774 
01775 <span class="keyword">protected</span>:
01776 };
01777 
01778 <span class="comment">// -----------------------------------------------------------------------</span>
01779 
<a name="l01784"></a><a class="code" href="classwxPropertyCategoryClass.htm">01784</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyCategoryClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01785 {
01786     WX_PG_DECLARE_PROPERTY_CLASS()
01787 <span class="keyword">public</span>:
01788 
01790     wxPropertyCategoryClass();
01791 
01799     wxPropertyCategoryClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a> );
01800     ~wxPropertyCategoryClass();
01801 
01803     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#wxPGRootPropertyClassa29">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
01804 
01805     <span class="comment">//virtual int GetParentingType() const;</span>
01806 
01807     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetTextExtent()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_textExtent; }
01808 
01809     <span class="keywordtype">void</span> CalculateTextExtent ( wxWindow* wnd, wxFont&amp; font );
01810 
01811 <span class="keyword">protected</span>:
01812     <span class="keywordtype">int</span> m_textExtent; <span class="comment">// pre-calculated length of text</span>
01813 };
01814 
01815 <span class="comment">// -----------------------------------------------------------------------</span>
01816 
01817 <span class="comment">// Used to indicate wxPGConstants::Add etc that the value shall not be added</span>
01818 <span class="preprocessor">#define wxPG_INVALID_VALUE      2147483647</span>
01819 <span class="preprocessor"></span>
<a name="l01824"></a><a class="code" href="classwxPGConstants.htm">01824</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGConstants
01825 {
01826 <span class="keyword">public</span>:
01827     
01829     wxPGConstants();
01830 
01832     wxPGConstants( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01833 
01835     wxPGConstants( <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL) );
01836 
01840     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01841 
01843     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL );
01844 
01846     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxArrayString&amp; arr, <span class="keyword">const</span> wxArrayInt&amp; arrint );
01847 
01849     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar* label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
01850 
<a name="l01853"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa10">01853</a>     <span class="keyword">inline</span> wxArrayString&amp; GetLabels()
01854     {
01855         wxASSERT ( m_refCount != 0xFFFFFFF );
01856         <span class="keywordflow">return</span> m_arrLabels;
01857     }
01858 
<a name="l01861"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa14">01861</a>     <span class="keyword">inline</span> wxArrayInt&amp; GetValues()
01862     {
01863         wxASSERT ( m_refCount != 0xFFFFFFF );
01864         <span class="keywordflow">return</span> m_arrValues;
01865     }
01866 
<a name="l01870"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa15">01870</a>     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const</span>
01871 <span class="keyword">    </span>{
01872         <span class="keywordflow">return</span> ( m_refCount != 0xFFFFFFF );
01873     }
01874 
<a name="l01877"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa16">01877</a>     <span class="keywordtype">bool</span> IsTemporary ()<span class="keyword"> const</span>
01878 <span class="keyword">    </span>{
01879         <span class="keywordflow">return</span> ( m_refCount == 0 );
01880     }
01881 
<a name="l01883"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa7">01883</a>     size_t GetId()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_id; };
01884 
<a name="l01886"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa20">01886</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 )
01887     {
01888         Free();
01889         Add(labels,values,itemcount);
01890     }
01891 
<a name="l01895"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa19">01895</a>     <span class="keywordtype">void</span> Set ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = (<span class="keyword">const</span> <span class="keywordtype">long</span>*) NULL )
01896     {
01897         Free();
01898         Add(arr,values);
01899     }
01900 
<a name="l01902"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa18">01902</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL) )
01903     {
01904         Free();
01905         <span class="keywordflow">if</span> ( &amp;values )
01906             Add(labels,values);
01907         <span class="keywordflow">else</span>
01908             Add(labels);
01909     }
01910 
01914     <span class="keywordtype">void</span> SetId( size_t <span class="keywordtype">id</span> );
01915 
01916     <span class="keywordtype">void</span> SetupId( size_t <span class="keywordtype">id</span> ) { m_id = <span class="keywordtype">id</span>; }
01917 
01918     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetLabel( size_t ind )
01919     {
01920         <span class="keywordflow">return</span> m_arrLabels[ind];
01921     }
01922     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetLabels()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrLabels; }
01923 
01924     <span class="keyword">inline</span> size_t GetCount () { <span class="keywordflow">return</span> m_arrLabels.GetCount(); }
01925 
01926     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetValue( size_t ind ) { <span class="keywordflow">return</span> m_arrValues[ind]; }
01927     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetValues()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrValues; }
01928 
01929     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetRefCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_refCount; }
01930     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetRefCount(<span class="keywordtype">int</span> refcount) { m_refCount = refcount; }
01931     <span class="keyword">inline</span> <span class="keywordtype">void</span> Ref()
01932     {
01933         wxASSERT ( m_refCount != 0xFFFFFFF );
01934         m_refCount++;
01935         <span class="comment">/*</span>
01936 <span class="comment">        const wxChar* l1 = wxT("&lt;no_items&gt;");</span>
01937 <span class="comment">        if ( GetCount() )</span>
01938 <span class="comment">            l1 = m_arrLabels[0].c_str();</span>
01939 <span class="comment">        wxLogDebug(wxT("%X: %s... Ref: refcount is now %i"),(unsigned int)this,l1,(int)m_refCount);</span>
01940 <span class="comment">        */</span>
01941     }
01942     <span class="keyword">inline</span> <span class="keywordtype">bool</span> UnRef()
01943     {
01944         wxASSERT ( m_refCount != 0xFFFFFFF );
01945         m_refCount--;
01946 
01947         <span class="comment">/*</span>
01948 <span class="comment">        const wxChar* l1 = wxT("&lt;no_items&gt;");</span>
01949 <span class="comment">        if ( GetCount() )</span>
01950 <span class="comment">            l1 = m_arrLabels[0].c_str();</span>
01951 <span class="comment">        wxLogDebug(wxT("%X: %s... UnRef: refcount is now %i"),(unsigned int)this,l1,(int)m_refCount);</span>
01952 <span class="comment">        */</span>
01953 
01954         <span class="keywordflow">return</span> ( m_refCount &lt; 1 );
01955     }
01956 
01957     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddString( <span class="keyword">const</span> wxString&amp; str ) { m_arrLabels.Add(str); }
01958     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddInt( <span class="keywordtype">int</span> val ) { m_arrValues.Add(val); }
01959 
01960     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabels( wxArrayString&amp; arr ) { m_arrLabels = arr; }
01961     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabels( <span class="keyword">const</span> wxArrayString&amp; arr ) { m_arrLabels = arr; }
01962     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValues( wxArrayInt&amp; arr ) { m_arrValues = arr; }
01963     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValues( <span class="keyword">const</span> wxArrayInt&amp; arr ) { m_arrValues = arr; }
01964 
01966     ~wxPGConstants();
01967 
01968 <span class="keyword">protected</span>:
01969 
01970     wxArrayString   m_arrLabels;
01971     wxArrayInt      m_arrValues;
01972 
01973     size_t          m_id; <span class="comment">// usually pointer to a wxChar* array</span>
01974 
01975 <span class="preprocessor">#ifdef __WXDEBUG__</span>
01976 <span class="preprocessor"></span><span class="keyword">public</span>:
01977     <span class="comment">// For pairing validation</span>
01978     <span class="keyword">const</span> <span class="keywordtype">long</span>*     m_origValueArray;
01979 <span class="keyword">protected</span>:
01980 <span class="preprocessor">#endif</span>
01981 <span class="preprocessor"></span>
01982     <span class="comment">// So that multiple properties can use the same set</span>
01983     <span class="keywordtype">int</span>             m_refCount;
01984 
01985     <span class="keywordtype">void</span> Init ()
01986     {
01987         m_id = 0;
01988         m_refCount = 0;
01989     }
01990     <span class="keywordtype">void</span> Free ();
01991 
01992 };
01993 
01994 <span class="comment">// -----------------------------------------------------------------------</span>
01995 <span class="comment">// Property declaration.</span>
01996 
01997 <span class="preprocessor">#define wxPG_CONSTFUNC(PROP) PROP</span>
01998 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_PROPCLASS(PROP) PROP##Class</span>
01999 <span class="preprocessor"></span>
02000 <span class="comment">// Macro based constructor.</span>
02001 <span class="preprocessor">#define wxPG_NEWPROPERTY(PROP,LABEL,NAME,VALUE) wx##PROP##Property(LABEL,NAME,VALUE)</span>
02002 <span class="preprocessor"></span>
02003 <span class="preprocessor">#define wxPG_DECLARE_PROPERTY_CLASSINFO(NAME) \</span>
02004 <span class="preprocessor">    extern wxPGPropertyClassInfo NAME##ClassInfo;</span>
02005 <span class="preprocessor"></span>
02006 <span class="preprocessor">#define wxPG_DECLARE_PROPERTY_CLASSINFO_WITH_DECL(NAME,DECL) \</span>
02007 <span class="preprocessor">    extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02008 <span class="preprocessor"></span>
02009 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,VALARG,DEFVAL,DECL) \</span>
02010 <span class="preprocessor">    extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL ); \</span>
02011 <span class="preprocessor">    extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02012 <span class="preprocessor"></span>
02013 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY(NAME,VALARG,DEFVAL) \</span>
02014 <span class="preprocessor">    extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL ); \</span>
02015 <span class="preprocessor">    wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02016 <span class="preprocessor"></span>
02017 <span class="comment">//</span>
02018 <span class="comment">// Specific macro-based declarations.</span>
02019 <span class="comment">//</span>
02020 
02021 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02022 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString ); \</span>
02023 <span class="preprocessor">extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02024 <span class="preprocessor"></span>
02025 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY(NAME) \</span>
02026 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString ); \</span>
02027 <span class="preprocessor">wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02028 <span class="preprocessor"></span>
02029 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02030 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,long,-1,DECL)</span>
02031 <span class="preprocessor"></span>
02032 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(NAME) \</span>
02033 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,long,-1)</span>
02034 <span class="preprocessor"></span>
02035 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02036 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,int,-1,DECL)</span>
02037 <span class="preprocessor"></span>
02038 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY(NAME) \</span>
02039 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,int,-1)</span>
02040 <span class="preprocessor"></span>
02041 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02042 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() ); \</span>
02043 <span class="preprocessor">extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02044 <span class="preprocessor"></span>
02045 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY(NAME) \</span>
02046 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() ); \</span>
02047 <span class="preprocessor">wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02048 <span class="preprocessor"></span>
02049 <span class="comment">// Declare basic property classes.</span>
02050 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02051 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxIntProperty,<span class="keywordtype">long</span>,0,WXDLLIMPEXP_PG)
02052 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFloatProperty,<span class="keywordtype">double</span>,0.0,WXDLLIMPEXP_PG)
02053 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxBoolProperty,<span class="keywordtype">bool</span>,FALSE,WXDLLIMPEXP_PG)
02054 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxLongStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02055 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFileProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02056 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxArrayStringProperty,<span class="keyword">const</span> wxArrayString&amp;,wxArrayString(),WXDLLIMPEXP_PG)
02057 
02058 WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(wxDirProperty,WXDLLIMPEXP_PG)
02059 
02060 <span class="comment">// Enum and Flags Properties require special attention.</span>
02061 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels = (<span class="keyword">const</span> wxChar**) NULL,
02062     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
02063 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
02064     wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
02065 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxEnumPropertyClassInfo;
02066 
02067 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels = (<span class="keyword">const</span> wxChar**) NULL,
02068     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
02069 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
02070     wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
02071 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxFlagsPropertyClassInfo;
02072 
02073 <span class="comment">// wxCustomProperty doesn't have value argument.</span>
02074 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxCustomProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
02075 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxCustomPropertyClassInfo;
02076 
02077 <span class="comment">// wxPropertyCategory doesn't have value argument.</span>
02078 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxPropertyCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
02079 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxPropertyCategoryClassInfo;
02080 
02081 <span class="comment">// FIXME: Should this be out-of-inline?</span>
02082 <span class="keyword">inline</span> wxObject* wxPG_VariantToWxObject( wxVariant&amp; variant, wxClassInfo* classInfo )
02083 {
02084     <span class="keywordflow">if</span> ( !variant.IsValueKindOf(classInfo) )
02085         <span class="keywordflow">return</span> (wxObject*) NULL;
02086     wxVariantData* vdata = variant.GetData();
02087 
02088     <span class="keywordflow">if</span> ( vdata-&gt;IsKindOf( &amp;wxPGVariantDataWxObj::ms_classInfo ) )
02089          <span class="keywordflow">return</span> (wxObject*) ((wxPGVariantDataWxObj*)vdata)-&gt;GetValuePtr();
02090 
02091     <span class="keywordflow">return</span> variant.GetWxObjectPtr();
02092 }
02093 
02094 <span class="comment">//</span>
02095 <span class="comment">// Redefine wxGetVariantCast to also take propertygrid variantdata</span>
02096 <span class="comment">// classes into account.</span>
02097 <span class="comment">// TODO: Remove after persistent wxObject classes added (i.e.</span>
02098 <span class="comment">//   GetWxObjectPtr works for all).</span>
02099 <span class="comment">//</span>
02100 <span class="preprocessor">#undef wxGetVariantCast</span>
02101 <span class="preprocessor"></span><span class="preprocessor">#define wxGetVariantCast(var,classname) (classname*)wxPG_VariantToWxObject(var,&amp;classname::ms_classInfo)</span>
02102 <span class="preprocessor"></span>
02103 <span class="comment">// TODO: After a while, remove this.</span>
02104 <span class="preprocessor">#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) (CLASSNAME*)wxPG_VariantToWxObject(VARIANT,&amp;CLASSNAME::ms_classInfo)</span>
02105 <span class="preprocessor"></span><span class="comment">//#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) wxGetVariantCast(VARIANT,CLASSNAME)</span>
02106 
02107 <span class="comment">// -----------------------------------------------------------------------</span>
02108 
02114 <span class="comment">// BM_STATE</span>
<a name="l02115"></a><a class="code" href="classwxPropertyGridState.htm">02115</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridState
02116 {
02117     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
02118     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
02119     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
02120 <span class="keyword">public</span>:
02121 
02123     wxPropertyGridState();
02124 
02126     ~wxPropertyGridState();
02127 
02129     wxPGId Append ( wxPGProperty* property );
02130 
02131     wxPGId AppendIn ( wxPGPropertyWithChildren* pwc, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value );
02132 
02134     wxPGId BaseGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
02135 
02137     <span class="keywordtype">void</span> Clear ();
02138 
02139     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGProperty* p );
02140 
02141     <span class="keyword">static</span> <span class="keywordtype">void</span> ClearPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
02142     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
02143 
02144     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGProperty* p );
02145 
02146     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
02147 
02148     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
02149 
02150     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
02151 
02153     <span class="keywordtype">bool</span> EnableProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> enable );
02154 
02155     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
02156 
02157     <span class="keywordtype">void</span> ExpandAll ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> do_expand );
02158 
<a name="l02160"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea12">02160</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
02161 <span class="keyword">    </span>{
02162         wxPGProperty* p = (wxPGProperty*) NULL;
02163         <span class="keywordflow">if</span> ( m_properties-&gt;GetCount() )
02164             p = m_properties-&gt;Item(0);
02165         <span class="keywordflow">return</span> wxPGIdGen(p);
02166     }
02167 
02168     wxPGId GetFirstCategory () <span class="keyword">const</span>;
02169 
02170     wxPGId GetFirstProperty () <span class="keyword">const</span>;
02171 
02172     wxPropertyGrid* GetGrid ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pPropGrid; }
02173 
02174     wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02175 
02176     wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02177 
02178     <span class="keyword">static</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> );
02179 
02180     <span class="keyword">static</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> );
02181 
02182     wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02183 
02184     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name, wxPGPropertyWithChildren* parent  = (wxPGPropertyWithChildren*) NULL ) <span class="keyword">const</span>;
02185 
02186     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname, wxPGId baseparent, <span class="keywordtype">long</span> flags ) <span class="keyword">const</span>;
02187 
02189     wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* property );
02190 
02191     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDisplayed() <span class="keyword">const</span>;
02192 
02193     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsInNonCatMode()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">bool</span>)(m_properties == m_abcArray); }
02194 
02196     <span class="keywordtype">void</span> InitNonCatMode ();
02197 
02198     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGProperty* p, <span class="keywordtype">bool</span> limit = TRUE );
02199 
02200     <span class="keywordtype">void</span> SetPropertyLabel( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newlabel );
02201 
02202     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
02203 
02204     <span class="keywordtype">void</span> SetPropVal( wxPGProperty* p, wxPGVariant value );
02205 
02206     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
02207 
02208     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
02209 
02210     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; value );
02211 
02212     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxVariant&amp; value );
02213 
02214     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxObject* value );
02215 
<a name="l02217"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea36">02217</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">long</span> value )
02218     {
02219         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
02220     }
<a name="l02222"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea35">02222</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">int</span> value )
02223     {
02224         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
02225     }
<a name="l02227"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea34">02227</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">double</span> value )
02228     {
02229         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
02230     }
<a name="l02232"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea33">02232</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">bool</span> value )
02233     {
02234         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
02235     }
<a name="l02237"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea32">02237</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayString&amp; value )
02238     {
02239         SetPropertyValue ( p, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
02240     }
<a name="l02242"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea31">02242</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">void</span>* value )
02243     {
02244         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
02245     }
<a name="l02247"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea30">02247</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPoint&amp; value )
02248     {
02249         wxASSERT ( p );
02250         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),) == 0 );</span>
02251         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02252         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02253     }
<a name="l02255"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea29">02255</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxSize&amp; value )
02256     {
02257         wxASSERT ( p );
02258         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
02259         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02260         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02261     }
<a name="l02263"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea28">02263</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayInt&amp; value )
02264     {
02265         wxASSERT ( p );
02266         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
02267         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02268         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02269     }
02270     
02271     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category );
02272 
02273     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGProperty* p );
02274 
02275     <span class="keywordtype">void</span> Sort ( wxPGProperty* p );
02276     <span class="keywordtype">void</span> Sort ();
02277 
02278 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
02279 <span class="preprocessor"></span><span class="keyword">protected</span>:
02280 
02281     <span class="keywordtype">int</span> PrepareToAddItem ( wxPGProperty* property, wxPGPropertyWithChildren* scheduled_parent );
02282 
02284     wxPropertyGrid*             m_pPropGrid;
02285 
02287     wxPGPropertyWithChildren*   m_properties;
02288 
02290     wxPGRootPropertyClass           m_regularArray;
02291 
02293     wxPGRootPropertyClass*          m_abcArray;
02294 
02296     wxPGHashMapS2P                  m_dictName;
02297 
02299     wxPropertyCategoryClass*         m_currentCategory;
02300 
02302     wxPGProperty*               m_selected;
02303 
02305     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_lastCaptionBottomnest;
02310     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_itemsAdded;
02311 
02313     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_anyModified;
02314 
02315 <span class="preprocessor">#endif</span>
02316 <span class="preprocessor"></span>};
02317 
02318 <span class="comment">// -----------------------------------------------------------------------</span>
02319 
<a name="l02325"></a><a class="code" href="classwxPropertyContainerMethods.htm">02325</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyContainerMethods
02326 <span class="comment">// BM_METHODS</span>
02327 {
02328 <span class="keyword">public</span>:
02329 
02339     <span class="keywordtype">void</span> AddPropertyChoice( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
02340     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddPropertyChoice( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE )
02341     {
02342         AddPropertyChoice(GetPropertyByName(name),label,value);
02343     }
02344 
02350     <span class="keyword">static</span> wxPGProperty* CreatePropertyByClass(<span class="keyword">const</span> wxString &amp;classname,
02351                                                <span class="keyword">const</span> wxString &amp;label,
02352                                                <span class="keyword">const</span> wxString &amp;name);
02353 
02362     <span class="keyword">static</span> wxPGProperty* CreatePropertyByType(<span class="keyword">const</span> wxString &amp;valuetype,
02363                                               <span class="keyword">const</span> wxString &amp;label,
02364                                               <span class="keyword">const</span> wxString &amp;name);
02365 
<a name="l02367"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera46">02367</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
02368     {
02369         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
02370     }
02371     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
02372     {
02373         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
02374     }
02375 
02388     <span class="keyword">static</span> wxString GetPropertyAttributes( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> flagmask = 0xFFFF );
02389 
02394     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttributes( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; attributes );
02395 
02400     wxPGId GetPropertyByName( wxPGNameStr name ) <span class="keyword">const</span>;
02401 
02406     wxPGConstants&amp; GetPropertyChoices( wxPGId <span class="keywordtype">id</span> );
02407     <span class="keyword">inline</span> wxPGConstants&amp; GetPropertyChoices( wxPGNameStr name )
02408     {
02409         <span class="keywordflow">return</span> GetPropertyChoices(GetPropertyByName(name));
02410     }
02411 
<a name="l02413"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera61">02413</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02414 <span class="keyword">    </span>{
02415         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
02416     }
02417 
<a name="l02419"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera60">02419</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
02420 <span class="keyword">    </span>{
02421         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
02422     }
02423 
02424 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
02425 <span class="preprocessor"></span>
02426     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyClientData ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02427 <span class="keyword">    </span>{
02428         wxASSERT ( wxPGIdOk(<span class="keywordtype">id</span>) );
02429         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClientData();
02430     }
02432     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyClientData ( wxPGNameStr name )<span class="keyword"> const</span>
02433 <span class="keyword">    </span>{
02434         <span class="keywordflow">return</span> GetPropertyClientData(GetPropertyByName(name));
02435     }
02436 <span class="preprocessor">#endif</span>
02437 <span class="preprocessor"></span>
<a name="l02439"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera67">02439</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
02440     {
02441         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02442         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
02443     }
02444 
<a name="l02446"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera66">02446</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
02447     {
02448         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
02449     }
02450 
<a name="l02452"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera69">02452</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
02453     {
02454         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02455         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetLabel();
02456     }
02457     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
02458     {
02459         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
02460     }
02461 
<a name="l02463"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera70">02463</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyName ( wxPGId <span class="keywordtype">id</span> )
02464     {
02465         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02466         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetName();
02467     }
02468 
<a name="l02470"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera72">02470</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
02471     {
02472         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02473         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
02474     }
02475 
<a name="l02477"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera71">02477</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
02478     {
02479         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
02480     }
02481 
<a name="l02483"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera74">02483</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
02484     {
02485         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02486         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa37">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga2">wxPG_PROP_HIDEABLE</a>) )
02487             <span class="keywordflow">return</span> wxPG_LOW;
02488         <span class="keywordflow">return</span> wxPG_HIGH;
02489     }
02490 
<a name="l02492"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera73">02492</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority( wxPGNameStr name )
02493     {
02494         <span class="keywordflow">return</span> GetPropertyPriority(GetPropertyByNameWithAssert(name));
02495     }
02496 
<a name="l02498"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida85">02498</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02499 <span class="keyword">    </span>{
02500         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02501         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
02502     }
02503 
<a name="l02505"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida84">02505</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
02506 <span class="keyword">    </span>{
02507         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
02508     }
02509 
02514     <span class="keyword">static</span> wxString GetPropertyShortClassName( wxPGId <span class="keywordtype">id</span> );
02515 
02516 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
02517 <span class="preprocessor"></span>
02520     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGId <span class="keywordtype">id</span> )
02521     {
02522         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02523         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValidator();
02524     }
02525     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGNameStr name )
02526     {
02527         <span class="keywordflow">return</span> GetPropertyValidator(GetPropertyByName(name));
02528     }
02529 <span class="preprocessor">#endif</span>
02530 <span class="preprocessor"></span>
02534 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02535 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02536 #<span class="keywordflow">else</span>    
<a name="l02537"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera76">02537</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02538 #endif
02539     {
02540         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02541         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02542     }
02543 
02547 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02548 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGNameStr name )
02549 #<span class="keywordflow">else</span>    
<a name="l02550"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera75">02550</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
02551 #endif
02552     {
02553         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02554         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02555         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02556     }
02557 
02558     <span class="keyword">static</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> );
02559     <span class="keyword">static</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> );
02560     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(<span class="keywordtype">id</span>); }
02561     <span class="keyword">static</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> );
02562     <span class="keyword">static</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> );
02563     <span class="keyword">static</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> );
02564     <span class="keyword">static</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> );
02565     <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ( wxPGId <span class="keywordtype">id</span> );
02566     
02567     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )
02568     {
02569         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02570         wxASSERT ( p );
02571     
02572         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxPoint"</span>)) != 0 )
02573         {
02574             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxPoint"</span>));
02575             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)NULL);
02576         }
02577         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>()));
02578     }
02579 
02580     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )
02581     {
02582         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02583         wxASSERT ( p );
02584 
02585         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxSize"</span>)) != 0 )
02586         {
02587             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxSize"</span>));
02588             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)NULL);
02589         }
02590         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>()));
02591     }
02592 
02593     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )
02594     {
02595         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02596         wxASSERT ( p );
02597 
02598         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) != 0 )
02599         {
02600             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxArrayInt"</span>));
02601             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)NULL);
02602         }
02603         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>()));
02604     }
02605 
02606     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
02607 <span class="keyword">    </span>{
02608         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
02609     }
02610     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
02611 <span class="keyword">    </span>{
02612         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
02613     }
02614     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
02615 <span class="keyword">    </span>{
02616         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
02617     }
02618     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
02619 <span class="keyword">    </span>{
02620         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
02621     }
02622     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
02623 <span class="keyword">    </span>{
02624         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
02625     }
02626     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
02627 <span class="keyword">    </span>{
02628         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
02629     }
02630     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
02631 <span class="keyword">    </span>{
02632         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
02633     }
02634     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
02635 <span class="keyword">    </span>{
02636         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
02637     }
02638     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
02639 <span class="keyword">    </span>{
02640         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
02641     }
02642     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
02643 <span class="keyword">    </span>{
02644         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
02645     }
02646 
<a name="l02650"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera89">02650</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
02651     {
02652         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02653         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
02654     }
02655     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGNameStr name )
02656     {
02657         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
02658     }
02659 
02660     <span class="keyword">inline</span> wxPropertyGridState* GetState()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pState; }
02661 
02664     <span class="keyword">static</span> wxPGValueType* GetValueType( <span class="keyword">const</span> wxString &amp;type );
02665 
02666 <span class="preprocessor">#if wxPG_INCLUDE_ADVPROPS</span>
02667 <span class="preprocessor"></span>
02671     <span class="keyword">static</span> <span class="keywordtype">void</span> InitAllTypeHandlers ();
02672 <span class="preprocessor">#else</span>
02673 <span class="preprocessor"></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers () { }
02674 <span class="preprocessor">#endif</span>
02675 <span class="preprocessor"></span>
<a name="l02677"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera108">02677</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02678 <span class="keyword">    </span>{
02679         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetFlags() &amp; <a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>))?TRUE:FALSE;
02680     }
02681 
<a name="l02683"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera107">02683</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
02684 
<a name="l02686"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera117">02686</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
02687     {
02688         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02689         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
02690     }
02691 
<a name="l02693"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera116">02693</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* valuetype )
02694     {
02695         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02696         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
02697     }
02698 
<a name="l02700"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera115">02700</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
02701     {
02702         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
02703     }
02704 
<a name="l02706"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera114">02706</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
02707     {
02708         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
02709     }
02710 
<a name="l02712"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera113">02712</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxPGValueType* valuetype )
02713     {
02714         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),valuetype);
02715     }
02716 
<a name="l02718"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera112">02718</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxClassInfo* classinfo )
02719     {
02720         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),classinfo);
02721     }
02722 
02726     <span class="keyword">static</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> );
02727     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyExpanded(GetPropertyByName(name)); }
02728 
<a name="l02732"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera103">02732</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02733 <span class="keyword">    </span>{
02734         wxPGProperty* p = wxPGIdToPtr ( <span class="keywordtype">id</span> );
02735         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02736         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02737     }
02738 
02739     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsModified(GetPropertyByName(name)); }
02740 
<a name="l02742"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida135">02742</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02743 <span class="keyword">    </span>{
02744         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
02745     }
02746     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
02747 
<a name="l02751"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera111">02751</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02752 <span class="keyword">    </span>{
02753         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02754         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02755         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02756     }
02757     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyModified(GetPropertyByName(name)); }
02758 
<a name="l02761"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera119">02761</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02762 <span class="keyword">    </span>{
02763         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02764         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02765         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga5">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
02766     }
02767     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
02768 
02772     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterAdvancedPropertyClasses();
02773 
02777     <span class="keyword">static</span> <span class="keywordtype">bool</span> RegisterPropertyClass ( <span class="keyword">const</span> wxChar* name, <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>* classinfo );
02778 
02783     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice );
02784 
02787     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyChoices(wxPGId <span class="keywordtype">id</span>, wxPGConstants&amp; choices);
02788 
<a name="l02791"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera134">02791</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoices(wxPGNameStr name, wxPGConstants&amp; choices)
02792     {
02793         SetPropertyChoices(GetPropertyByName(name),choices);
02794     }
02795 
<a name="l02799"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera136">02799</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoicesPrivate( wxPGId <span class="keywordtype">id</span> )
02800     {
02801         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02802         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetChoicesPrivate();
02803     }
02804     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoicesPrivate( wxPGNameStr name )
02805     {
02806         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02807         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02808         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetChoicesPrivate();
02809     }
02810 
02822     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxVariant value, <span class="keywordtype">long</span> arg_flags = 0 );
02823     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
02824     {
02825         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
02826     }
02827 
02828 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
02829 <span class="preprocessor"></span>
02830     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyClientData ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* clientData )
02831     {
02832         wxASSERT ( wxPGIdOk(<span class="keywordtype">id</span>) );
02833         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetClientData();
02834     }
02836     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyClientData ( wxPGNameStr name, <span class="keywordtype">void</span>* clientData )
02837     {
02838         <span class="keywordflow">return</span> SetPropertyClientData(GetPropertyByName(name),clientData);
02839     }
02840 <span class="preprocessor">#endif</span>
02841 <span class="preprocessor"></span>
02842     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
02843     {
02844         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02845         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetHelpString(help_string);
02846     }
02847 
02848     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
02849     {
02850         SetPropertyHelpString(GetPropertyByName(name),help_string);
02851     }
02852 
02853 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
02854 <span class="preprocessor"></span>
02862     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValidator ( wxPGId <span class="keywordtype">id</span>, wxPropertyValidator&amp; validator )
02863     {
02864         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02865         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetValidator(validator);
02866     }
02867     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValidator ( wxPGNameStr name, wxPropertyValidator&amp; validator )
02868     {
02869         SetPropertyValidator(GetPropertyByName(name),validator);
02870     }
02871 <span class="preprocessor">#endif</span>
02872 <span class="preprocessor"></span>
02873 <span class="keyword">protected</span>:
02874 
02875     <span class="comment">//virtual void DrawItemAndChildren( wxPGProperty* p ) = 0;</span>
02876 
02877     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName( wxPGNameStr name ) <span class="keyword">const</span> = 0;
02878 
02879     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
02880 <span class="keyword">    </span>{
02881         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02882         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02883         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
02884     }
02885 
02886     <span class="comment">// Deriving classes must set this (it must be only or current page).</span>
02887     wxPropertyGridState*         m_pState;
02888 
02889 };
02890 
02891 <span class="comment">// -----------------------------------------------------------------------</span>
02892 
02893 <span class="comment">// Internal flags</span>
02894 <span class="preprocessor">#define wxPG_FL_INITIALIZED                 0x0001</span>
02895 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002 // Set when creating editor controls if it was clicked on.</span>
02896 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004</span>
02897 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_FOCUSED                     0x0008</span>
02898 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_CAPTURED              0x0010</span>
02899 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_INSIDE                0x0020</span>
02900 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_VALUE_MODIFIED              0x0040</span>
02901 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080 // don't clear background of m_wndPrimary</span>
02902 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100 // currently active editor uses custom image</span>
02903 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_HIDE_STATE                  0x0200 // set when hideable properties should be hidden</span>
02904 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLED                    0x0400</span>
02905 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ADDING_HIDEABLES            0x0800 // set when all added/inserted properties get hideable flag</span>
02906 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_NOSTATUSBARHELP             0x1000 // Disables showing help strings on statusbar.</span>
02907 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CREATEDSTATE                0x2000 // Marks that we created the state, so we have to destroy it too.</span>
02908 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLBAR_DETECTED          0x4000 // Set if scrollbar's existence was detected in last onresize.</span>
02909 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000 // Set if wxPGMan requires redrawing of description text box.</span>
02910 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SELECTED_IS_PAINT_FLEXIBLE  0x00010000 // Set if selected has flexible imagesize</span>
02911 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_IN_MANAGER                  0x00020000 // Set if contained in wxPropertyGridManager</span>
02912 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_GOOD_SIZE_SET               0x00040000 // Set after wxPropertyGrid is shown in its initial good size</span>
02913 <span class="preprocessor"></span>
02914 <span class="comment">// -----------------------------------------------------------------------</span>
02915 
02916 <span class="preprocessor">#define wxPG_USE_STATE  m_pState</span>
02917 <span class="preprocessor"></span>
<a name="l02977"></a><a class="code" href="classwxPropertyGrid.htm">02977</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGrid : <span class="keyword">public</span> wxScrolledWindow, <span class="keyword">public</span> wxPropertyContainerMethods
02978 {
02979     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
02980     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
02981 
02982         DECLARE_CLASS(wxPropertyGrid)
02983 
02984 <span class="keyword">public</span>:
02988     wxPropertyGrid();
02989 
02990 <span class="preprocessor">#ifdef SWIG</span>
02991 <span class="preprocessor"></span>    %pythonAppend wxPropertyGrid   <span class="stringliteral">"self._setOORInfo(self)"</span>
02992     %pythonAppend wxPropertyGrid() <span class="stringliteral">""</span>
02993 
02994     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
02995                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
02996                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
02997                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
02998                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
02999     %name(PrePropertyGrid) wxPropertyGrid();
03000 
03001 <span class="preprocessor">#else</span>
03002 <span class="preprocessor"></span>
03006     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03007                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03008                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03009                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03010                                 <span class="comment">//const wxValidator &amp;validator = wxDefaultValidator,</span>
03011                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03012 
03014     <span class="keyword">virtual</span> ~wxPropertyGrid();
03015 <span class="preprocessor">#endif</span>
03016 <span class="preprocessor"></span>
03028     wxPGId Append ( wxPGProperty* property );
03029 
03030     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a> )
03031     {
03032         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
03033     }
03034 
03035 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03036 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
03037     {
03038         <span class="keywordflow">return</span> Append ( wxStringProperty(label,name,value) );
03039     }
03040 
03041     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">int</span> value = 0 )
03042     {
03043         <span class="keywordflow">return</span> Append ( wxIntProperty(label,name,value) );
03044     }
03045 
03046     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">double</span> value = 0.0 )
03047     {
03048         <span class="keywordflow">return</span> Append ( wxFloatProperty(label,name,value) );
03049     }
03050 
03051     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">bool</span> value = FALSE )
03052     {
03053         <span class="keywordflow">return</span> Append ( wxBoolProperty(label,name,value) );
03054     }
03055 <span class="preprocessor">#endif</span>
03056 <span class="preprocessor"></span>
03057     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
03058     {
03059         <span class="keywordflow">return</span> Insert(<span class="keywordtype">id</span>,-1,property);
03060     }
03061 
03062     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, wxPGProperty* property )
03063     {
03064         <span class="keywordflow">return</span> Insert(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),-1,property);
03065     }
03066 
03067     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
03068     {
03069         <span class="keywordflow">return</span> m_pState-&gt;AppendIn( (wxPGPropertyWithChildren*)wxPGIdToPtr(<span class="keywordtype">id</span>), label, propname, value );
03070     }
03071 
03072     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
03073     {
03074         <span class="keywordflow">return</span> m_pState-&gt;AppendIn( (wxPGPropertyWithChildren*)wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)),
03075             label, propname, value );
03076     }
03077 
03083     <span class="keyword">static</span> <span class="keywordtype">void</span> AutoGetTranslation ( <span class="keywordtype">bool</span> enable );
03084 
03088     <span class="keywordtype">void</span> CenterSplitter ( <span class="keywordtype">bool</span> enable_auto_centering );
03089 
03094     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03095                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03096                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03097                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03098                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03099 
03103     <span class="keywordtype">void</span> Clear ();
03104 
<a name="l03107"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida16">03107</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> )
03108     {
03109         m_pState-&gt;ClearModifiedStatus(wxPGIdToPtr(<span class="keywordtype">id</span>));
03110     }
03111 
<a name="l03114"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida15">03114</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
03115     {
03116         m_pState-&gt;ClearModifiedStatus(m_pState-&gt;m_properties);
03117         m_pState-&gt;m_anyModified = FALSE;
03118     }
03119 
03121     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGId <span class="keywordtype">id</span> );
03122 
<a name="l03124"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida17">03124</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGNameStr name )
03125     {
03126         <span class="keywordflow">return</span> ClearPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03127     }
03128 
03130     <span class="keywordtype">void</span> ClearSelection ();
03131 
<a name="l03135"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida21">03135</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGId p ) { <span class="keywordflow">return</span> Collapse ( &amp;GetPropertyById(p)); }
03136 
<a name="l03140"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida20">03140</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name )
03141     {
03142         <span class="keywordflow">return</span> Collapse ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ) );
03143     }
03144 
<a name="l03147"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida22">03147</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll () { m_pState-&gt;ExpandAll(0); }
03148 
03150     <span class="keywordtype">void</span> Compact( <span class="keywordtype">bool</span> compact );
03151 
<a name="l03153"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida26">03153</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> )
03154     {
03155         Delete ( wxPGIdToPtr(<span class="keywordtype">id</span>) );
03156     }
03157 
<a name="l03159"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida25">03159</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGNameStr name )
03160     {
03161         Delete ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ) );
03162     }
03163 
<a name="l03165"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida28">03165</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
03166 
<a name="l03168"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida27">03168</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
03169 
<a name="l03171"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida30">03171</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
03172 
<a name="l03174"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida29">03174</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
03175 
03177     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
03178 
03180     <span class="comment">/*inline bool Enable ( wxPGId id, bool enable = TRUE )</span>
03181 <span class="comment">    {</span>
03182 <span class="comment">        return EnableProperty ( id, enable );</span>
03183 <span class="comment">    }*/</span>
03184 
03186     <span class="comment">/*inline bool Enable ( wxPGNameStr name, bool enable = TRUE )</span>
03187 <span class="comment">    {</span>
03188 <span class="comment">        return EnableProperty ( name, enable );</span>
03189 <span class="comment">    }*/</span>
03190 
03192     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
03193 
<a name="l03195"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida32">03195</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
03196     {
03197         <span class="keywordflow">return</span> EnableProperty ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), enable );
03198     }
03199 
03203     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> );
03204 
<a name="l03208"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida34">03208</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name ) 
03209     {
03210         <span class="keywordflow">return</span> EnsureVisible ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03211     }
03212 
<a name="l03216"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida37">03216</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> Expand ( &amp;GetPropertyById(<span class="keywordtype">id</span>) ); }
03217 
<a name="l03221"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida36">03221</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGNameStr name )
03222     {
03223         <span class="keywordflow">return</span> Expand ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ) );
03224     }
03225 
<a name="l03228"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida38">03228</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ExpandAll () { m_pState-&gt;ExpandAll(1); }
03229 
<a name="l03238"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida107">03238</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
03239         wxPGId baseparent = wxPGIdGen((wxPGProperty*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
03240 <span class="keyword">    </span>{
03241         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyValues(listname,baseparent,flags);
03242     }
03243 
03244     <span class="keyword">inline</span> wxFont* GetCaptionFont() { <span class="keywordflow">return</span> &amp;m_captionFont; }
03245 
<a name="l03247"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida40">03247</a>     <span class="keyword">inline</span> wxColour GetCaptionBackroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapBack; }
03248 
<a name="l03250"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida42">03250</a>     <span class="keyword">inline</span> wxColour GetCaptionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapFore; }
03251 
<a name="l03253"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida43">03253</a>     <span class="keyword">inline</span> wxColour GetCellBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropBack; }
03254 
<a name="l03256"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida44">03256</a>     <span class="keyword">inline</span> wxColour GetCellTextColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropFore; }
03257 
<a name="l03260"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida47">03260</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
03261     {
03262         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_pState-&gt;m_properties) );
03263     }
03264 
<a name="l03266"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida46">03266</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03267 <span class="keyword">    </span>{
03268         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03269         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetChildCount();
03270     }
03271 
<a name="l03273"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida45">03273</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
03274 
<a name="l03276"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida48">03276</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
03277 <span class="keyword">    </span>{
03278         <span class="keywordflow">return</span> m_pState-&gt;GetFirst();
03279     }
03280 
<a name="l03286"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida53">03286</a>     <span class="keyword">inline</span> wxPGId GetFirstVisible ()<span class="keyword"> const</span>
03287 <span class="keyword">    </span>{
03288         wxPGProperty* p = NULL;
03289         <span class="keywordflow">if</span> ( m_pState-&gt;m_properties-&gt;GetCount() )
03290         {
03291             p = m_pState-&gt;m_properties-&gt;Item(0);
03292             <span class="keywordflow">if</span> ( (m_iFlags &amp; wxPG_FL_HIDE_STATE) &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassp6">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga2">wxPG_PROP_HIDEABLE</a> )
03293                 p = GetNeighbourItem ( p, TRUE, 1 );
03294         }
03295         <span class="keywordflow">return</span> wxPGIdGen(p);
03296     }
03297 
<a name="l03299"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida54">03299</a>     <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
03300 
<a name="l03304"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida55">03304</a>     wxPropertyGrid* GetGrid() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }
03305 
<a name="l03307"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida49">03307</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
03308 <span class="keyword">    </span>{
03309         <span class="keywordflow">return</span> m_pState-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida49">GetFirstCategory</a> ();
03310     }
03311 
<a name="l03316"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida51">03316</a>     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGId parent )
03317     {
03318         wxASSERT ( wxPGIdIsOk(parent) );
03319         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
03320         <span class="keywordflow">if</span> ( p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>()==0 || p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>()==-1 || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa14">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
03321         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa41">Item</a>(0));
03322     }
03323     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetFirstChild( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
03324 
<a name="l03326"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida52">03326</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()
03327     {
03328         <span class="keywordflow">return</span> m_pState-&gt;GetFirstProperty();
03329     }
03330 
03334     wxSize GetImageSize ( wxPGId <span class="keywordtype">id</span> = wxPGIdGen((wxPGProperty*)NULL) ) <span class="keyword">const</span>;
03335 
<a name="l03339"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida58">03339</a>     wxPGId GetItemAtY ( <span class="keywordtype">int</span> y ) { <span class="keywordflow">return</span> wxPGIdGen(DoGetItemAtY(y)); }
03340 
<a name="l03343"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida61">03343</a>     <span class="keyword">inline</span> wxPGId GetLastProperty ()
03344     {
03345         <span class="keywordflow">if</span> ( !m_pState-&gt;m_properties-&gt;GetCount() ) <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
03346         wxPGProperty* p = GetLastItem (FALSE, FALSE);
03347         <span class="keywordflow">if</span> ( p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>() &gt; 0 )
03348             <span class="keywordflow">return</span> GetPrevProperty ( wxPGIdGen(p) );
03349         <span class="keywordflow">return</span> wxPGIdGen(p);
03350     }
03351 
<a name="l03356"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida60">03356</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
03357     {
03358         wxASSERT ( wxPGIdIsOk(parent) );
03359         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
03360         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa14">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
03361         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa42">Last</a>());
03362     }
03363     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
03364 
<a name="l03367"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida62">03367</a>     <span class="keyword">inline</span> wxPGId GetLastVisible ()
03368     {
03369         <span class="keywordflow">return</span> wxPGIdGen ( GetLastItem (TRUE, TRUE) );
03370     }
03371 
<a name="l03373"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida63">03373</a>     <span class="keyword">inline</span> wxColour GetLineColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colLine; }
03374 
<a name="l03376"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida64">03376</a>     <span class="keyword">inline</span> wxColour GetMarginColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colMargin; }
03377 
<a name="l03381"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida66">03381</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )
03382     {
03383         <span class="keywordflow">return</span> m_pState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
03384     }
03385 
<a name="l03387"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida65">03387</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03388 <span class="keyword">    </span>{
03389         <span class="keywordflow">return</span> m_pState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
03390     }
03391 
<a name="l03397"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida69">03397</a>     <span class="keyword">inline</span> wxPGId GetNextVisible ( wxPGId property )<span class="keyword"> const</span>
03398 <span class="keyword">    </span>{
03399         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
03400             TRUE, 1 ) );
03401     }
03402 
<a name="l03406"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida70">03406</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )
03407     {
03408         <span class="keywordflow">return</span> m_pState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
03409     }
03410 
<a name="l03412"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida72">03412</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
03413     {
03414         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
03415     }
03416     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
03417     {
03418         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
03419     }
03420 
<a name="l03423"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida73">03423</a>     <span class="keyword">inline</span> wxPGId GetPrevVisible ( wxPGId property )
03424     {
03425         wxASSERT ( wxPGIdIsOk(property) );
03426         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
03427             TRUE, -1 ) );
03428     }
03429 
<a name="l03433"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida77">03433</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03434 <span class="keyword">    </span>{
03435         <span class="keywordflow">return</span> wxPGIdGen ( GetPropertyCategory ( wxPGIdToPtr(<span class="keywordtype">id</span>) ) );
03436     }
03437     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGNameStr name )
03438     {
03439         <span class="keywordflow">return</span> GetPropertyCategory ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03440     }
03441 
03443     wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
03444     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
03445 <span class="keyword">    </span>{
03446         <span class="keywordflow">return</span> GetPropertyColour(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
03447     }
03448     
<a name="l03454"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida74">03454</a>     <span class="keyword">inline</span> wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name )<span class="keyword"> const</span>
03455 <span class="keyword">    </span>{
03456         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByLabel(name);
03457     }
03458 
<a name="l03462"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida110">03462</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_pState-&gt;m_properties); }
03463 
<a name="l03465"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida111">03465</a>     <span class="keywordtype">int</span> GetRowHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_lineHeight; }
03466 
03467     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GetSelection(); }
03468 
<a name="l03470"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida113">03470</a>     <span class="keyword">inline</span> wxPGId GetSelection ()<span class="keyword"> const</span>
03471 <span class="keyword">    </span>{
03472         <span class="keywordflow">return</span> wxPGIdGen(m_selected);
03473     }
03474 
<a name="l03476"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida114">03476</a>     <span class="keyword">inline</span> wxColour GetSelectionBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelBack; }
03477 
<a name="l03479"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida115">03479</a>     <span class="keyword">inline</span> wxColour GetSelectionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelFore; }
03480 
<a name="l03482"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida116">03482</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSplitterPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_splitterx; }
03483 
03487     <span class="comment">//wxPropertyGridState* GetCopyOfState() const;</span>
03488 
<a name="l03490"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida118">03490</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetVerticalSpacing ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)m_vspacing; }
03491 
<a name="l03493"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida119">03493</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((m_selected!=(wxPGProperty*)NULL)?TRUE:FALSE); }
03494 
<a name="l03496"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida120">03496</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideLowPriority() { Compact ( TRUE ); }
03497 
<a name="l03548"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida128">03548</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId priorthis, wxPGProperty* newproperty )
03549     {
03550         wxPGId res = Insert ( wxPGIdToPtr( priorthis ), newproperty );
03551         DrawItems ( newproperty, (wxPGProperty*) NULL );
03552         <span class="keywordflow">return</span> res;
03553     }
<a name="l03555"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida127">03555</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, wxPGProperty* newproperty )
03556     {
03557         wxPGId res = Insert ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ), newproperty );
03558         DrawItems ( newproperty, (wxPGProperty*) NULL );
03559         <span class="keywordflow">return</span> res;
03560     }
03561 
<a name="l03563"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida126">03563</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03564     {
03565         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr (<span class="keywordtype">id</span>), index, newproperty );
03566         DrawItems ( newproperty, (wxPGProperty*) NULL );
03567         <span class="keywordflow">return</span> res;
03568     }
03569 
<a name="l03571"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida125">03571</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03572     {
03573         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ), index, newproperty );
03574         DrawItems ( newproperty, (wxPGProperty*) NULL );
03575         <span class="keywordflow">return</span> res;
03576     }
03577 
03578     <span class="keyword">inline</span> wxPGId InsertCategory ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
03579     {
03580         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
03581     }
03582 
03583 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03584 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
03585     {
03586         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxStringProperty(label,name,value) );
03587     }
03588 
03589     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
03590     {
03591         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxIntProperty(label,name,value) );
03592     }
03593 
03594     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
03595     {
03596         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxFloatProperty(label,name,value) );
03597     }
03598 
03599     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
03600     {
03601         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxBoolProperty(label,name,value) );
03602     }
03603 <span class="preprocessor">#endif</span>
03604 <span class="preprocessor"></span>
<a name="l03606"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida130">03606</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsAnyModified ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pState-&gt;m_anyModified&gt;0); }
03607 
<a name="l03609"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida131">03609</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_frozen&gt;0)?TRUE:FALSE; }
03610 
<a name="l03612"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida142">03612</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03613 <span class="keyword">    </span>{
03614         <span class="keywordflow">return</span> ( m_selected == wxPGIdToPtr( <span class="keywordtype">id</span> ) ) ? TRUE : FALSE;
03615     }
03616 
<a name="l03618"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida141">03618</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertySelected(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)); }
03619 
03623     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
03624 
<a name="l03628"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida151">03628</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE )
03629     {
03630         LimitPropertyEditing(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),limit);
03631     }
03632 
03634     <span class="comment">//void RedrawAllVisible ();</span>
03635 
03642     <span class="keyword">static</span> wxPGValueType* RegisterValueType ( wxPGValueType* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03643 
03648     <span class="keyword">static</span> wxPGEditor* RegisterEditorClass ( wxPGEditor* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03649 
03652     <span class="keywordtype">void</span> ResetColours();
03653 
<a name="l03656"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida164">03656</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
03657     {
03658         wxPropertyCategoryClass* pc = (wxPropertyCategoryClass*)wxPGIdToPtr(<span class="keywordtype">id</span>);
03659 <span class="preprocessor">#ifdef __WXDEBUG__</span>
03660 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>() &gt; 0 );
03661 <span class="preprocessor">#endif</span>
03662 <span class="preprocessor"></span>        m_pState-&gt;m_currentCategory = pc;
03663     }
03664 
<a name="l03667"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida163">03667</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name = wxEmptyString )
03668     {
03669         SetCurrentCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
03670     }
03671 
03673     <span class="comment">//virtual bool SetBackgroundColour(const wxColour&amp; col);</span>
03674 
03678     <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col );
03679     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
03680     {
03681         SetPropertyColour ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), col );
03682     }
03683 
<a name="l03685"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida175">03685</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
03686     {
03687         SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
03688     }
03689     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
03690     {
03691         SetColourIndex ( wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)), 0 );
03692     }
03693 
03695     <span class="keywordtype">void</span> SetCaptionBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03696 
03698     <span class="keywordtype">void</span> SetCaptionForegroundColour(<span class="keyword">const</span> wxColour&amp; col);
03699 
03703     <span class="keywordtype">void</span> SetCellBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03704 
03708     <span class="keywordtype">void</span> SetCellTextColour(<span class="keyword">const</span> wxColour&amp; col);
03709 
03711     <span class="keywordtype">void</span> SetLineColour(<span class="keyword">const</span> wxColour&amp; col);
03712 
03714     <span class="keywordtype">void</span> SetMarginColour(<span class="keyword">const</span> wxColour&amp; col);
03715 
03717     <span class="keywordtype">void</span> SetSelectionBackground(<span class="keyword">const</span> wxColour&amp; col);
03718 
03720     <span class="keywordtype">void</span> SetSelectionForeground(<span class="keyword">const</span> wxColour&amp; col);
03721 
03723     <span class="keywordtype">void</span> SetSplitterPosition ( <span class="keywordtype">int</span> newxpos, <span class="keywordtype">bool</span> refresh = TRUE );
03724 
<a name="l03731"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida157">03731</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE )
03732     {
03733         SelectProperty(wxPGIdToPtr(<span class="keywordtype">id</span>),focus);
03734     }
03735     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
03736     {
03737         SelectProperty(wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)),focus);
03738     }
03739 
03743     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
03744 
<a name="l03748"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida182">03748</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority )
03749     {
03750         SetPropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),priority);
03751     }
03752 
03755     <span class="keywordtype">void</span> SwitchState ( wxPropertyGridState* pNewState );
03756 
<a name="l03762"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida179">03762</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newproplabel )
03763     {
03764         wxPGProperty* p = &amp;GetPropertyById( <span class="keywordtype">id</span> );
03765         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03766     }
<a name="l03772"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida178">03772</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newproplabel )
03773     {
03774         wxPGProperty* p = wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03775         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03776     }
03777 
<a name="l03787"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida181">03787</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newname )
03788     {
03789         DoSetPropertyName ( wxPGIdToPtr(<span class="keywordtype">id</span>), newname );
03790     }
<a name="l03800"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida180">03800</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newname )
03801     {
03802         DoSetPropertyName ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ), newname );
03803     }
03804 
<a name="l03806"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida212">03806</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value )
03807     {
03808         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03809     }
<a name="l03811"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida211">03811</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value )
03812     {
03813         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
03814     }
<a name="l03816"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida210">03816</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value )
03817     {
03818         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03819     }
<a name="l03821"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida209">03821</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value )
03822     {
03823         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03824     }
03825 
03832     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
03833 
03834     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
03835     {
03836         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
03837     }
03838 
<a name="l03840"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida206">03840</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value )
03841     {
03842         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03843     }
<a name="l03845"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida205">03845</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value )
03846     {
03847         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03848     }
03850     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
03851     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
03852     {
03853         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
03854     }
03855 
03857     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
03858 
<a name="l03860"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida201">03860</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPoint&amp; value )
03861     {
03862         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03863         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxPoint")) == 0 );</span>
03864         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03865     }
<a name="l03867"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida200">03867</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxSize&amp; value )
03868     {
03869         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03870         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
03871         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03872     }
<a name="l03874"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida199">03874</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayInt&amp; value )
03875     {
03876         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
03877         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03878         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03879     }
03880 
<a name="l03882"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida198">03882</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value )
03883     {
03884         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03885     }
<a name="l03887"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida197">03887</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value )
03888     {
03889         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03890     }
<a name="l03892"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida196">03892</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value )
03893     {
03894         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03895     }
<a name="l03897"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida195">03897</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value )
03898     {
03899         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03900     }
<a name="l03904"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida194">03904</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value )
03905     {
03906         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
03907     }
<a name="l03911"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida193">03911</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
03912     {
03913         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxString(value) );
03914     }
<a name="l03916"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida192">03916</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value )
03917     {
03918         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03919     }
<a name="l03921"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida191">03921</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value )
03922     {
03923         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03924     }
<a name="l03926"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida190">03926</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value )
03927     {
03928         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
03929     }
03930     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
03931     {
03932         SetPropertyValue(name,&amp;value);
03933     }
<a name="l03935"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida188">03935</a>     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value )
03936     {
03937         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
03938     }
<a name="l03940"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida187">03940</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxPoint&amp; value )
03941     {
03942         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
03943     }
<a name="l03945"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida186">03945</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxSize&amp; value )
03946     {
03947         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
03948     }
<a name="l03950"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida185">03950</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayInt&amp; value )
03951     {
03952         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
03953     }
03954 
03958     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
03959     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyUnspecified ( wxPGNameStr name )
03960     {
03961         SetPropertyValueUnspecified ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03962     }
03963 
<a name="l03968"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida216">03968</a>     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
03969     {
03970         m_pState-&gt;SetPropertyValues(list,default_category);
03971     }
03972 
03973     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
03974     {
03975         SetPropertyValues (list.GetList(),default_category);
03976     }
03977     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
03978     {
03979         SetPropertyValues (list,<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
03980     }
03981     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
03982     {
03983         SetPropertyValues (list.GetList(),<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
03984     }
03985 
<a name="l03992"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida221">03992</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetVerticalSpacing ( <span class="keywordtype">int</span> vspacing )
03993     {
03994         m_vspacing = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)vspacing;
03995         CalculateFontAndBitmapStuff ( vspacing );
03996         <span class="keywordflow">if</span> ( !m_pState-&gt;m_itemsAdded ) Refresh();
03997     }
03998 
<a name="l04000"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida223">04000</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowLowPriority() { Compact ( FALSE ); }
04001 
<a name="l04003"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida225">04003</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowPropertyError( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; msg ) 
04004     {
04005         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04006         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;ShowError(msg);
04007     }
04008     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowPropertyError( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; msg ) 
04009     {
04010         ShowPropertyError (<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), msg);
04011     }
04012 
04014     <span class="keywordtype">void</span> Sort ();
04015 
04018     <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> );
04019 
<a name="l04022"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida226">04022</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
04023     {
04024         Sort ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
04025     }
04026 
04030     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag( <span class="keywordtype">long</span> style );
04031 
<a name="l04036"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida165">04036</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
04037     {
04038         <span class="keywordflow">if</span> ( priority == wxPG_LOW )
04039             m_iFlags |= wxPG_FL_ADDING_HIDEABLES;
04040         <span class="keywordflow">else</span>
04041             m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES);
04042     }
04043 
<a name="l04046"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida231">04046</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
04047     {
04048         <span class="keywordtype">int</span> priority = wxPG_LOW;
04049         <span class="keywordflow">if</span> ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera74">GetPropertyPriority</a>(<span class="keywordtype">id</span>) == wxPG_LOW )
04050             priority = wxPG_HIGH;
04051         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
04052     }
04053 
<a name="l04056"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida230">04056</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
04057     {
04058         TogglePropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
04059     }
04060 
<a name="l04062"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida155">04062</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
04063     {
04064         SetDefaultPriority(wxPG_HIGH);
04065     }
04066 
<a name="l04075"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_0">04075</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
<a name="l04077"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_1">04077</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasNotModified() { m_iFlags &amp;= ~(wxPG_FL_VALUE_MODIFIED); }
<a name="l04083"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_8">04083</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsEditorsValueModified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>  ( m_iFlags &amp; wxPG_FL_VALUE_MODIFIED ) ? TRUE : FALSE; }
04084     wxPGCtrlClass* GenerateEditorButton ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
04099     wxPGCtrlClass* GenerateEditorTextCtrl ( <span class="keyword">const</span> wxPoint&amp; pos,
04100         <span class="keyword">const</span> wxSize&amp; sz, <span class="keyword">const</span> wxString&amp; value, wxPGCtrlClass* secondary,
04101         <span class="keyword">const</span> wxSize&amp; imsz = wxDefaultSize );
04102 
04103     <span class="comment">/* Generates both textctrl and button.</span>
04104 <span class="comment">    */</span>
04105     wxPGCtrlClass* GenerateEditorTextCtrlAndButton( <span class="keyword">const</span> wxPoint&amp; pos,
04106         <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary, <span class="keywordtype">int</span> limited_editing,
04107         wxPGProperty* property );
04108 
04117     wxPoint GetGoodEditorDialogPosition ( wxPGProperty* p,
04118         <span class="keyword">const</span> wxSize&amp; sz );
04119 
04120     <span class="comment">// Converts escape sequences in src_str to newlines,</span>
04121     <span class="comment">// tabs, etc. and copies result to dst_str.</span>
04122     <span class="keyword">static</span> wxString&amp; ExpandEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
04123 
04124     <span class="comment">// Converts newlines, tabs, etc. in src_str to escape</span>
04125     <span class="comment">// sequences, and copies result to dst_str.</span>
04126     <span class="keyword">static</span> wxString&amp; CreateEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
04127 
<a name="l04130"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_7">04130</a>     <span class="keyword">inline</span> wxPGCtrlClass* GetPrimaryEditor()<span class="keyword"> const</span>
04131 <span class="keyword">    </span>{
04132         <span class="keywordflow">return</span> m_wndPrimary;
04133     }
04134 
04140     <span class="keyword">static</span> <span class="keywordtype">void</span> ArrayStringToString ( wxString&amp; dst, <span class="keyword">const</span> wxArrayString&amp; src,
04141                                       wxChar preDelim, wxChar postDelim,
04142                                       <span class="keywordtype">int</span> flags );
04143 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04144 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxCustomControlManager* GetCCManager() { <span class="keywordflow">return</span> &amp;m_ccManager; }
04145 <span class="preprocessor">#endif</span>
04146 <span class="preprocessor"></span>
04149     <span class="keywordtype">void</span> OnCustomEditorEvent ( wxEvent &amp;event );
04151     <span class="keywordtype">void</span> SLAlloc ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount, <span class="keyword">const</span> wxChar** items );
<a name="l04153"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_11">04153</a>     <span class="keyword">inline</span> wxArrayString&amp; SLGet () { <span class="keywordflow">return</span> m_sl; }
04155 
04156     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetInternalFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_iFlags; }
04157     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearInternalFlag ( <span class="keywordtype">long</span> flag ) { m_iFlags &amp;= ~(flag); }
04158     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBottomY ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_bottomy; }
04159     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetBottomY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y ) { m_bottomy = y; }
04160 
04163     <span class="keywordtype">void</span> PropertyWasModified ( wxPGProperty* p );
04164 
04165     <span class="comment">//wxArrayPtrVoid* GetCatArray () { return &amp;m_pState-&gt;m_catArray; }</span>
04166 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04167 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnComboItemPaint (wxOwnerDrawnComboBox* pCb,<span class="keywordtype">int</span> item,wxDC&amp; dc,
04168                            wxRect&amp; rect,<span class="keywordtype">int</span> flags );
04169 <span class="preprocessor">#endif</span>
04170 <span class="preprocessor"></span>
04171     <span class="keyword">static</span> wxPGConstants* AddConstantsArray(<span class="keyword">const</span> wxChar** labels,
04172                                             <span class="keyword">const</span> <span class="keywordtype">long</span>* values,
04173                                             <span class="keywordtype">int</span> itemcount);
04174     <span class="keyword">static</span> wxPGConstants* AddConstantsArray(<span class="keyword">const</span> wxArrayString&amp; labels,
04175                                             <span class="keyword">const</span> wxArrayInt&amp; values,
04176                                             <span class="keywordtype">bool</span> acceptLabelsAsId);
04177     <span class="keyword">static</span> wxPGConstants* AddConstantsArray(wxPGConstants&amp; constants);
04178 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04179 <span class="preprocessor"></span>    <span class="comment">// Displays what dynamic arrays are allocated</span>
04180     <span class="keyword">static</span> <span class="keywordtype">void</span> DumpAllocatedChoiceSets();
04181 <span class="preprocessor">#endif</span>
04182 <span class="preprocessor"></span>
04185     <span class="keyword">static</span> wxPGConstants* CreateConstantsArray(size_t <span class="keywordtype">id</span>);
04186 
04190     <span class="keyword">static</span> wxPGConstants* GetConstantsArray(size_t <span class="keywordtype">id</span>);
04191 
04194     <span class="keyword">static</span> <span class="keywordtype">void</span> DoubleToString(wxString&amp; target,
04195                                <span class="keywordtype">double</span> value,
04196                                <span class="keywordtype">int</span> precision,
04197                                <span class="keywordtype">bool</span> removeZeroes,
04198                                wxString* precTemplate);
04199 
04200 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
04201 <span class="preprocessor"></span><span class="comment">// Simple way to make doxygen skip protected members</span>
04202 <span class="comment">// Used wx/window.h include guard because had trouble</span>
04203 <span class="comment">// getting doxygen definitions work.</span>
04204 
04205     <span class="comment">//</span>
04206     <span class="comment">// Overridden functions - no documentation required.</span>
04207     <span class="comment">//</span>
04208 
04209     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
04210 
04211     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refresh( <span class="keywordtype">bool</span> eraseBackground = <span class="keyword">true</span>,
04212                           <span class="keyword">const</span> wxRect *rect = (<span class="keyword">const</span> wxRect *) NULL );
04213 
04214     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
04215 
04216     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
04217 
04218     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
04219 
04220     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
04221 
04222 <span class="keyword">protected</span>:
04223 
04225     <span class="comment">//wxPropertyGridState         m_state;</span>
04226     <span class="comment">//wxPropertyGridState*         m_pState;</span>
04227 
04232     <span class="comment">//unsigned char               m_itemsAdded;</span>
04233 
04235     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_processingEvent;
04236 
04237 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
04238 <span class="preprocessor"></span>        wxBitmap            *m_expandbmp, *m_collbmp;
04239 <span class="preprocessor">#endif</span>
04240 <span class="preprocessor"></span>
04241     wxCursor            *m_cursor_sizewe;
04242 
04244     wxPGCtrlClass       *m_wndPrimary;
04245     wxPGCtrlClass       *m_wndSecondary;
04246 
04247 <span class="preprocessor">#if wxPG_DOUBLE_BUFFER</span>
04248 <span class="preprocessor"></span>    wxBitmap            *m_doubleBuffer;
04249 <span class="preprocessor">#endif</span>
04250 <span class="preprocessor"></span>
04253     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_bottomy;
04254 
04256         <span class="keywordtype">int</span>                 m_spacingy;
04257 
04259     <span class="keywordtype">int</span>                 m_width;
04260 
04262     <span class="keywordtype">int</span>                 m_height;
04263 
04265     wxPGArrayProperty   m_arrVisible;
04266 
04268     <span class="keywordtype">int</span>                 m_prevVY;
04269 
04271     <span class="keywordtype">int</span>                 m_calcVisHeight;
04272 
04275         <span class="keywordtype">int</span>                 m_gutterwidth;
04276 
04278     <span class="keywordtype">int</span>                 m_lineHeight;
04279 
04282     <span class="keywordtype">int</span>                 m_marginwidth;
04283 
04284     <span class="keywordtype">int</span>                 m_buttonSpacingY; <span class="comment">// y spacing for expand/collapse button.</span>
04285 
04287     <span class="keywordtype">int</span>                 m_subgroup_extramargin;
04288 
04290         <span class="keywordtype">int</span>                 m_iconwidth;
04291 
04292 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
04293 <span class="preprocessor"></span>
04295         <span class="keywordtype">int</span>                 m_iconheight;
04296 <span class="preprocessor">#endif</span>
04297 <span class="preprocessor"></span>
04299     <span class="keywordtype">int</span>                 m_curcursor;
04300 
04303         wxFont              m_captionFont;
04304 
04305 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
04306 <span class="preprocessor"></span>
04307     wxArrayPtrVoid              m_catArray;
04308 <span class="preprocessor">#endif</span>
04309 <span class="preprocessor"></span>
04310 <span class="preprocessor">#if !wxPG_HEAVY_GFX</span>
04311 <span class="preprocessor"></span>    <span class="keywordtype">int</span>                 m_splitterprevdrawnx;
04312 
04314     wxPen               m_splitterpen;
04315 
04316 <span class="preprocessor">#endif</span>
04317 <span class="preprocessor"></span>
04318         <span class="keywordtype">int</span>                 m_fontHeight;  <span class="comment">// height of the font</span>
04319     
04320     <span class="comment">// Most recently added category.</span>
04321     <span class="comment">//wxPGPropertyWithChildren*   m_currentCategory;</span>
04322 
04323     <span class="comment">//</span>
04324     <span class="comment">// Temporary values</span>
04325     <span class="comment">//</span>
04326 
04328     <span class="keywordtype">int</span>                 m_startingSplitterX;
04329 
04331     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_dragStatus;
04332 
04334     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>         m_dragOffset;
04335 
04337     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_mouseSide;
04338 
04340     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_editorFocused;
04341 
04343     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_coloursCustomized;
04344 
04346     <span class="comment">//unsigned char       m_lastCaptionBottomnest;</span>
04347 
04349     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_frozen;
04350 
04351     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_vspacing;
04352 
04354     wxUint32            m_iFlags;
04355 
04357     <span class="keywordtype">int</span>                 m_clearThisMany;
04358     
04363     wxPGProperty*       m_selected;
04364 
04365     wxPGProperty*       m_propHover;    <span class="comment">// pointer to property that has mouse on itself</span>
04366 
04367     <span class="keywordtype">int</span>                 m_splitterx; <span class="comment">// x position for the vertical line dividing name and value</span>
04368 
04369 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04370 <span class="preprocessor"></span>            
04371     <span class="keywordtype">int</span>                 m_ctrlXAdjust; <span class="comment">// x relative to splitter (needed for resize).</span>
04372 <span class="preprocessor">#endif</span>
04373 <span class="preprocessor"></span>
04374     wxColour            m_colLine;     <span class="comment">// lines between cells</span>
04375     wxColour            m_colPropFore; <span class="comment">// property names and texts are written in this color</span>
04376     wxColour            m_colPropBack; <span class="comment">// background for m_colPropFore</span>
04377     wxColour            m_colCapFore;  <span class="comment">// text color for captions</span>
04378     wxColour            m_colCapBack;  <span class="comment">// background color for captions</span>
04379     wxColour            m_colSelFore;  <span class="comment">// foreground for selected property</span>
04380     wxColour            m_colSelBack;  <span class="comment">// background for selected property (actually use background color when control out-of-focus)</span>
04381     wxColour            m_colMargin;   <span class="comment">// background colour for margin</span>
04382 
04383     wxArrayPtrVoid      m_arrBgBrushes; <span class="comment">// Array of background colour brushes.</span>
04384 
04385 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04386 <span class="preprocessor"></span>    wxCustomControlManager  m_ccManager;
04387 <span class="preprocessor">#endif</span>
04388 <span class="preprocessor"></span>
04389     wxArrayString       m_sl;           <span class="comment">// string control helper</span>
04390 
04391 <span class="keyword">protected</span>:
04392 
04393     <span class="comment">// Sets some members to defaults.</span>
04394         <span class="keywordtype">void</span> Init1();
04395 
04396     <span class="comment">// Initializes some members.</span>
04397         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
04398 
04399         <span class="keywordtype">void</span> OnPaint (wxPaintEvent &amp;event );
04400 
04401     <span class="comment">// main event receivers</span>
04402 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04403 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseEvent ( wxMouseEvent &amp;event );
04404 <span class="preprocessor">#else</span>
04405 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
04406     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
04407     <span class="keywordtype">void</span> OnMouseRightClick ( wxMouseEvent &amp;event );
04408     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
04409 <span class="preprocessor">#endif</span>
04410 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnKey ( wxKeyEvent &amp;event );
04411     <span class="keywordtype">void</span> OnResize ( wxSizeEvent &amp;event );
04412     <span class="comment">//virtual void OnSize ( wxSizeEvent &amp;event );</span>
04413 
04414     <span class="comment">// event handlers</span>
04415     <span class="keywordtype">bool</span> HandleMouseMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04416     <span class="keywordtype">bool</span> HandleMouseClick ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04417     <span class="keywordtype">bool</span> HandleMouseRightClick( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04418     <span class="keywordtype">bool</span> HandleMouseUp ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04419     <span class="keywordtype">void</span> HandleKeyEvent( wxKeyEvent &amp;event );
04420     <span class="keywordtype">bool</span> HandleChildKey ( wxKeyEvent&amp; event ); <span class="comment">// Handle TAB and ESCAPE in control</span>
04421     
04422     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
04423 
04424     <span class="keywordtype">void</span> OnSetFocus ( wxFocusEvent &amp;event );
04425     <span class="keywordtype">void</span> OnKillFocus ( wxFocusEvent &amp;event );
04426 
04427 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04428 <span class="preprocessor"></span>
04429     <span class="keywordtype">bool</span> OnMouseCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04430     <span class="keywordtype">bool</span> OnMouseChildCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04431 
04432     <span class="comment">// sub-control event handlers</span>
04433     <span class="keywordtype">void</span> OnMouseEntryChild ( wxMouseEvent &amp;event );
04434     <span class="keywordtype">void</span> OnMouseClickChild ( wxMouseEvent &amp;event );
04435     <span class="keywordtype">void</span> OnMouseRightClickChild ( wxMouseEvent &amp;event );
04436     <span class="keywordtype">void</span> OnMouseMoveChild ( wxMouseEvent &amp;event );
04437     <span class="keywordtype">void</span> OnMouseUpChild ( wxMouseEvent &amp;event );
04438     <span class="keywordtype">void</span> OnKeyChild ( wxKeyEvent &amp;event );
04439     <span class="keywordtype">void</span> OnFocusChild ( wxFocusEvent &amp;event );
04440 
04441     <span class="keywordtype">void</span> OnCaptureChange ( wxMouseCaptureChangedEvent &amp;event );
04442 <span class="preprocessor">#endif // !wxPG_USE_CUSTOM_CONTROLS</span>
04443 <span class="preprocessor"></span>
04444     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollWinEvent &amp;event );
04445 
04446     <span class="keywordtype">void</span> OnSysColourChanged ( wxSysColourChangedEvent &amp;event );
04447 
04448 <span class="keyword">protected</span>:
04449 <span class="comment">//private:</span>
04450 
04455         <span class="keywordtype">void</span> CalculateFontAndBitmapStuff( <span class="keywordtype">int</span> vspacing );
04456 
04457     <span class="comment">//void ClearValueBackground ( wxDC&amp; dc, wxPGProperty* p );</span>
04458 
04459     <span class="keyword">inline</span> wxRect GetEditorWidgetRect ( wxPGProperty* p );
04460 
04461     <span class="comment">//inline wxSize GetEditorWidgetSize ( wxPGProperty* p );</span>
04462 
04463     <span class="comment">//void CorrectEditorWidgetSizeX ( int cx, int cw );</span>
04464     <span class="keywordtype">void</span> CorrectEditorWidgetSizeX ( <span class="keywordtype">int</span> new_splitterx, <span class="keywordtype">int</span> new_width );
04465 
04466     <span class="comment">//void CorrectEditorWidgetSizeY ( int cy );</span>
04467 
04468 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04469 <span class="preprocessor"></span>    <span class="keywordtype">void</span> _log_items ();
04470     <span class="keywordtype">void</span> OnScreenNote ( <span class="keyword">const</span> wxChar* format, ... );
04471 <span class="preprocessor">#endif</span>
04472 <span class="preprocessor"></span>
04473     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
04474 
04475     <span class="keywordtype">void</span> SelectProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> focus = FALSE, <span class="keywordtype">bool</span> forceswitch = FALSE );
04476 
04477     <span class="keywordtype">void</span> DoDelete ( wxPGProperty* item );
04478 
04479     <span class="keywordtype">void</span> DoDrawItems ( wxDC&amp; dc,
04480         wxPGProperty* first_item, wxPGProperty* last_item,
04481         <span class="keyword">const</span> wxRect* clip_rect );
04482 
04483     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
04484 
04486     <span class="keywordtype">void</span> DrawItems ( wxDC&amp; dc, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> topitemy, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bottomitemy,
04487         <span class="keyword">const</span> wxRect* clip_rect = NULL );
04488 
04489     <span class="keywordtype">void</span> DrawItems ( wxPGProperty* p1, wxPGProperty* p2 );
04490 
04491     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxPGProperty* p );
04492 
04493     <span class="keywordtype">void</span> DrawItemAndChildren ( wxDC&amp; dc, wxPGProperty* p );
04494 
04495     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( wxPGProperty* p );
04496 
04497     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawItemAndChildren ( wxPGProperty* p );
04498 
04500     <span class="keyword">inline</span> wxPGProperty&amp; GetPropertyById ( wxPGId <span class="keywordtype">id</span> )
04501     {
04502         <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty();
04503     }
04504 
04505 <span class="preprocessor">#if wxPG_USE_CATEGORY_ARRAY</span>
04506 <span class="preprocessor"></span>    wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p ) <span class="keyword">const</span>;
04507 <span class="preprocessor">#else</span>
04508 <span class="preprocessor"></span>    <span class="keyword">static</span> wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p );
04509 <span class="preprocessor">#endif</span>
04510 <span class="preprocessor"></span>
04511     <span class="keywordtype">void</span> ImprovedClientToScreen ( <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span>* py );
04512 
04513     wxPGId Insert ( wxPGProperty* priorthis, wxPGProperty* newproperty );
04514 
04515     <span class="keyword">inline</span> wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
04516     {
04517         <span class="keywordflow">return</span> m_pState-&gt;Insert(parent,index,newproperty);
04518     }
04519 
04521     <span class="keywordtype">void</span> RegainColours ();
04522 
04523     wxPGProperty* DoGetItemAtY ( <span class="keywordtype">int</span> y );
04524 
04525     <span class="keyword">inline</span> wxPGProperty* DoGetItemAtY_Full ( <span class="keywordtype">int</span> y )
04526     {
04527         wxASSERT ( y &gt;= 0 );
04528 
04529         <span class="keywordflow">if</span> ( (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)y &gt;= m_bottomy )
04530             <span class="keywordflow">return</span> NULL;
04531 
04532         <span class="keywordflow">return</span> m_pState-&gt;m_properties-&gt;GetItemAtY ( y, m_lineHeight );
04533     }
04534 
04535     <span class="keywordtype">void</span> DoPropertyChanged ( wxDC&amp; dc, wxPGProperty* p );
04536 
04537     <span class="keywordtype">void</span> DoSetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
04538 
04539     wxPGProperty* GetLastItem ( <span class="keywordtype">bool</span> need_visible, <span class="keywordtype">bool</span> allow_subprops = TRUE );
04540 
04541     <span class="keywordtype">void</span> CalculateVisibles ( <span class="keywordtype">int</span> vy, <span class="keywordtype">bool</span> full_recalc );
04542 
04543     <span class="keywordtype">void</span> CalculateYs ( wxPGPropertyWithChildren* startparent,
04544         <span class="keywordtype">int</span> startindex );
04545 
04546     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
04547 
04548     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
04549 
04550     <span class="comment">// Returns nearest paint visible property (such that will be painted unless</span>
04551     <span class="comment">// window is scrolled or resized). If given property is paint visible, then</span>
04552     <span class="comment">// it itself will be returned.</span>
04553     wxPGProperty* GetNearestPaintVisible ( wxPGProperty* p );
04554 
04555     <span class="keywordtype">void</span> NavigateOut ( <span class="keywordtype">int</span> dir ); <span class="comment">// this will then call wxWindow::Navigate</span>
04556 
04557     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultEditors();
04558 
04559     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultValues();
04560 
04561     <span class="comment">// Sets m_bgColIndex to this property and all its children.</span>
04562     <span class="keywordtype">void</span> SetColourIndex ( wxPGProperty* p, <span class="keywordtype">int</span> index );
04563 
04564     <span class="keywordtype">void</span> SetPropertyLabel ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newproplabel );
04565 
04566     <span class="keywordtype">void</span> DoSetPropertyName ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newname );
04567 
04568     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
04569 
04570     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
04571 
04572     <span class="comment">// Setups event handling for child control</span>
04573     <span class="keywordtype">void</span> SetupEventHandling ( wxPGCtrlClass* wnd, <span class="keywordtype">int</span> <span class="keywordtype">id</span> );
04574 
04575     <span class="comment">//void Sort ( bool recalcys );</span>
04576 
04577     <span class="comment">//void Sort ( wxPGProperty* p, bool recalcys );</span>
04578 
04579     <span class="keywordtype">void</span> CustSetCursor ( <span class="keywordtype">int</span> type );
04580 
04581     <span class="keywordtype">void</span> RecalculateVirtualSize();
04582 
04583     <span class="keywordtype">void</span> PGAdjustScrollbars ( <span class="keywordtype">int</span> y );
04584 
04586     <span class="keywordtype">void</span> DrawSplitterDragColumn ( wxDC&amp; dc, <span class="keywordtype">int</span> x );
04587 
04589     <span class="comment">//int GetNearestValidItem ( int index, int dir );</span>
04590     wxPGProperty* GetNeighbourItem ( wxPGProperty* item, <span class="keywordtype">bool</span> need_visible,
04591         <span class="keywordtype">int</span> dir ) <span class="keyword">const</span>;
04592 
04593     <span class="comment">//inline int PrepareToAddItem( wxPGProperty* property, wxPGPropertyWithChildren* category );</span>
04594 
04595     <span class="keywordtype">void</span> PrepareAfterItemsAdded();
04596 
04597 <span class="preprocessor">#endif // DOXYGEN_SHOULD_SKIP_THIS</span>
04598 <span class="preprocessor"></span>
04599 <span class="keyword">private</span>:
04600     DECLARE_EVENT_TABLE()
04601 };
04602 
04603 <span class="preprocessor">#undef wxPG_USE_STATE</span>
04604 <span class="preprocessor"></span>
04605 <span class="comment">// -----------------------------------------------------------------------</span>
04606 
04607 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxPropertyGridState::IsDisplayed()<span class="keyword"> const</span>
04608 <span class="keyword"></span>{
04609     <span class="keywordflow">return</span> ( <span class="keyword">this</span> == m_pPropGrid-&gt;GetState() );
04610 }
04611 
04612 <span class="comment">// -----------------------------------------------------------------------</span>
04613 
<a name="l04630"></a><a class="code" href="classwxPropertyGridEvent.htm">04630</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridEvent : <span class="keyword">public</span> wxCommandEvent
04631 {
04632 <span class="keyword">public</span>:
04633 
04635     wxPropertyGridEvent(wxEventType commandType=0, <span class="keywordtype">int</span> <span class="keywordtype">id</span>=0);
04636 <span class="preprocessor">#ifndef SWIG</span>
04637 <span class="preprocessor"></span>
04638     wxPropertyGridEvent(<span class="keyword">const</span> wxPropertyGridEvent&amp; event);
04639 <span class="preprocessor">#endif</span>
04640 <span class="preprocessor"></span>
04641     ~wxPropertyGridEvent();
04642 
04644     <span class="keyword">virtual</span> wxEvent* Clone() <span class="keyword">const</span>;
04645 
<a name="l04647"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa2">04647</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EnableProperty( <span class="keywordtype">bool</span> enable = TRUE )
04648     {
04649         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),enable);
04650     }
04651 
<a name="l04653"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa1">04653</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> DisableProperty()
04654     {
04655         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),FALSE);
04656     }
04657 
<a name="l04659"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa3">04659</a>     wxPGId GetProperty()<span class="keyword"> const</span>
04660 <span class="keyword">    </span>{
04661         <span class="keywordflow">return</span> wxPGIdGen(m_property);
04662     }
04663 
<a name="l04665"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa6">04665</a>     wxPGProperty* GetPropertyPtr()<span class="keyword"> const</span>
04666 <span class="keyword">    </span>{
04667         <span class="keywordflow">return</span> m_property;
04668     }
04669 
<a name="l04671"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa4">04671</a>     <span class="keyword">const</span> wxString&amp; GetPropertyLabel()<span class="keyword"> const</span>
04672 <span class="keyword">    </span>{
04673         wxASSERT ( m_property );
04674         <span class="keywordflow">return</span> m_property-&gt;GetLabel();
04675     }
04676 
<a name="l04678"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa5">04678</a>     <span class="keyword">const</span> wxString&amp; GetPropertyName()<span class="keyword"> const</span>
04679 <span class="keyword">    </span>{
04680         wxASSERT ( m_property );
04681         <span class="keywordflow">return</span> m_property-&gt;GetName();
04682     }
04683 
04684 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
04685 <span class="preprocessor"></span>
04686     <span class="keywordtype">void</span>* GetPropertyClientData()<span class="keyword"> const</span>
04687 <span class="keyword">    </span>{
04688         wxASSERT ( m_property );
04689         <span class="keywordflow">return</span> m_property-&gt;GetClientData();
04690     }
04691 <span class="preprocessor">#endif</span>
04692 <span class="preprocessor"></span>
04694 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
04695 <span class="preprocessor"></span>    <span class="keyword">const</span> wxVariant&amp; GetPropertyValue() <span class="keyword">const</span>
04696 <span class="preprocessor">#else</span>
<a name="l04697"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa7">04697</a> <span class="preprocessor"></span>    wxVariant GetPropertyValue() <span class="keyword">const</span>
04698 <span class="preprocessor">#endif</span>
04699 <span class="preprocessor"></span>    {
04700         wxASSERT ( m_property );
04701         <span class="keywordflow">return</span> m_property-&gt;GetValueAsVariant();
04702     }
04703 
04704     <span class="keyword">inline</span> wxString GetPropertyValueAsString ()<span class="keyword"> const</span>
04705 <span class="keyword">    </span>{
04706         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsString( wxPGIdGen(m_property) );
04707     }
04708     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ()<span class="keyword"> const</span>
04709 <span class="keyword">    </span>{
04710         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsLong( wxPGIdGen(m_property) );
04711     }
04712     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt () { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(); }
04713     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsBool ()<span class="keyword"> const</span>
04714 <span class="keyword">    </span>{
04715         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsBool( wxPGIdGen(m_property) );
04716     }
04717     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ()<span class="keyword"> const</span>
04718 <span class="keyword">    </span>{
04719         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsDouble( wxPGIdGen(m_property) );
04720     }
04721     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ()<span class="keyword"> const</span>
04722 <span class="keyword">    </span>{
04723         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayString( wxPGIdGen(m_property) );
04724     }
04725     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ()<span class="keyword"> const</span>
04726 <span class="keyword">    </span>{
04727         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsWxObjectPtr( wxPGIdGen(m_property) );
04728     }
04729     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ()<span class="keyword"> const</span>
04730 <span class="keyword">    </span>{
04731         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsVoidPtr( wxPGIdGen(m_property) );
04732     }
04733     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ()<span class="keyword"> const</span>
04734 <span class="keyword">    </span>{
04735         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsPoint( wxPGIdGen(m_property) );
04736     }
04737     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ()<span class="keyword"> const</span>
04738 <span class="keyword">    </span>{
04739         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsSize( wxPGIdGen(m_property) );
04740     }
04741     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ()<span class="keyword"> const</span>
04742 <span class="keyword">    </span>{
04743         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayInt( wxPGIdGen(m_property) );
04744     }
04745 
<a name="l04747"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa19">04747</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType()<span class="keyword"> const</span>
04748 <span class="keyword">    </span>{
04749         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueType( wxPGIdGen(m_property) );
04750     }
04751 
<a name="l04753"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa20">04753</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasProperty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_property != (wxPGProperty*) NULL ); }
04754 
04755     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled()<span class="keyword"> const</span>
04756 <span class="keyword">    </span>{
04757         <span class="keywordflow">return</span> m_pg-&gt;IsPropertyEnabled(wxPGIdGen(m_property));
04758     }
04759 
<a name="l04761"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa23">04761</a>     <span class="keywordtype">void</span> SetProperty ( wxPGId <span class="keywordtype">id</span> ) { m_property = wxPGIdToPtr(<span class="keywordtype">id</span>); }
04762 
<a name="l04764"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa22">04764</a>     <span class="keywordtype">void</span> SetProperty ( wxPGProperty* p ) { m_property = p; }
04765 
04766     <span class="keywordtype">void</span> SetPropertyGrid ( wxPropertyGrid* pg ) { m_pg = pg; }
04767 
04768 <span class="preprocessor">#ifndef SWIG</span>
04769 <span class="preprocessor"></span><span class="keyword">private</span>:
04770     DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
04771 
04772     wxPGProperty*       m_property;
04773     wxPropertyGrid*     m_pg;
04774 <span class="preprocessor">#endif</span>
04775 <span class="preprocessor"></span>};
04776 
04777 <span class="preprocessor">#ifndef SWIG</span>
04778 <span class="preprocessor"></span>BEGIN_DECLARE_EVENT_TYPES()
04779     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_SELECTED,           1775)
04780     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_CHANGED,            1776)
04781     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_HIGHLIGHTED,        1777)
04782     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_RIGHT_CLICK,        1778)
04783     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_PAGE_CHANGED,       1779)
04784     
04785 END_DECLARE_EVENT_TYPES()
04786 #<span class="keywordflow">else</span>
04787     <span class="keyword">enum</span> {
04788         wxEVT_PG_SELECTED = 1775,
04789         wxEVT_PG_CHANGED,
04790         wxEVT_PG_HIGHLIGHTED,
04791         wxEVT_PG_RIGHT_CLICK,
04792         wxEVT_PG_PAGE_CHANGED,
04793     };
04794 <span class="preprocessor">#endif</span>
04795 <span class="preprocessor"></span>
04796 
04797 <span class="preprocessor">#ifndef SWIG</span>
04798 <span class="preprocessor"></span><span class="keyword">typedef</span> void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&amp;);
04799 
04800 <span class="preprocessor">#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04801 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04802 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04803 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04804 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04805 <span class="preprocessor"></span>
04806 <span class="preprocessor">#endif</span>
04807 <span class="preprocessor"></span>
04808 
04809 <span class="comment">// -----------------------------------------------------------------------</span>
04810 
04811 
<a name="l04816"></a><a class="code" href="classwxPropertyGridPopulator.htm">04816</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridPopulator
04817 {
04818 <span class="keyword">public</span>:
<a name="l04825"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora8">04825</a>     <span class="keyword">inline</span> wxPropertyGridPopulator(wxPropertyGrid* pg = (wxPropertyGrid*) NULL,
04826                                    wxPGId popRoot = wxPGId())
04827     {
04828         Init(pg, popRoot);
04829     }
04830 
04832     ~wxPropertyGridPopulator();
04833 
04839     <span class="keywordtype">void</span> AddChoices(size_t choicesId,
04840                     <span class="keyword">const</span> wxArrayString&amp; choiceLabels,
04841                     <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
04842 
04871     wxPGId AppendByClass(<span class="keyword">const</span> wxString&amp; classname,
04872                          <span class="keyword">const</span> wxString&amp; label,
04873                          <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
04874                          <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
04875                          <span class="keyword">const</span> wxString&amp; attributes = wxEmptyString,
04876                          size_t choicesId = 0,
04877                          <span class="keyword">const</span> wxArrayString&amp; choiceLabels = *((<span class="keyword">const</span> wxArrayString*)NULL),
04878                          <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
04879 
04888     wxPGId AppendByType(<span class="keyword">const</span> wxString&amp; valuetype,
04889                         <span class="keyword">const</span> wxString&amp; label,
04890                         <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
04891                         <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
04892                         <span class="keyword">const</span> wxString&amp; attributes = wxEmptyString,
04893                         size_t choicesId = 0,
04894                         <span class="keyword">const</span> wxArrayString&amp; choiceLabels = *((<span class="keyword">const</span> wxArrayString*)NULL),
04895                         <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
04896 
<a name="l04898"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora5">04898</a>     <span class="keyword">inline</span> wxPGId GetCurrentParent()<span class="keyword"> const</span>
04899 <span class="keyword">    </span>{
04900         <span class="keywordflow">return</span> m_curParent;
04901     }
04902 
04904     <span class="keywordtype">bool</span> HasChoices( size_t <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
04905 
<a name="l04907"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora7">04907</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetGrid( wxPropertyGrid* pg )
04908     {
04909         m_propGrid = pg;
04910     }
04911 
04913     <span class="keywordtype">bool</span> BeginChildren();
04914 
<a name="l04916"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora4">04916</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EndChildren()
04917     {
04918         wxASSERT( m_curParent.IsOk() );
04919         m_curParent = wxPGIdGen(wxPGIdToPtr(m_curParent)-&gt;GetParent());
04920         m_lastProperty = wxPGId((wxPGProperty*)NULL);
04921     }
04922 
04923 <span class="keyword">protected</span>:
04924 
04925     wxPGId DoAppend(wxPGProperty* p,
04926                     <span class="keyword">const</span> wxString&amp; value,
04927                     <span class="keyword">const</span> wxString&amp; attributes,
04928                     size_t choicesId,
04929                     <span class="keyword">const</span> wxArrayString&amp; choiceLabels,
04930                     <span class="keyword">const</span> wxArrayInt&amp; choiceValues);
04931 
04932     <span class="keywordtype">void</span> Init( wxPropertyGrid* pg, wxPGId popRoot );
04933 
<a name="l04935"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp4">04935</a>     wxPropertyGrid* m_propGrid;
04936 
<a name="l04938"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp3">04938</a>     wxPGId          m_popRoot;
04939 
<a name="l04941"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp0">04941</a>     wxPGId          m_curParent;
04942 
<a name="l04944"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp2">04944</a>     wxPGId          m_lastProperty;
04945 
<a name="l04947"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp1">04947</a>     wxPGHashMapI2I  m_dictIdChoices;
04948 };
04949 
04950 <span class="comment">// -----------------------------------------------------------------------</span>
04951 
04952 <span class="comment">//</span>
04953 <span class="comment">// Undefine macros that are not needed outside propertygrid sources</span>
04954 <span class="comment">//</span>
04955 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
04956 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DESC_REFRESH_REQUIRED</span>
04957 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLBAR_DETECTED</span>
04958 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CREATEDSTATE</span>
04959 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_NOSTATUSBARHELP</span>
04960 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLED</span>
04961 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_HIDE_STATE</span>
04962 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE_CHILD</span>
04963 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE</span>
04964 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE_CHILD</span>
04965 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CUR_USES_CUSTOM_IMAGE</span>
04966 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_PRIMARY_FILLS_ENTIRE</span>
04967 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_VALUE_MODIFIED</span>
04968 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE</span>
04969 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUSED</span>
04970 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_CAPTURED</span>
04971 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_INITIALIZED</span>
04972 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_ACTIVATION_BY_CLICK</span>
04973 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DONT_CENTER_SPLITTER</span>
04974 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
04975 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_CUSTOM_CONTROLS</span>
04976 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_DOUBLE_BUFFER</span>
04977 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_HEAVY_GFX</span>
04978 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_ICON_WIDTH</span>
04979 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_RENDERER_NATIVE</span>
04980 <span class="preprocessor"></span><span class="comment">// Following are needed by the manager headers</span>
04981 <span class="comment">//# undef wxPGIdGen</span>
04982 <span class="comment">//# undef wxPGNameStr</span>
04983 <span class="comment">//# undef wxPGIdToPtr</span>
04984 <span class="preprocessor">#endif</span>
04985 <span class="preprocessor"></span>
04986 <span class="comment">// Doxygen special</span>
04987 <span class="preprocessor">#if !defined(_WX_WINDOW_H_BASE_) &amp;&amp; !defined(SWIG)</span>
04988 <span class="preprocessor"></span><span class="preprocessor"># include "manager.h"</span>
04989 <span class="preprocessor">#endif</span>
04990 <span class="preprocessor"></span>
04991 <span class="comment">// -----------------------------------------------------------------------</span>
04992 
04993 <span class="preprocessor">#endif // __WX_PROPGRID_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Apr 14 22:21:05 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
