<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: wxPropertyGrid Overview</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindexHL" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> Overview </h1>
<p>
<h3 align="center">1 </h3><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is a specialized two-column grid for editing properties such as strings, numbers, flagsets, fonts, and colours. It allows hierarchial, collapsible properties ( via so-called categories that can hold child properties), sub-properties, and has strong wxVariant support (for example, allows populating from near-arbitrary list of wxVariants).<p>
Classes:<br>
 <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a><br>
 <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a><br>
 <a class="el" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a><br>
<p>
Header files:<br>
 <b>wx/propgrid/propgrid.h:</b> Mandatory when using <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>.<br>
 <b>wx/propgrid/advprops.h:</b> For less often used property classes.<br>
 <b>wx/propgrid/manager.h:</b> Mandatory when using <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>.<br>
 <b>wx/propgrid/propdev.h:</b> Mandatory when implementing custom property classes.<br>
<p>
<a class="el" href="index.htm#basics">Creating and Populating wxPropertyGrid</a><br>
 <a class="el" href="index.htm#categories">Categories</a><br>
 <a class="el" href="index.htm#enumandflags">wxEnumProperty and wxFlagsProperty</a><br>
 <a class="el" href="index.htm#advprops">Advanced Properties</a><br>
 <a class="el" href="index.htm#operations">Operating with Properties</a><br>
 <a class="el" href="index.htm#events">Event Handling</a><br>
 <a class="el" href="index.htm#populating">Populating wxPropertyGrid Automatically</a><br>
 <a class="el" href="index.htm#custprop">Custom User Properties (using wxCustomProperty)</a><br>
 <a class="el" href="index.htm#usage2">Using wxPropertyGridManager</a><br>
 <a class="el" href="index.htm#compiling">Compiling wxPropertyGrid</a><br>
 <a class="el" href="index.htm#misc">Miscellaneous Topics</a><br>
 <a class="el" href="index.htm#proplist">Property Descriptions</a><br>
 <a class="el" href="index.htm#userhelp">Using wxPropertyGrid</a><br>
 <a class="el" href="index.htm#bugs">Known Bugs</a><br>
 <a class="el" href="index.htm#issues">Issues</a><br>
 <a class="el" href="index.htm#todo">Todo</a><br>
 <a class="el" href="index.htm#notes">Design Notes</a><br>
 <a class="el" href="index.htm#newprops">Creating New Properties</a><br>
<h2><a class="anchor" name="basics">
Creating and Populating wxPropertyGrid</a></h2>
As seen here, <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is constructed in the same way as other wxWidgets controls:<p>
<pre class="fragment"><div>    <span class="comment">// Necessary header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/propgrid.h&gt;</span>

    ...

        <span class="comment">// Assumes code is in frame/dialog constructor</span>

        <span class="comment">// Construct wxPropertyGrid control</span>
        <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* pg = <span class="keyword">new</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>(
            <span class="keyword">this</span>, <span class="comment">// parent</span>
            PGID, <span class="comment">// id</span>
            wxDefaultPosition, <span class="comment">// position </span>
            wxDefaultSize, <span class="comment">// size</span>
            <span class="comment">// Some specific window styles - for all additional styles, see the documentation</span>
            wxPG_AUTO_SORT | <span class="comment">// Automatic sorting after items added</span>
            wxPG_BOLD_MODIFIED | <span class="comment">// Modified values are drawn in bold font</span>
            wxPG_SPLITTER_AUTO_CENTER | <span class="comment">// Automatically center splitter until user manually adjusts it</span>
            <span class="comment">// Default style</span>
            wxPG_DEFAULT_STYLE
            );
</div></pre><p>
(for complete list of new window styles: <a class="el" href="group__wndflags.htm">Additional Window Styles</a>)<p>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is usually populated with lines like this:<p>
<pre class="fragment"><div>        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxStringProperty(wxT(<span class="stringliteral">"Label"</span>),wxT(<span class="stringliteral">"Name"</span>),wxT(<span class="stringliteral">"Initial Value"</span>)) );
</div></pre><p>
wxStringProperty is a constructor function that creates a property instance of a property class "wxStringProperty". Only the first function argument (label) is mandatory. When necessary, name defaults to label and initial value to default value. If wxPG_LABEL is used as the name argument, then the label is automatically used as a name as well (this is more efficient than manually defining both as the same). Empty name is also allowed, but in this case the property cannot be accessed by its name.<p>
To demonstrate other common property classes, here's another code snippet:<p>
<pre class="fragment"><div>        <span class="comment">// Add int property </span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxIntProperty ( wxT(<span class="stringliteral">"IntProperty"</span>), wxPG_LABEL, 12345678 ) );

        <span class="comment">// Add float property (value type is actually double)</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxFloatProperty ( wxT(<span class="stringliteral">"FloatProperty"</span>), wxPG_LABEL, 12345.678 ) );

        <span class="comment">// Add a bool property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxBoolProperty ( wxT(<span class="stringliteral">"BoolProperty"</span>), wxPG_LABEL, <span class="keyword">false</span> ) );

        <span class="comment">// A string property that can be edited in a separate editor dialog.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxLongStringProperty (wxT(<span class="stringliteral">"LongStringProperty"</span>),
                                           wxPG_LABEL,
                                           wxT(<span class="stringliteral">"This is much longer string than the "</span>)
                                           wxT(<span class="stringliteral">"first one. Edit it by clicking the button."</span>)));

        <span class="comment">// String editor with dir selector button.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxDirProperty( wxT(<span class="stringliteral">"DirProperty"</span>), wxPG_LABEL, ::wxGetUserHome()) );

        <span class="comment">// A file selector property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxFileProperty( wxT(<span class="stringliteral">"FileProperty"</span>), wxPG_LABEL, wxEmptyString ) );

        <span class="comment">// Extra: set wildcard for file property (format same as in wxFileDialog).</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere20">SetPropertyAttribute</a>(wxT(<span class="stringliteral">"TextFile"</span>),
                                 wxPG_FILE_WILDCARD,
                                 wxT(<span class="stringliteral">"All files (*.*)|*.*"</span>));
</div></pre><h2><a class="anchor" name="categories">
Categories</a></h2>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> has a hierarchial property storage and display model, which allows property categories to hold child properties and even other categories. Other than that, from the programmer's point of view, categories can be treated exactly the same as "other" properties. For example, despite its name, GetPropertyByName also returns a category by name, and SetPropertyLabel also sets label of a category. Note however that sometimes the label of a property category may be referred as caption (for example, there is SetCaptionForegroundColour method that sets text colour of a property category's label).<p>
When category is added at the top (i.e. default) level of the hierarchy, it becomes a *current category*. This means that all other (non-category) properties after it are automatically added to it. You may add properties to specific categories by using <a class="el" href="classwxPropertyGrid.htm#wxPropertyGrida128">wxPropertyGrid::Insert</a> or wxPropertyGrid::AppendIn.<p>
Category code sample:<p>
<pre class="fragment"><div>        <span class="comment">// One way to add category (similar to how other properties are added)</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxPropertyCategory(wxT(<span class="stringliteral">"Main"</span>)) );

        <span class="comment">// All these are added to "Main" category</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxStringProperty(wxT(<span class="stringliteral">"Name"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Age"</span>),wxPG_LABEL,25) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Height"</span>),wxPG_LABEL,180) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Weight"</span>)) );

        <span class="comment">// Another way</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida7">AppendCategory</a>( wxT(<span class="stringliteral">"Attributes"</span>) );

        <span class="comment">// All these are added to "Attributes" category</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Intelligence"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Sensibility"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Agility"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Coordination"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Constitution"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Strength"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Personality"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Appearance"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Bravado"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Willpower"</span>)) );
</div></pre><h2><a class="anchor" name="enumandflags">
wxEnumProperty and wxFlagsProperty</a></h2>
wxEnumProperty is used when you want property's (integer) value to be selected from a popup list of choices.<p>
Creating wxEnumProperty is more complex than those described earlier. You have to provide list of constant labels, and optionally relevant values (if given indexes are not used).<p>
As of 1.0.0rc1, wxEnumProperty actually stores string and value arrays given to it, but in such manner that the same storage can be reused for properties that use the exact same array pointers.<p>
<dl compact><dt><b>Remarks:</b></dt><dd></dd></dl>
<ul>
<li>Value wxPG_INVALID_VALUE (equals 2147483647 equals 2^31-1) is not allowed as value.</li></ul>
<p>
<ul>
<li>Altough you can use label and value arrays that are temporary variables, it is recommended that you make them persistent (i.e. static or global) in practical code. <b>Otherwise there is a slight probability that property will use wrong set of choices or that the allocation of choices becomes very inefficient.</b> Only exception is <a class="el" href="classwxPGConstants.htm">wxPGConstants</a>, which can be used as a temporary variable (see below).</li></ul>
<p>
A very simple example:<p>
<pre class="fragment"><div>    <span class="keyword">static</span> <span class="keyword">const</span> wxChar* gs_array_diet[] = 
        { wxT(<span class="stringliteral">"Herbivore"</span>), wxT(<span class="stringliteral">"Carnivore"</span>), wxT(<span class="stringliteral">"Omnivore"</span>), NULL };

        ...

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                   wxPG_LABEL,
                                   gs_array_diet) );
</div></pre><p>
Now with real values (and more comments):<p>
<pre class="fragment"><div>        <span class="comment">//</span>
        <span class="comment">// wxEnumProperty actually stores string.</span>
        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* enum_prop_labels[] = { wxT(<span class="stringliteral">"One Item"</span>),
            wxT(<span class="stringliteral">"Another Item"</span>), wxT(<span class="stringliteral">"One More"</span>), wxT(<span class="stringliteral">"This Is Last"</span>), NULL };

        <span class="comment">// This value array would be optional if values matched string indexes</span>
        <span class="keyword">static</span> <span class="keywordtype">long</span> enum_prop_values[] = { 40, 80, 120, 160 };

        <span class="comment">// note that the initial value (the last argument) is the actual value,</span>
        <span class="comment">// not index or anything like that. Thus, our value selects "Another Item".</span>
        <span class="comment">//</span>
        <span class="comment">// 0 before value is number of items. If it is 0, like in our example,</span>
        <span class="comment">// number of items is calculated, and this requires that the string pointer</span>
        <span class="comment">// array is terminated with NULL.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxEnumProperty(wxT(<span class="stringliteral">"EnumProperty"</span>),wxPG_LABEL,
            enum_prop_labels, enum_prop_values, 0, 80 ) );
</div></pre><p>
An alternative is to use <a class="el" href="classwxPGConstants.htm">wxPGConstants</a> class which manages dynamic arrays of strings and integers. As of 1.0.0 rc1 wxEnumProperty stores manages arrays given to it, including <a class="el" href="classwxPGConstants.htm">wxPGConstants</a>.<p>
<pre class="fragment"><div>        <span class="comment">// Use basic table from our previous example</span>
        <span class="comment">// Can also set/add wxArrayStrings and wxArrayInts directly</span>
        <a class="code" href="classwxPGConstants.htm">wxPGConstants</a> constants( enum_prop_labels, enum_prop_values );

        <span class="comment">// Add extra items</span>
        constants.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a> ( wxT(<span class="stringliteral">"Look, it continues"</span>), 200 );
        constants.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a> ( wxT(<span class="stringliteral">"Even More"</span>), 240 );
        constants.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a> ( wxT(<span class="stringliteral">"And More"</span>), 280 );
        constants.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a> ( wxT(<span class="stringliteral">"True End of the List"</span>), 320 );

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxEnumProperty(wxT(<span class="stringliteral">"EnumProperty2"</span>),
                                    wxPG_LABEL,
                                    constants,
                                    240) );
</div></pre><p>
You can also get reference to wxEnumProperty's list of choices using GetPropertyChoices. This can them be modified or given to further properties (in fast and effective manner). There is also AddPropertyChoice which is recommended way to append a choice for aproperty.<p>
<pre class="fragment"><div>        <span class="comment">// Continued from our previous example...</span>
        <a class="code" href="classwxPGConstants.htm">wxPGConstants</a>&amp; choices = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera59">GetPropertyChoices</a>(wxT(<span class="stringliteral">"EnumProperty2"</span>));
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"EnumProperty3"</span>),
                                   wxPG_LABEL,
                                   choices) );

        <span class="comment">// This will affect both EnumProperty2 and EnumProperty3 since</span>
        <span class="comment">// they both use the same list of choices.</span>
        choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a>(wxT(<span class="stringliteral">"Test Item"</span>),360);
</div></pre><p>
If you want to create your enum properties with simple (label,name,value) constructor, then you need to create a new property class using one of the supplied macro pairs. See <a class="el" href="index.htm#newprops">Creating New Properties</a> for details.<p>
wxFlagsProperty is similar:<p>
<pre class="fragment"><div>        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* flags_prop_labels[] = { wxT(<span class="stringliteral">"wxICONIZE"</span>), 
            wxT(<span class="stringliteral">"wxCAPTION"</span>), wxT(<span class="stringliteral">"wxMINIMIZE_BOX"</span>), wxT(<span class="stringliteral">"wxMAXIMIZE_BOX"</span>), NULL };

        <span class="comment">// this value array would be optional if values matched string indexes</span>
        <span class="keyword">static</span> <span class="keywordtype">long</span> flags_prop_values[] = { wxICONIZE, wxCAPTION, wxMINIMIZE_BOX, wxMAXIMIZE_BOX };

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxFlagsProperty(wxT(<span class="stringliteral">"FlagsProperty"</span>),
                                    wxPG_LABEL,
                                    flags_prop_labels,
                                    flags_prop_values,
                                    0,
                                    GetWindowStyle()) );
</div></pre><p>
wxFlagsProperty can use <a class="el" href="classwxPGConstants.htm">wxPGConstants</a> just the same way as wxEnumProperty (and also custom property classes can be created), <b>but currently its list of items cannot be modified after it has been created</b> (so please no GetPropertyChoices or AddPropertyChoice calls).<h2><a class="anchor" name="advprops">
Advanced Properties</a></h2>
This section descbribes the use of less often needed property classes. To use them, you need to include &lt;wx/propgrid/advprops.h&gt;.<p>
<pre class="fragment"><div>    <span class="comment">// Necessary extra header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/advprops.h&gt;</span>

    ...

        <span class="comment">// wxArrayStringProperty embeds a wxArrayString.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxArrayStringProperty(wxT(<span class="stringliteral">"Example of ArrayStringProperty"</span>),
                                           wxT(<span class="stringliteral">"ArrayStringProp"</span>)));

        <span class="comment">// Image file property. Wildcard is auto-generated from available</span>
        <span class="comment">// image handlers, so it is not set this time.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxImageFileProperty(wxT(<span class="stringliteral">"Example of ImageFileProperty"</span>),
                                         wxT(<span class="stringliteral">"ImageFileProp"</span>)));

        <span class="comment">// Font property has sub-properties. Note that we give window's font as</span>
        <span class="comment">// initial value.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),
                     wxPG_LABEL,
                     GetFont()) );

        <span class="comment">// Colour property with arbitrary colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxColourProperty(wxT(<span class="stringliteral">"My Colour 1"</span>),
                                      wxPG_LABEL,
                                      wxColour(242,109,0) ) );

        <span class="comment">// System colour property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxSystemColourProperty (wxT(<span class="stringliteral">"My SysColour 1"</span>),
                                             wxPG_LABEL,
                                             wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)) );

        <span class="comment">// System colour property with custom colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxSystemColourProperty (wxT(<span class="stringliteral">"My SysColour 2"</span>),
                                             wxPG_LABEL,
                                             wxColour(0,200,160) ) );

        <span class="comment">// Cursor property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a> ( wxCursorProperty (wxT(<span class="stringliteral">"My Cursor"</span>),
                                       wxPG_LABEL,
                                       wxCURSOR_ARROW));
</div></pre><h2><a class="anchor" name="operations">
Operating with Properties</a></h2>
All operations on properties should be done via wxPropertyGrid's (or wxPropertyGridManager's) methods. Class reference of the base property class should only be interesting for those creating custom property classes.<p>
Property operations, such as SetPropertyValue or DisableProperty, all have two versions: one which accepts property id (of type wxPGId) and another that accepts property name. Id is faster since it doesn't require hash map lookup, but name is often much more convenient.<p>
You can get property id as Append/Insert return value, or by calling GetPropertyByName.<p>
Example: Setting things about property named "X":<p>
<pre class="fragment"><div>        <span class="comment">// Altough name usually works, id is used here as an example</span>
        wxPGId <span class="keywordtype">id</span> = GetPropertyByName(wxT(<span class="stringliteral">"X"</span>));

        <span class="comment">// There are many versions of this method, of which each accept</span>
        <span class="comment">// different type of value.</span>
        <span class="comment">// NOTE: If type of X is not "long", then this will yield a</span>
        <span class="comment">//       run-time error message.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida212">SetPropertyValue</a> ( wxT(<span class="stringliteral">"X"</span>), 200 );

        <span class="comment">// Setting a string works for all properties - conversion is done</span>
        <span class="comment">// automatically.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida212">SetPropertyValue</a> ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"400"</span>) );

        <span class="comment">// Set new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida181">SetPropertyName</a> ( wxT(<span class="stringliteral">"X"</span>), wxT(<span class="stringliteral">"NewNameOfX"</span>) );

        <span class="comment">// Set new label - we need to use the new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida179">SetPropertyLabel</a> ( wxT(<span class="stringliteral">"NewNameOfX"</span>), wxT(<span class="stringliteral">"New Label of X"</span>) );
</div></pre><p>
Example of iterating through all properties (that are not category or sub-property items):<p>
<pre class="fragment"><div>        wxPGId <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida52">GetFirstProperty</a>();

        <span class="keywordflow">while</span> ( <span class="keywordtype">id</span>.IsOk() )
        {
            <span class="comment">// Do something with property id</span>

            ...

            <span class="comment">// Get next</span>
            pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida66">GetNextProperty</a>( <span class="keywordtype">id</span> );
        }
</div></pre><p>
Getting value of selected wxSystemColourProperty (which value type is derived from wxObject):<p>
<pre class="fragment"><div>        wxPGId <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida113">GetSelection</a>();

        <span class="keywordflow">if</span> ( <span class="keywordtype">id</span>.IsOk() )
        {

            <span class="comment">// Get name of property</span>
            <span class="keyword">const</span> wxString&amp; name = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera70">GetPropertyName</a> ( <span class="keywordtype">id</span> );

            <span class="comment">// If type is not correct, GetColour() method will produce run-time error</span>
            <span class="keywordflow">if</span> ( pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera117">IsPropertyValueType</a> ( <span class="keywordtype">id</span>, CLASSINFO(<a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>) ) )
            {
                <a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>* pcolval =
                    wxDynamicCast(pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere14">GetPropertyValueAsWxObjectPtr</a>(<span class="keywordtype">id</span>),
                                  <a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>);

                <span class="comment">// Report value</span>
                wxString text;
                <span class="keywordflow">if</span> ( pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo1">m_type</a> == wxPG_CUSTOM_COLOUR )
                    text.Printf ( wxT(<span class="stringliteral">"It is custom colour: (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Red(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Green(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Blue());
                <span class="keywordflow">else</span>
                    text.Printf ( wxT(<span class="stringliteral">"It is wx system colour (number=%i): (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo1">m_type</a>,
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Red(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Green(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Blue());

                wxMessageBox ( text );
            }

        }
</div></pre><h2><a class="anchor" name="populating">
Populating wxPropertyGrid Automatically</a></h2>
<h3><a class="anchor" name="fromvariants">
Populating from List of wxVariants</a></h3>
Example of populating an empty <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> from a values stored in an arbitrary list of wxVariants.<p>
<pre class="fragment"><div>        <span class="comment">// This is a static method that initializes *all* builtin type handlers</span>
        <span class="comment">// available, including those for wxColour and wxFont. Refers to *all*</span>
        <span class="comment">// included properties, so when compiling with static library, this</span>
        <span class="comment">// method may increase the executable size significantly.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride23">InitAllTypeHandlers</a> ();

        <span class="comment">// Get contents of the grid as a wxVariant list</span>
        wxVariant all_values = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida107">GetPropertyValues</a>();

        <span class="comment">// Populate the list with values. If a property with appropriate</span>
        <span class="comment">// name is not found, it is created according to the type of variant.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida216">SetPropertyValues</a> ( my_list_variant );

        <span class="comment">// In order to get wxObject ptr from a variant value,</span>
        <span class="comment">// wxGetVariantCast(VARIANT,CLASSNAME) macro has to be called.</span>
        <span class="comment">// Like this:</span>
        wxVariant v_txcol = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera76">GetPropertyValue</a>(wxT(<span class="stringliteral">"Text Colour"</span>));
        <span class="keyword">const</span> wxColour&amp; txcol = wxGetVariantCast(v_txcol,wxColour);
</div></pre><h3><a class="anchor" name="tofile">
Saving Population to a Text-based Storage</a></h3>
<pre class="fragment"><div>    <span class="keyword">static</span> <span class="keywordtype">void</span> WritePropertiesToMyStorage( wxPropertyGrid* pg, wxPGId <span class="keywordtype">id</span>, wxMyStorage&amp; f, <span class="keywordtype">int</span> depth )
    {
        wxString s;
        wxString s2;

        <span class="keywordflow">while</span> ( <span class="keywordtype">id</span>.IsOk() )
        {

            <span class="comment">// TODO: Save property into text storage using:</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyClassName</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyName</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyLabel</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyValueAsString</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyChoices</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyAttributes</span>

            <span class="comment">// Example for adding choices:</span>
            <a class="code" href="classwxPGConstants.htm">wxPGConstants</a>&amp; choices = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera59">GetPropertyChoices</a>(<span class="keywordtype">id</span>);
            <span class="keywordflow">if</span> ( choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa6">GetCount</a>() )
            {
                <span class="comment">// First add id of the choices list inorder to optimize</span>
                s2.Printf(wxT(<span class="stringliteral">"\"%X\""</span>),(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa7">GetId</a>());
                s.Append(s2);
                f.AddToken(s2);

                size_t i;
                wxArrayString&amp; labels = choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa10">GetLabels</a>();
                wxArrayInt&amp; values = choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa14">GetValues</a>();
                <span class="keywordflow">if</span> ( values.GetCount() )
                    <span class="keywordflow">for</span> ( i=0; i&lt;labels.GetCount(); i++ )
                    {
                        s2.Printf(wxT(<span class="stringliteral">"\"%s||%i\""</span>),labels[i].c_str(),values[i]);
                        f.AddToken(s2);
                    }
                <span class="keywordflow">else</span>
                    <span class="keywordflow">for</span> ( i=0; i&lt;labels.GetCount(); i++ )
                    {
                        s2.Printf(wxT(<span class="stringliteral">"\"%s\""</span>),labels[i].c_str());
                        f.AddToken(s2);
                    }
            }

            <span class="comment">// Write children, if any</span>
            wxPGId firstChild = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida51">GetFirstChild</a>(<span class="keywordtype">id</span>);
            <span class="keywordflow">if</span> ( firstChild.IsOk() )
            {
                WritePropertiesToMyStorage( pg, firstChild, f, depth+1 );

                <span class="comment">// TODO: Add parent's terminator</span>
            }

            <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera46">GetNextSibling</a>(<span class="keywordtype">id</span>);
        }
    }

    ...

        <span class="comment">// Then you can use this to store the entire hierarchy</span>
        wxPGId firstChild = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida51">GetFirstChild</a>(pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida110">GetRoot</a>());
        <span class="keywordflow">if</span> ( firstChild.IsOk() )
            WritePropertiesToFile(pg,first_child,InstanceOfMyStorage,0);
</div></pre><p>
For more practical'ish example, see FormMain::OnSaveToFileClick in propgridsample.cpp.<h3><a class="anchor" name="fromfile">
Loading Population from a Text-based Storage</a></h3>
<pre class="fragment"><div>        <span class="comment">// Recommended when modifying the grid a lot at once</span>
        pg-&gt;Freeze();

        <span class="comment">// Necessary if you want a full-page loading</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida13">Clear</a>();

        <a class="code" href="classwxPropertyGridPopulator.htm">wxPropertyGridPopulator</a> populator(pg);

        <span class="comment">// Store strings from the source here</span>
        wxString s_class;
        wxString s_name;
        wxString s_value;
        wxString s_attr;

        <span class="comment">// Each set of choices loaded must have id</span>
        size_t choicesId;

        wxArrayString choiceLabels;
        wxArrayInt choiceValues;

        <span class="comment">// Pseudo-code loop to parse the source one "line" at a time</span>
        <span class="keywordflow">while</span> ( !source.IsAtEnd() )
        {

            <span class="comment">// Clear stuff that doesn't exist at every "line"</span>
            choicesId = 0;
            choiceLabels.Empty();
            choiceValues.Empty();

            <span class="comment">// TODO: Load "line" to variables</span>

            <span class="comment">// TODO: When a sequence of sibling properties is terminated, call this:</span>
            <span class="comment">//   populator.EndChildren();</span>

            <span class="comment">// TODO: If had choices, use following code:</span>
            <span class="comment">//    if ( choicesId &amp;&amp; !populator.HasChoices(choicesId) )</span>
            <span class="comment">//    {</span>
            <span class="comment">//        populator.AddChoices(choicesId,choiceLabels,choiceValues);</span>
            <span class="comment">//    }</span>

            <span class="comment">// TODO: Add the property.</span>
            <span class="comment">//   (for sake of simplicity we use here default name for properties)</span>
            <span class="comment">//    populator.AppendByClass(s_class,</span>
            <span class="comment">//                            s_name,</span>
            <span class="comment">//                            wxPG_LABEL,</span>
            <span class="comment">//                            s_value,</span>
            <span class="comment">//                            s_attr,</span>
            <span class="comment">//                            choicesId);</span>

            <span class="comment">// TODO: When a sequence of sibling properties begins, call this:</span>
            <span class="comment">//   populator.BeginChildren();</span>

        }

        pg-&gt;Thaw();
</div></pre><p>
For more practical'ish example, see FormMain::OnLoadFromFileClick in propgridsample.cpp.<h2><a class="anchor" name="events">
Event Handling</a></h2>
Probably the most important event is the Changed event which occurs when value of any property is changed by the user. Use EVT_PG_CHANGED(id,func) in your event table to use it. For complete list of event types, see <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> class reference.<p>
The custom event class, <a class="el" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>, has methods to directly access the property that triggered the event.<p>
Here's a small sample:<p>
<pre class="fragment"><div>    <span class="comment">// Portion of an imaginary event table</span>
    BEGIN_EVENT_TABLE(MyForm, wxFrame)

        ...

        <span class="comment">// This occurs when a property value changes</span>
        EVT_PG_CHANGED( PGID, MyForm::OnPropertyGridChange )

        ...

    END_EVENT_TABLE()

    <span class="keywordtype">void</span> MyForm::OnPropertyGridChange ( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event )
    {

        <span class="comment">// Get name of changed property</span>
        <span class="keyword">const</span> wxString&amp; name = event.<a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa5">GetPropertyName</a>();

        <span class="comment">// Get resulting value - wxVariant is convenient here.</span>
        wxVariant value = event.<a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa7">GetPropertyValue</a>();

        <span class="comment">// Get type identifier</span>
        <span class="keyword">const</span> <a class="code" href="classwxPGValueType.htm">wxPGValueType</a>* type = event.<a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa19">GetPropertyValueType</a>();

    }
</div></pre><h2><a class="anchor" name="custprop">
Custom User Properties (using wxCustomProperty)</a></h2>
By far the easiest way to have a somewhat customized property is to use wxCustomProperty class. No subclassing is necessary - property is modified using <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere20">wxPropertyGrid::SetPropertyAttribute</a>.<p>
<b>Available Customizations</b> (relevant attribute in parenthesis)<p>
<ul>
<li>May have children.</li><li>Editor class (wxPG_CUSTOM_EDITOR).</li><li>Image in front of value (wxPG_CUSTOM_IMAGE,wxPG_CUSTOM_PAINT_CALLBACK).</li><li>What happens when editor's button is pressed (wxPG_CUSTOM_CALLBACK).</li></ul>
<p>
For more info on attributes, see <a class="el" href="group__attrids.htm">wxPropertyGrid Property Attribute Identifiers</a>. In sample application, there is a CustomProperty property that has children that can be used to modify the property itself.<p>
<b>Limitations:</b><ul>
<li>Currently wxCustomProperty is limited to wxString value type.</li></ul>
<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Since image is not resized to fit, only cropped, you must resize the it, if necessary, before setting it as wxPG_CUSTOM_IMAGE attribute. Use <a class="el" href="classwxPropertyGrid.htm#wxPropertyGrida56">wxPropertyGrid::GetImageSize</a> to get preferred image size (maximum width should be 64).</li><li>If you need to have property editors other than those supplied, please see <a class="el" href="classwxPGEditor.htm">wxPGEditor</a> docs and source code in propgrid.cpp.</li></ul>
</dd></dl>
<pre class="fragment"><div>        <span class="comment">//</span>
        <span class="comment">// Sample code for adding wxCustomProperty</span>
        <span class="comment">//</span>
    
        wxPGId cpId = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida6">Append</a>( wxCustomProperty(wxT(<span class="stringliteral">"Shape"</span>),wxPG_LABEL) );

        <span class="comment">// Can have children</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida11">AppendIn</a>( cpId, wxStringProperty(wxT(<span class="stringliteral">"Label"</span>),
                                             wxT(<span class="stringliteral">"Shape_Label"</span>),
                                             wxT(<span class="stringliteral">"Shape 1"</span>)) );

        <span class="comment">// Set choice editor</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere20">SetPropertyAttribute</a>( cpId, wxPG_CUSTOM_EDITOR, wxPGEditor_Choice );

        <a class="code" href="classwxPGConstants.htm">wxPGConstants</a> choices;
        choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a>(wxT(<span class="stringliteral">"Line"</span>));
        choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a>(wxT(<span class="stringliteral">"Triangle"</span>));
        choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a>(wxT(<span class="stringliteral">"Rectangle"</span>));
        choices.<a class="code" href="classwxPGConstants.htm#wxPGConstantsa3">Add</a>(wxT(<span class="stringliteral">"Circle"</span>));

        <span class="comment">// Set items to choose from</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere22">SetPropertyChoices</a>( cpId, choices );
</div></pre><h2><a class="anchor" name="compiling">
Compiling wxPropertyGrid</a></h2>
Actual build process is described in readme.txt, so here is only information about compile options. Define these in library project settings, makefile, or if you prefer, at the top of <a class="el" href="propgrid_8h.htm">propgrid.h</a>.<p>
<b>wxPG_USE_CUSTOM_CONTROLS:</b> Default is 0. If set to 1, non-wxWindow based custom controls are used instead of normal controls. This will provide cleaner, less flickering appearance, but combobox may have less features and act a bit differently and textctrl has only generic key combinations.<h2><a class="anchor" name="usage2">
Using wxPropertyGridManager</a></h2>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> is an efficient multi-page version of <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>, which can optionally have toolbar for mode and page selection, help text box, and a compactor button.<p>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> mirrors most non-visual methods of <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>, some identically, some so that they can affect a property on any page, and some so that they can only affect selected target page.<p>
Generally, methods that operate on a property ( such as GetPropertyValue, SetPropertyValue, EnableProperty, LimitPropertyEditing, Delete, etc. ), work globally (so the given property can exist on any managed page).<p>
Methods that add properties ( Append, Insert, etc.) or operate on multiple properties (such as GetPropertyValues or SetPropertyValues), will work in target page only. Use SetTargetPage(index) method to set current target page. Changing a displayed page (using SelectPage(index), for example) will automatically set the target page to the one displayed.<p>
Global methods such as ExpandAll generally work on the target page only.<p>
Visual methods, such as SetCellBackgroundColour and GetNextVisible are only available in <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>. Use <a class="el" href="classwxPropertyGridManager.htm#wxPropertyGridManagera40">wxPropertyGridManager::GetGrid()</a> to obtain pointer to it.<p>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> constructor has exact same format as <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> constructor, and basicly accepts same extra window style flags (albeit also has some extra ones).<p>
Here's some example code for creating and populating a <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>:<p>
<pre class="fragment"><div>        <a class="code" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>* pgMan = <span class="keyword">new</span> <a class="code" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>(<span class="keyword">this</span>, PGID,
            wxDefaultPosition, wxDefaultSize,
            <span class="comment">// These and other similar styles are automatically</span>
            <span class="comment">// passed to the embedded wxPropertyGrid.</span>
            wxPG_BOLD_MODIFIED|wxPG_SPLITTER_AUTO_CENTER|
            <span class="comment">// Include toolbar.</span>
            wxPG_TOOLBAR |
            <span class="comment">// Include description box.</span>
            wxPG_DESCRIPTION |
            <span class="comment">// Include compactor.</span>
            wxPG_COMPACTOR |
            <span class="comment">// Plus defaults.</span>
            wxPGMAN_DEFAULT_STYLE
           );

        <span class="comment">// Adding a page sets target page to the one added, so</span>
        <span class="comment">// we don't have to call SetTargetPage if we are filling</span>
        <span class="comment">// it right after adding.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">AddPage</a>(wxT(<span class="stringliteral">"First Page"</span>));

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera8">AppendCategory</a>(wxT(<span class="stringliteral">"Category A1"</span>));

        <span class="comment">// Remember, the next line equals pgman-&gt;Append( wxIntProperty(wxT("Number"),wxPG_LABEL,1) );</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">Append</a>( wxT(<span class="stringliteral">"Number"</span>),wxPG_LABEL,1 );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">Append</a>( wxColourProperty(wxT(<span class="stringliteral">"Colour"</span>),wxPG_LABEL,*wxWHITE) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">AddPage</a>(wxT(<span class="stringliteral">"Second Page"</span>));

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">Append</a>( wxT(<span class="stringliteral">"Text"</span>),wxPG_LABEL,wxT(<span class="stringliteral">"(no text)"</span>) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">Append</a>( wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),wxPG_LABEL) );

        <span class="comment">// For total safety, finally reset the target page.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera168">SetTargetPage</a>(0);
</div></pre><h2><a class="anchor" name="misc">
Miscellaneous Topics</a></h2>
<h3><a class="anchor" name="boolproperty">
wxBoolProperty</a></h3>
There are few points about wxBoolProperty that require futher discussion:<ul>
<li>wxBoolProperty can be shown as either normal combobox, checkbox, or a combobox which cycles when double-clicked. Property attribute wxPG_BOOL_USE_CHECKBOX sets property to use checkbox, while wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING causes it to become double-click cycled combo box. For example, if you have a wxFlagsProperty, you can set its all items to use double-click cycling using the following: <pre class="fragment"><div>            pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere20">SetPropertyAttribute</a>(wxT(<span class="stringliteral">"MyFlagsProperty"</span>),wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING,(<span class="keywordtype">long</span>)1,wxRECURSE);
</div></pre></li></ul>
<p>
<ul>
<li>Default item names for wxBoolProperty are [False,True]. This can be changed using wxPropertyGrid::SetBoolChoices(true_choice,false_choice).</li></ul>
<h2><a class="anchor" name="proplist">
Property Descriptions</a></h2>
Here are descriptions of built-in properties, with attributes (see <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere20">wxPropertyGrid::SetPropertyAttribute</a>) that apply to them.<h3><a class="anchor" name="wxPropertyCategory">
wxPropertyCategory</a></h3>
<b>Inheritable Class:</b> <a class="el" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>.<p>
Not an actual property per se, but a header for a group of properties.<h3><a class="anchor" name="wxParentProperty">
wxParentProperty</a></h3>
Pseudo-property that can have sub-properties inserted under itself. Has textctrl editor that allows editing values of all sub-properties in a one string. In essence, it is a category that has look and feel of a property, and which children can be edited via the textctrl.<h3><a class="anchor" name="wxStringProperty">
wxStringProperty</a></h3>
Simple string property.<h3><a class="anchor" name="wxIntProperty">
wxIntProperty</a></h3>
Like wxStringProperty, but converts text to a signed long integer.<h3><a class="anchor" name="wxFloatProperty">
wxFloatProperty</a></h3>
Like wxStringProperty, but converts text to a double-precision floating point. Default float-to-text precision is 6 decimals, but this can be changed by modifying wxPG_FLOAT_PRECISION attribute.<h3><a class="anchor" name="wxBoolProperty">
wxBoolProperty</a></h3>
Represents a boolean value. wxChoice is used as editor control, by the default. wxPG_BOOL_USE_CHECKBOX attribute can be set to 1 inorder to use check box instead.<h3><a class="anchor" name="wxLongStringProperty">
wxLongStringProperty</a></h3>
<b>Inheritable Class:</b> wxLongStringPropertyClass<p>
Like wxStringProperty, but has a button that triggers a small text editor dialog.<h3><a class="anchor" name="wxDirProperty">
wxDirProperty</a></h3>
Like wxLongStringProperty, but the button triggers dir selector instead.<h3><a class="anchor" name="wxFileProperty">
wxFileProperty</a></h3>
<b>Inheritable Class:</b> wxFilePropertyClass<p>
Like wxLongStringProperty, but the button triggers file selector instead. Default wildcard is "All files..." but this can be changed by setting wxPG_FILE_WILDCARD attribute (see wxFileDialog for format details). Attribute wxPG_FILE_SHOW_FULL_PATH can be set to 0 inorder to show only the filename, not the entire path.<h3><a class="anchor" name="wxEnumProperty">
wxEnumProperty</a></h3>
<b>Inheritable Class:</b> wxEnumPropertyClass<p>
Represents a single selection from a list of choices - wxChoice is used to edit the value.<h3><a class="anchor" name="wxFlagsProperty">
wxFlagsProperty</a></h3>
<b>Inheritable Class:</b> wxFlagsPropertyClass<p>
Represents a bit set that fits in a long integer. wxBoolProperty sub-properties are created for editing individual bits. Textctrl is created to manually edit the flags as a text; a continous sequence of spaces, commas and semicolons is considered as a flag id separator.<h3><a class="anchor" name="wxArrayStringProperty">
wxArrayStringProperty</a></h3>
<b>Inheritable Class:</b> wxArrayStringPropertyClass<p>
Allows editing of a list of strings in wxTextCtrl and in a separate dialog.<h3><a class="anchor" name="wxMultiChoiceProperty">
wxMultiChoiceProperty</a></h3>
Allows editing a multiple selection from a list of strings. This is property is pretty much built around concept of wxMultiChoiceDialog.<h3><a class="anchor" name="wxImageFileProperty">
wxImageFileProperty</a></h3>
<b>Inheritable Class:</b> wxImageFilePropertyClass<p>
Like wxFileProperty, but has thumbnail of the image in front of the filename and autogenerates wildcard from available image handlers.<h3><a class="anchor" name="wxColourProperty">
wxColourProperty</a></h3>
Represents wxColour. wxChoice is used to edit the value. Drop-down list has few basic colour choices.<h3><a class="anchor" name="wxFontProperty">
wxFontProperty</a></h3>
Represents wxFont. Various sub-properties are used to edit individual subvalues.<h3><a class="anchor" name="wxSystemColourProperty">
wxSystemColourProperty</a></h3>
<b>Inheritable Class:</b> wxSystemColourPropertyClass<p>
Represents wxColour and a system colour index. wxChoice is used to edit the value. Drop-down list has color images.<h3><a class="anchor" name="wxCursorProperty">
wxCursorProperty</a></h3>
Represents a wxCursor. wxChoice is used to edit the value. Drop-down list has cursor images under some (wxMSW) platforms.<h3><a class="anchor" name="wxCustomProperty">
wxCustomProperty</a></h3>
<b>Inheritable Class:</b> wxCustomPropertyClass<p>
A customizable property class with string data type. Value image, Editor class, and children can be modified.<h3><a class="anchor" name="Additional">
Sample Properties</a></h3>
Sample application has following additional examples of custom properties:<ul>
<li>wxFontDataProperty ( edits wxFontData )</li><li>wxPointProperty ( edits wxPoint )</li><li>wxSizeProperty ( edits wxSize )</li><li>wxAdvImageFileProperty ( like wxImageFileProperty, but also has a drop-down for recent image selection)</li><li>wxDirsProperty ( edits a wxArrayString consisting of directory strings)</li><li>wxArrayDoubleProperty ( edits wxArrayDouble )</li></ul>
<h2><a class="anchor" name="userhelp">
Using wxPropertyGrid</a></h2>
This is a short summary of how a <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is used (not how it is programmed), or, rather, how it <b>should</b> behave in practice.<p>
<ul>
<li>Basic mouse usage is as follows:<br>
<ul>
<li>Clicking property label selects it.</li><li>Clicking property value selects it and focuses to editor control.</li><li>Clicking category label selects the category.</li><li>Double-clicking category label selects the category and expands/collapses it.</li><li>Double-clicking labels of a property with children expands/collapses it.</li></ul>
</li></ul>
<p>
<ul>
<li>Keyboard usage is as follows:<br>
 When editor control is not focused:<br>
<ul>
<li>cursor up - moves to previous visible property<br>
</li><li>cursor down - moves to next visible property<br>
</li><li>cursor left - if collapsible, collapses, otherwise moves to previous property<br>
</li><li>cursor right - if expandable, expands, otherwise moves to next property<br>
</li><li>tab (if enabled) - focuses keyboard to the editor control of selected property<br>
 When editor control is focused:<br>
</li><li>tab - moves to next visible property<br>
</li><li>shift-tab - moves to previous visible property<br>
</li><li>escape - unfocuses from editor control<br>
</li></ul>
</li></ul>
<p>
<ul>
<li>wxTextCtrl / wxCustomTextCtrl based editors only report that value has actually changed if text was changed and return was pressed afterwards.</li></ul>
<p>
<ul>
<li>In long strings tabs are represented by "\t" and line break by "\n".</li></ul>
<h2><a class="anchor" name="issues">
Issues</a></h2>
These are not bugs per se, but miscellaneous cross-platform issues that have been resolved in a less-than-satisfactory manner.<ul>
<li>wxMSW: Toolbar's ToggleTool doesn't disable last item in the same radiogroup. AFAIK, there is no way to do that.</li><li>wxMSW: wxCCustomTextCtrl copy-pasting causes memory leak unless app calls wxTheClipboard-&gt;Flush() before exiting.</li><li>Atleast with wxGTK2+Unicode+Debug Mode File Selector dialog may trigger an assertion failure (line 1060 in string.cpp with 2.5.3) that can be cancelled probably without any ill-effect.</li></ul>
<p>
Following only apply when <b>not</b> using custom controls:<ul>
<li>Under GTK, EVT_MOTION does not trigger for child control. Causes cursor change inconsistencies. Permanent mouse capture is not practical since it causes wxWindow:: SetCursor to fail (and events cannot be relayed to native controls anyway). Easy solution used: Splitter drag detect margin and control do not overlap.</li><li>When splitter is being dragged, active editor control (button as well under wxGTK) is hidden to prevent flickering. This may go unnoticed with some controls (wxTextCtrl) but is very noticeable with others (wxChoice).</li><li>Under MSW, when resizing, editor controls flicker. No easy fix here (wxEVT_ONIDLE might be employed).</li><li>Under GTK 1.2, font may show invisible if it is not bold (so it is forced).</li><li>Under wxGTK, controls may flicker a bit (actually, a lot) when being shown.</li></ul>
<h2><a class="anchor" name="bugs">
Known Bugs</a></h2>
Any insight on these is more than welcome.<ul>
<li>I have experienced a complete freeze when toying with the popup of wxAdvImageProperty. Visiting another window will end it.</li><li>wxGTK: in sample application, property text colour is not set correct from wxSystemColourProperty. Value is correct, but the resulting text colour is sometimes a bit skewed if it is not a shade of gray. This may be GTK's attempt to auto-adjust it. Following are wxWidgets or platform bugs:</li><li>wxWidgets 2.5.2: No proper uxtheme (WinXP buttons etc). Possibly other nasty problems.</li><li>wxWidgets 2.5.3: No mouse wheel scrolling in drop down lists.</li><li>wxMSW: After (real) popup window is shown in <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>, grid's scrollbar won't get hilight until another window is visited. This is probably a Windows bug.</li><li>wxGTK: image handlers return only the first character of an extension</li><li>wxGTK+ 1.2: Controls sometimes disappear. They reappear when cursor is moved over them.</li><li>wxGTK: No proper static text wrapping, so help box text may appear incorrectly.</li><li>wxGTK+ 1.2: Cannot set (multiple) items for wxListBox (affects wxMultiChoiceProperty).</li></ul>
<h2><a class="anchor" name="todo">
Todo</a></h2>
For a detailed TODO, see propertygrid.cpp (just search for "todo" and you'll find it).<h2><a class="anchor" name="notes">
Design Notes</a></h2>
<ul>
<li>Currently <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> uses "easy" way to relay events from embedded <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>. That is, the exact same id is used for both.</li></ul>
<p>
<ul>
<li>wxHashMap used to access properties by name uses 'const wxChar*' instead of 'wxString'. Altough this has somewhat lower performance if used mostly with wxStrings, it is much faster if a lot of non-wxString strings are used, since they don't have to be recreated as wxString before using with the hashmap. If you want to change this behaviour, see propertygrid.h. Comment current version (including wxPGNameStr), and uncomment version that uses wxString. Note that with unicode, wxString is always used (due to some weird issues).</li></ul>
<p>
<ul>
<li>If wxPG_DOUBLE_BUFFER is 1 (default for MSW, GTK and MAC), wxPropertyGrid::OnDrawItems composes the image on a wxMemoryDC. This effectively eliminates flicker caused by drawing itself (property editor controls are another matter).</li></ul>
<p>
<ul>
<li>Under wxMSW, flicker freedom with native editor controls is achieved by creating them at 'out of sight' position, then hiding&amp;freezing them, then moving them to the correct position, and finally thawing&amp;showing them.</li></ul>
<h2><a class="anchor" name="crossplatform">
Crossplatform Notes</a></h2>
<ul>
<li>GTK1: When showing a dialog you may encounter invisible font! Solution: Set parent's font using SetOwnFont instead of SetFont.</li></ul>
<p>
<ul>
<li>GTK: Your own control can overdraw wxGTK wxWindow border!</li></ul>
<p>
<ul>
<li>wxWindow::SetSizeHints may be necessary to shrink controls below certain treshold, but only on some platforms. For example wxMSW might allow any shrinking without SetSizeHints call where wxGTK might not.</li></ul>
<p>
<ul>
<li>GTK Choice (atleast, maybe other controls as well) likes its items set in constructor. Appending them seems to be slower (Freeze+Thaw won't help). Even using Append that gets wxArrayString argument may not be good, since it may just append every string one at a time.</li></ul>
<h2><a class="anchor" name="newprops">
Creating New Properties</a></h2>
<b>Note:</b> This section is under construction!<p>
Each property class represents a specialized value storage for a value type. It also nominates an editor class to itself, and implements some helper methods to complement the used value type and editor classes.<p>
Easiest way to create a new property is to use one of the supplied macro pairs (see the section below).<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Code that implements a property generally requires inclusion of wx/propgrid/propdev.h.</li><li>Read <a class="el" href="classwxPGProperty.htm">wxPGProperty</a> and <a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> class documentation to find out what each overriddable method should do.</li></ul>
</dd></dl>
<h3><a class="anchor" name="methoda">
Macro Pairs</a></h3>
<h4><a class="anchor" name="custstringprop">
String Property with Button</a></h4>
This custom property will be exactly the same as wxLongStringProperty, except that you can specify a custom code to handle what happens when the button is pressed.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_STRING_PROPERTY(PROPNAME)
</div></pre><p>
In source: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        WX_PG_IMPLEMENT_STRING_PROPERTY(PROPNAME)
        <span class="keywordtype">bool</span> PROPNAMEClass::OnButtonClick ( wxPropertyGrid* propgrid, wxString&amp; value )
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show dialog, read initial string from value. If changed,</span>
            <span class="comment">//   store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</div></pre><h4><a class="anchor" name="custflagsprop">
Custom Flags Property</a></h4>
Flags property with custom default value and built-in labels/values.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(PROPNAME)
</div></pre><p>
In source: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// LABELS, VALUES and ITEMCOUNT are as in the arguments to wxFlagsProperty</span>
        <span class="comment">// constructor. DEFVAL is the new default value (normally it is 0).</span>
        WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY(PROPNAME,LABELS,VALUES,ITEMCOUNT,DEFAULT_FLAGS)
</div></pre><p>
The new property class will have simple (label,name,value) constructor.<h4><a class="anchor" name="custenumprop">
Custom EnumProperty</a></h4>
Exactly the same as custom FlagsProperty. Simply replace FLAGS with ENUM in macro names to create wxEnumProperty based class instead.<h4><a class="anchor" name="custarraystringprop">
Custom ArrayString property</a></h4>
This type of custom property allows selecting different string delimiter (default is '"' on both sides of the string - as in C code), and allows adding custom button into the editor dialog.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty)
</div></pre><p>
In source:<p>
<pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// second argument = string delimiter. '"' for C string style (default),</span>
        <span class="comment">//    and anything else for str1&lt;delimiter&gt; str2&lt;delimiter&gt; str3 style</span>
        <span class="comment">//    (so for example, using ';' would result to str1; str2; str3).</span>
        <span class="comment">// third argument = const wxChar* text for the custom button. If NULL</span>
        <span class="comment">//    then no button is added.</span>
        WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty,<span class="charliteral">','</span>,wxT(<span class="stringliteral">"Browse"</span>))

        <span class="keywordtype">bool</span> wxMyArrayStringPropertyClass::OnCustomStringEdit (wxWindow* parent,
                                                               wxString&amp; value)
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show custom editor dialog, read initial string from value.</span>
            <span class="comment">//   If changed, store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</div></pre><h4><a class="anchor" name="custcolprop">
Custom ColourProperty</a></h4>
wxColourProperty/wxSystemColourProperty that can have custom list of colours in dropdown.<p>
Use version that doesn't have _USES_WXCOLOUR in macro names to have <a class="el" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a> as value type instead of plain wxColour (in this case values array might also make sense).<p>
In header: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/advprops.h&gt;</span>
        WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty)
</div></pre><p>
In source:<p>
<pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// Colour labels. Last (before NULL, if any) must be Custom.</span>
        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* mycolprop_labels[] = {
            wxT(<span class="stringliteral">"Black"</span>),
            wxT(<span class="stringliteral">"Blue"</span>),
            wxT(<span class="stringliteral">"Brown"</span>),
            wxT(<span class="stringliteral">"Custom"</span>),
            (<span class="keyword">const</span> wxChar*) NULL
        };

        <span class="comment">// Relevant colour values as unsigned longs.</span>
        <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> mycolprop_colours[] = {
            <a class="code" href="group__miscellaneous.htm#ga3">wxPG_COLOUR</a>(0,0,0),
            <a class="code" href="group__miscellaneous.htm#ga3">wxPG_COLOUR</a>(0,0,255),
            <a class="code" href="group__miscellaneous.htm#ga3">wxPG_COLOUR</a>(166,124,81),
            <a class="code" href="group__miscellaneous.htm#ga3">wxPG_COLOUR</a>(0,0,0)
        };

        <span class="comment">// Implement property class. Third argument is optional values array,</span>
        <span class="comment">// but in this example we are only interested in creating a shortcut</span>
        <span class="comment">// for user to access the colour values. Last arg is itemcount, but</span>
        <span class="comment">// that's not necessary because our label array is NULL-terminated.</span>
        WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty,
                                                             mycolprop_labels,
                                                             (<span class="keywordtype">long</span>*)NULL,
                                                             mycolprop_colours,
                                                             0)
</div></pre><h3><a class="anchor" name="declaring">
Declaring an Arbitrary Property</a></h3>
To make your property available globally, you need to declare it in a header file. Usually you would want to use WX_PG_DECLARE_PROPERTY macro to do that (it is in <a class="el" href="propgrid_8h.htm">propgrid.h</a>). It has three arguments: PROPNAME, T_AS_ARG and DEFVAL. PROPNAME is property NAME, T_AS_ARG is type input in function argument list ( "int" for int value type, "const wxString&amp;" for wxString value type, etc.), and DEFVAL is default value for that.<p>
For example:<p>
<pre class="fragment"><div>        <span class="comment">// Declare wxRealPoint Property</span>
        WX_PG_DECLARE_PROPERTY(wxRealPointProperty,<span class="keyword">const</span> wxRealPoint&amp;,wxRealPoint(0.0,0.0))
</div></pre><p>
There is also WX_PG_DECLARE_PROPERTY_WITH_DECL which takes an additional declaration argument (export ,for example, when exporting from a dll).<p>
If you want that your property could be inherited from, then you would also have to define the class body in the header file. In most cases this is not necessary and the class can be defined and implemented completely in the source.<h3><a class="anchor" name="designtypes">
Design Types of Properties</a></h3>
When speaking from an object design perspective, there are basicly five different types of properties:<p>
<b>Basic</b>: These derive directly from base abstract property class (<a class="el" href="classwxPGProperty.htm">wxPGProperty</a>). By far the most commonly used design type.<p>
<b>With Children</b>: These derive directly from base abstract parent property class (<a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>). Font property and flags property, for example, are of this design type.<p>
<b>Inherited</b>: These are inherited from a working property class but do not use the same value type (for example, SystemColour property inherits from Enum property but has different value type).<p>
<b>Simple Inherited</b>: These are inherited from a working property class and use the same value type (for example, Cursor property inherits from Enum property and uses the same value type).<p>
<b>Inherited With Subset Value</b>: These are like Simple Inherited but they do not use the same value type. However, they *do* use the same value data to store a subset of the parent class' value (for example, Colour property has subset of SystemColour property's value).<h3><a class="anchor" name="implementing">
Implementing a Property</a></h3>
First there is class body with WX_PG_DECLARE_PROPERTY_CLASS (or similar) macro, constructor, virtual destructor, and declarations for other overridden methods. Then comes WX_PG_IMPLEMENT_PROPERTY_CLASS (or similar) macro, and after that class method implementations.<h3><a class="anchor" name="Tips">
Tips</a></h3>
<ul>
<li>To get property's parent grid, call GetParentState()-&gt;GetGrid()</li></ul>
<h3><a class="anchor" name="valuetypes">
Creating New Value Types</a></h3>
If you want to a property to use a value type that is not among the builtin types, then you need to create a new property value type. It is quite straightforward, using two macros.<p>
In header, use WX_PG_DECLARE_VALUE_TYPE(DATATYPE), like this:<p>
<pre class="fragment"><div>        <span class="comment">// Example: Declare value type for wxRealPoint.</span>
        WX_PG_DECLARE_VALUE_TYPE(wxRealPoint)
</div></pre><p>
If, however, class of your value type does not inherit from wxObject, and you need to use it in wxVariant list used as a persistent storage (for example, see <a class="el" href="classwxPropertyGrid.htm#wxPropertyGrida107">wxPropertyGrid::GetPropertyValues</a>), then use this instead, as it also declares a necessary wxVariantData_DATATYPE class.<p>
<pre class="fragment"><div>        <span class="comment">// Example: Declare value type and wxVariantData class for wxRealPoint.</span>
        WX_PG_DECLARE_VALUE_TYPE_VOIDP(wxRealPoint)
</div></pre><p>
There are also _WITH_DECL versions of both.<p>
However, there are a few different implement macros to place in a source file. Pick one according to the type of type.<p>
<pre class="fragment"><div>        <span class="comment">// For implementing value type for a wxObject based class.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// Same as above, except that an instance of TYPE is</span>
        <span class="comment">// stored in class. Thus, DEFVAL can be any expression</span>
        <span class="comment">// that can be assigned to the type.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_OWNDEFAULT(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// For implementing value type for a non-wxObject based class.</span>
        <span class="comment">// Like with ...WXOBJ_OWNDEFAULT macro above, instance of TYPE</span>
        <span class="comment">// is stored and DEFVAL can be any expression.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_SIMPLE(TYPE,DEFPROPERTY,DEFVAL) 

        <span class="comment">// Like above, but also implement the wxVariantData class</span>
        <span class="comment">// declared with the second type value type declare macro.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP(TYPE,DEFPROPERTY,DEFVAL) 

        <span class="comment">// Like above, but accepts a custom wxVariantData class.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(TYPE,DEFPROPERTY,DEFVAL,VARIANTDATACLASS) 

        <span class="comment">// For implementing value type with different default value.</span>
        WX_PG_IMPLEMENT_DERIVED_TYPE(TYPENAME,PARENTVT,DEFVAL)

        <span class="comment">// For implementing value type for a native value.</span>
        <span class="comment">// Generally should not be used since it is meant for</span>
        <span class="comment">// wxString, int, double etc. which are already implemented.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE(TYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL)
</div></pre><p>
Argument descriptions:<p>
TYPE - Actual data type represented by the value type, or if derived type, any custom name.<p>
DEFPROPERY - Name of the property that will edit this value type by default.<p>
DEFVAL - Default value for the property.<p>
TYPENAME - An arbitraty typename for this value type. Applies only to the derived type.<p>
PARENTVT - Name of parent value type, from which this derived type inherits from.<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Your class, which you create value type for, must have a copy constructor. </li></ul>
</dd></dl>
<hr size="1"><address style="align: right;"><small>Generated on Thu Apr 14 22:21:04 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
