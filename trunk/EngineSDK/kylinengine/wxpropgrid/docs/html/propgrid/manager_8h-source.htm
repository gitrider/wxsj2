<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: manager.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>manager.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        manager.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGridManager</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Jan-14-2005</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_MANAGER_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_MANAGER_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "manager.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">// -----------------------------------------------------------------------</span>
00020 
00021 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridManagerNameStr;
00022 
00023 <span class="comment">// -----------------------------------------------------------------------</span>
00024 
00025 <span class="comment">// This is for mirroring wxPropertyGrid methods with ease.</span>
00026 <span class="comment">// Needs to be in hear because of inlines.</span>
00027 <span class="preprocessor">#define wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(NAME,AT1) \</span>
00028 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGId id, AT1 _av1_ ) \</span>
00029 <span class="preprocessor">{ \</span>
00030 <span class="preprocessor">    wxPGProperty* p = wxPGIdToPtr(id); \</span>
00031 <span class="preprocessor">    wxPropertyGridState* pState = p-&gt;GetParentState(); \</span>
00032 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00033 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00034 <span class="preprocessor">    else pState-&gt;NAME(p,_av1_); \</span>
00035 <span class="preprocessor">} \</span>
00036 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGNameStr name, AT1 _av1_ ) \</span>
00037 <span class="preprocessor">{ \</span>
00038 <span class="preprocessor">    wxPropertyGridState* pState; \</span>
00039 <span class="preprocessor">    wxPGId id = GetPropertyByName2(name,&amp;pState); \</span>
00040 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00041 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00042 <span class="preprocessor">    else pState-&gt;NAME(wxPGIdToPtr(id),_av1_); \</span>
00043 <span class="preprocessor">}</span>
00044 <span class="preprocessor"></span>
00045 <span class="keyword">class </span>wxPropertyGridPageData;
00046 
00047 <span class="preprocessor">#define wxPG_IPAM_DECL inline</span>
00048 <span class="preprocessor"></span>
00087 <span class="comment">// BM_MANAGER</span>
<a name="l00088"></a><a class="code" href="classwxPropertyGridManager.htm">00088</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridManager : <span class="keyword">public</span> wxPanel, <span class="keyword">public</span> <a class="code" href="classwxPropertyContainerMethods.htm">wxPropertyContainerMethods</a>
00089 {
00090         DECLARE_CLASS(wxPropertyGridManager)
00091 
00092 <span class="keyword">public</span>:
00093 
00097     wxPropertyGridManager();
00098 
00103     wxPropertyGridManager(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00104                       <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00105                       <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00106                       <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga18">wxPGMAN_DEFAULT_STYLE</a>,
00107                       <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00108 
00110     <span class="keyword">virtual</span> ~wxPropertyGridManager();
00111 
<a name="l00129"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">00129</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> AddPage ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap )
00130     {
00131         <span class="keywordflow">return</span> InsertPage (-1,label,bmp);
00132     }
00133 
<a name="l00135"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera8">00135</a>     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
00136     {
00137         wxASSERT ( m_targetState );
00138         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>(label,name) );
00139     }
00140 
<a name="l00142"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">00142</a>     <span class="keyword">inline</span> wxPGId Append ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00143     {
00144         wxASSERT ( m_targetState );
00145         <span class="keywordflow">return</span> m_targetState-&gt;Append(property);
00146     }
00147 
00148     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
00149     {
00150         wxASSERT ( m_targetState );
00151         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxStringProperty(label,name,value) );
00152     }
00153 
00154     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
00155     {
00156         wxASSERT ( m_targetState );
00157         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxIntProperty(label,name,value) );
00158     }
00159 
00160     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
00161     {
00162         wxASSERT ( m_targetState );
00163         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxFloatProperty(label,name,value) );
00164     }
00165 
00166     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
00167     {
00168         wxASSERT ( m_targetState );
00169         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxBoolProperty(label,name,value) );
00170     }
00171 
<a name="l00173"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera10">00173</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00174     {
00175         wxASSERT ( m_targetState );
00176         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)(<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>,-1,property);
00177     }
00178 
<a name="l00180"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera9">00180</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00181     {
00182         wxASSERT ( m_targetState );
00183         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)(<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)m_targetState-&gt;BaseGetPropertyByName(name),-1,property);
00184     }
00185     
00186     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> );
00187 
00188     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
00189     {
00190         m_propGrid.ClearModifiedStatus();
00191     }
00192 
00193     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGId <span class="keywordtype">id</span> );
00194     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGNameStr name );
00195     
00197     <span class="keywordtype">bool</span> Collapse ( wxPGId <span class="keywordtype">id</span> );
00198     <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name );
00199 
<a name="l00201"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera18">00201</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll ()
00202     {
00203         m_targetState-&gt;ExpandAll(0);
00204     }
00205 
00209     <span class="keywordtype">void</span> Compact ( <span class="keywordtype">bool</span> compact );
00210 
00216     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00217                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00218                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00219                 <span class="keywordtype">long</span> style = wxPGMAN_DEFAULT_STYLE,
00220                 <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00221 
00223     <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> );
00224     <span class="keywordtype">void</span> Delete ( wxPGNameStr name );
00225 
<a name="l00227"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera24">00227</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
00228 
<a name="l00230"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera23">00230</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
00231 
<a name="l00235"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera25">00235</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable )
00236     {
00237         <span class="keywordtype">long</span> fl = m_windowStyle | <a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>;
00238         <span class="keywordflow">if</span> ( enable ) fl = m_windowStyle &amp; ~(<a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>);
00239         SetWindowStyleFlag(m_windowStyle);
00240         <span class="keywordflow">return</span> TRUE;
00241     }
00242 
00244     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
00245     <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE );
00246 
<a name="l00250"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera29">00250</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> )
00251     {
00252         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>)-&gt;GetParentState());
00253     }
00254 
<a name="l00258"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera28">00258</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name )
00259     {
00260         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate;
00261         wxPGId <span class="keywordtype">id</span> = GetPropertyByName2(name,&amp;pstate);
00262         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,pstate);
00263     }
00264 
00266     <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> );
00267     <span class="keywordtype">bool</span> Expand ( wxPGNameStr name );
00268 
<a name="l00270"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera32">00270</a>     <span class="keywordtype">void</span> ExpandAll ()
00271     {
00272         m_targetState-&gt;ExpandAll(1);
00273     }
00274 
00276     <span class="comment">/*wxColour GetCategoryColour ( wxPGId id )</span>
00277 <span class="comment">    {</span>
00278 <span class="comment">        return wxPropertyGrid::GetCategoryColour(id);</span>
00279 <span class="comment">    }</span>
00280 <span class="comment">    wxColour GetCategoryColour ( wxPGNameStr name ) { return GetCategoryColour(GetPropertyByName(name)); }*/</span>
00281 
<a name="l00283"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera36">00283</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
00284     {
00285         <span class="keywordflow">return</span> GetChildrenCount( wxPGId(m_propGrid.m_pState-&gt;m_properties) );
00286     }
00287 
00289     size_t GetChildrenCount ( <span class="keywordtype">int</span> page_index );
00290 
<a name="l00292"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera34">00292</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00293 <span class="keyword">    </span>{
00294         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00295         <span class="keywordflow">return</span> ((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>)-&gt;GetChildCount();
00296     }
00297 
<a name="l00299"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera33">00299</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
00300 
<a name="l00302"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera37">00302</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
00303 <span class="keyword">    </span>{
00304         <span class="keywordflow">return</span> m_targetState-&gt;GetFirst();
00305     }
00306 
<a name="l00308"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera38">00308</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
00309 <span class="keyword">    </span>{
00310         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstCategory ();
00311     }
00312 
<a name="l00314"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera39">00314</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()<span class="keyword"> const</span>
00315 <span class="keyword">    </span>{
00316         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstProperty();
00317     }
00318 
<a name="l00323"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera40">00323</a>     <span class="keyword">inline</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* GetGrid()
00324     {
00325         <span class="comment">// FIXME</span>
00326         <span class="comment">//wxASSERT( m_iFlags &amp; wxPG_FL_INITIALIZED );</span>
00327         <span class="keywordflow">return</span> &amp;m_propGrid;
00328     };
00329 
<a name="l00334"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera42">00334</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
00335     {
00336         wxASSERT ( wxPGIdIsOk(parent) );
00337         <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp; p = (<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp;)parent.GetProperty();
00338         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa14">GetCount</a>() ) <span class="keywordflow">return</span> wxPGId();
00339         <span class="keywordflow">return</span> wxPGId(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa42">Last</a>());
00340     }
00341     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
00342     
<a name="l00344"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera43">00344</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00345 <span class="keyword">    </span>{
00346         wxASSERT ( m_targetState );
00347         <span class="keywordflow">return</span> m_targetState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
00348     }
00349 
<a name="l00353"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera44">00353</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00354 <span class="keyword">    </span>{
00355         wxASSERT ( m_targetState );
00356         <span class="keywordflow">return</span> m_targetState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
00357     }
00358 
00360     <span class="keywordtype">int</span> GetPageByName ( <span class="keyword">const</span> wxChar* name ) <span class="keyword">const</span>;
00361 
00365     <span class="keywordtype">int</span> GetPageByState( <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate ) <span class="keyword">const</span>;
00366 
<a name="l00368"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera49">00368</a>     size_t GetPageCount ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrPages.GetCount(); }
00369 
00371     <span class="keyword">const</span> wxString&amp; GetPageName ( <span class="keywordtype">int</span> index ) <span class="keyword">const</span>;
00372 
<a name="l00374"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera51">00374</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00375 <span class="keyword">    </span>{
00376         <span class="keywordflow">return</span> m_targetState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
00377     }
00378 
<a name="l00380"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera53">00380</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
00381     {
00382         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
00383     }
00384     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
00385     {
00386         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00387     }
00388 
00394     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name,
00395         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**)NULL ) <span class="keyword">const</span>;
00396 
<a name="l00400"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera57">00400</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00401 <span class="keyword">    </span>{
00402         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<span class="keywordtype">id</span>);
00403     }
00404     wxPGId GetPropertyCategory ( wxPGNameStr name )<span class="keyword"> const</span>
00405 <span class="keyword">    </span>{
00406         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00407     }
00408 
<a name="l00410"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera63">00410</a>     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00411 <span class="keyword">    </span>{
00412         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<span class="keywordtype">id</span>);
00413     }
00414     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
00415 <span class="keyword">    </span>{
00416         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00417     }
00418 
<a name="l00420"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera65">00420</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida85">GetPropertyHelpString</a> ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00421 <span class="keyword">    </span>{
00422         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00423         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
00424     }
00425 
<a name="l00427"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera64">00427</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida85">GetPropertyHelpString</a> ( wxPGNameStr name )<span class="keyword"> const</span>
00428 <span class="keyword">    </span>{
00429         <span class="keywordflow">return</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida85">GetPropertyHelpString</a>(GetPropertyByNameWithAssert(name));
00430     }
00431 
00432 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
00433 <span class="preprocessor"></span>
00436     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGId <span class="keywordtype">id</span> )
00437     {
00438         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00439         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValidator();
00440     }
00441     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGNameStr name )
00442     {
00443         <span class="keywordflow">return</span> GetPropertyValidator(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00444     }
00445 <span class="preprocessor">#endif</span>
00446 <span class="preprocessor"></span>
<a name="l00456"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera87">00456</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
00457         wxPGId baseparent = wxPGId(), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
00458 <span class="keyword">    </span>{
00459         <span class="keywordflow">return</span> m_targetState-&gt;GetPropertyValues(listname,baseparent,flags);
00460     }
00461 
<a name="l00465"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera90">00465</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_targetState-&gt;m_properties); }
00466 
<a name="l00468"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera91">00468</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelectedPage ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00469 
<a name="l00471"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera92">00471</a>     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const</span>
00472 <span class="keyword">    </span>{
00473         <span class="keywordflow">return</span> m_propGrid.GetSelection();
00474     }
00475 
<a name="l00477"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera93">00477</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00478 
<a name="l00481"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera95">00481</a>     <span class="keyword">inline</span> wxToolBar* GetToolBar()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pToolbar; }
00482 
<a name="l00483"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera96">00483</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride23">InitAllTypeHandlers</a> ()
00484     {
00485         <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride23">wxPropertyGrid::InitAllTypeHandlers</a>();
00486     }
00487 
<a name="l00489"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera98">00489</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00490     {
00491         wxASSERT ( m_targetState );
00492         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>),index,property);
00493         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00494             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00495         <span class="keywordflow">return</span> res_id;
00496     }
00497 
<a name="l00499"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera97">00499</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00500     {
00501         wxASSERT ( m_targetState );
00502         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(m_targetState-&gt;BaseGetPropertyByName(name)),index,property);
00503         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00504             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00505         <span class="keywordflow">return</span> res_id;
00506     }
00507 
00523     <span class="keywordtype">int</span> InsertPage ( <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap );
00524 
00526     <span class="keywordtype">bool</span> IsAnyModified () <span class="keyword">const</span>;
00527 
<a name="l00529"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera101">00529</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_propGrid.m_frozen&gt;0)?TRUE:FALSE; }
00530 
00532     <span class="keywordtype">bool</span> IsPageModified ( size_t index ) <span class="keyword">const</span>;
00533 
<a name="l00535"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera106">00535</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida135">IsPropertyCategory</a> ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00536 <span class="keyword">    </span>{
00537         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
00538     }
00539     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida135">IsPropertyCategory</a> ( wxPGNameStr name ) { <span class="keywordflow">return</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida135">IsPropertyCategory</a>(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)); }
00540 
00542     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
00543     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE );
00544 
00545     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refresh (<span class="keywordtype">bool</span> eraseBackground = <span class="keyword">true</span>,
00546                           <span class="keyword">const</span> wxRect* rect = (<span class="keyword">const</span> wxRect*) NULL);
00547 
00549     <span class="keywordtype">void</span> SelectPage ( <span class="keywordtype">int</span> index );
00550 
<a name="l00552"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera124">00552</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectPage ( <span class="keyword">const</span> wxChar* name )
00553     {
00554         SelectPage ( GetPageByName(name) );
00555     }
00556 
00558     <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE );
00559     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
00560     {
00561         SelectProperty(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),focus);
00562     }
00563 
00566     <span class="keywordtype">void</span> SetDescription ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; content );
00567 
<a name="l00570"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera129">00570</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
00571     {
00572         <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>* pc = (<a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>);
00573 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00574 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParentingType</a>() &gt; 0 );
00575 <span class="preprocessor">#endif</span>
00576 <span class="preprocessor"></span>        m_targetState-&gt;m_currentCategory = pc;
00577     }
00578 
<a name="l00581"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera128">00581</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name )
00582     {
00583         SetCurrentCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00584     }
00585 
00587     <span class="keywordtype">void</span> SetDescBoxHeight ( <span class="keywordtype">int</span> ht, <span class="keywordtype">bool</span> refresh = TRUE );
00588 
<a name="l00593"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera130">00593</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
00594     {
00595         m_propGrid.SetDefaultPriority(priority);
00596     }
00597 
<a name="l00599"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera123">00599</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
00600     {
00601         m_propGrid.ResetDefaultPriority();
00602     }
00603 
00606     <span class="keywordtype">void</span> SetPropertyLabel( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newlabel );
00607     <span class="keywordtype">void</span> SetPropertyLabel( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newlabel );
00608 
<a name="l00612"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera138">00612</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col )
00613     {
00614         m_propGrid.SetPropertyColour ( <span class="keywordtype">id</span>, col );
00615     }
00616     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
00617     {
00618         m_propGrid.SetPropertyColour ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), col );
00619     }
00620 
<a name="l00622"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera140">00622</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
00623     {
00624         m_propGrid.SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
00625     }
00626     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
00627     {
00628         m_propGrid.SetColourIndex ( wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)), 0 );
00629     }
00630 
00634     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
00635     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority );
00636 
00637     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value );
00638     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value );
00639     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value );
00640     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value );
00641     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
00642     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value );
00643     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
00644     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value );
00645     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
00646     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value );
00647     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value );
00648     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value );
00649     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value );
00650     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value );
00651     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value );
00652     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value );
00653     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value );
00654     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value );
00655     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxPoint&amp;)
00656     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxSize&amp;)
00657     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxArrayInt&amp;)
00658 
00659     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
00660     {
00661         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
00662     }
00663 
00664     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
00665     {
00666         SetPropertyValue(name,&amp;value);
00667     }
00668 
00669     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
00670     {
00671         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
00672     }
00673     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
00674     {
00675         SetPropertyValue(name,wxString(value));
00676     }
00677 
00682     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
00683     {
00684         m_targetState-&gt;SetPropertyValues(list,default_category);
00685     }
00686 
00687     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
00688     {
00689         SetPropertyValues (list.GetList(),default_category);
00690     }
00691     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00692     {
00693         SetPropertyValues (list,<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
00694     }
00695     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00696     {
00697         SetPropertyValues (list.GetList(),<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
00698     }
00699 
00703     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
00704     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGNameStr name );
00705 
00707     <span class="comment">//inline void SetSelection ( int index ) { SelectPage(index); }</span>
00708 
<a name="l00710"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera166">00710</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetStringSelection ( <span class="keyword">const</span> wxChar* name )
00711     {
00712         SelectPage ( GetPageByName(name) );
00713     }
00714 
00719     <span class="keywordtype">void</span> SetTargetPage ( <span class="keywordtype">int</span> index );
00720 
<a name="l00725"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera167">00725</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetTargetPage ( <span class="keyword">const</span> wxChar* name )
00726     {
00727         SetTargetPage ( GetPageByName(name) );
00728     }
00729 
<a name="l00731"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera171">00731</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ()
00732     {
00733         m_propGrid.Sort(wxPGIdGen(m_targetState-&gt;m_properties));
00734     }
00735 
<a name="l00738"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera170">00738</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> )
00739     {
00740         m_propGrid.Sort(<span class="keywordtype">id</span>);
00741     }
00742 
<a name="l00745"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera169">00745</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
00746     {
00747         m_propGrid.Sort ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
00748     }
00749 
<a name="l00752"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera173">00752</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
00753     {
00754         <span class="keywordtype">int</span> priority = wxPG_LOW;
00755         <span class="keywordflow">if</span> ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera74">GetPropertyPriority</a>(<span class="keywordtype">id</span>) == wxPG_LOW )
00756             priority = wxPG_HIGH;
00757         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
00758     }
00759 
<a name="l00762"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera172">00762</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
00763     {
00764         TogglePropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00765     }
00766 
<a name="l00768"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera15">00768</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearSelection ()
00769     {
00770         m_propGrid.ClearSelection ();
00771     }
00772 
00773 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
00774 <span class="preprocessor"></span>
00775     <span class="comment">//</span>
00776     <span class="comment">// Overridden functions - no documentation required.</span>
00777     <span class="comment">//</span>
00778 
00779     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
00780     <span class="keywordtype">void</span> SetId( wxWindowID winid );
00781 
00782     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
00783     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
00784     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
00785     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
00786     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag ( <span class="keywordtype">long</span> style );
00787 
00788     <span class="comment">//</span>
00789     <span class="comment">// Event handlers</span>
00790     <span class="comment">//</span>
00791     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
00792     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
00793     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
00794     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
00795 
00796     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent &amp;event );
00797 
00798     <span class="keywordtype">void</span> OnToolbarClick ( wxCommandEvent &amp;event );
00799     <span class="keywordtype">void</span> OnResize ( wxSizeEvent&amp; event );
00800     <span class="keywordtype">void</span> OnCompactorClick ( wxCommandEvent&amp; event );
00801     <span class="keywordtype">void</span> OnPropertyGridSelect ( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event );
00802 
00803 <span class="keyword">protected</span>:
00804 
00805     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>  m_propGrid;
00806 
00807     wxArrayPtrVoid  m_arrPages;
00808 
00809 <span class="preprocessor">#if wxUSE_TOOLBAR</span>
00810 <span class="preprocessor"></span>    wxToolBar*      m_pToolbar;
00811     <span class="comment">//wxBitmap*       m_pBmpCatMode;</span>
00812     <span class="comment">//wxBitmap*       m_pBmpNonCatMode;</span>
00813 <span class="preprocessor">#endif</span>
00814 <span class="preprocessor"></span>    wxStaticText*   m_pTxtHelpCaption;
00815     wxStaticText*   m_pTxtHelpContent;
00816     wxButton*       m_pButCompactor;
00817 
00818     <span class="comment">//wxWindow*       m_splitterPrevDrawnWin;</span>
00819 
00820     <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>*    m_targetState;
00821 
00822     <span class="keywordtype">long</span>            m_iFlags;
00823 
00824     <span class="comment">// Selected page index.</span>
00825     <span class="keywordtype">int</span>             m_selPage;
00826 
00827     <span class="keywordtype">int</span>             m_width;
00828 
00829     <span class="keywordtype">int</span>             m_height;
00830 
00831     <span class="keywordtype">int</span>             m_extraHeight;
00832 
00833     <span class="keywordtype">int</span>             m_splitterY;
00834 
00835     <span class="keywordtype">int</span>             m_splitterHeight;
00836 
00837     <span class="keywordtype">int</span>             m_nextTbInd;
00838 
00839     <span class="keywordtype">int</span>             m_dragOffset;
00840 
00841     wxCursor        m_cursorSizeNS;
00842 
00843     <span class="keywordtype">int</span>             m_nextDescBoxSize;
00844 
00845     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_dragStatus;
00846 
00847     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_onSplitter;
00848 
00849     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* parent_state );
00850 
00851     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
00852 
00853     wxPGId GetPropertyByName2 ( wxPGNameStr name, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**) NULL ) <span class="keyword">const</span>;
00854 
00855     <span class="comment">// Sets some members to defaults.</span>
00856         <span class="keywordtype">void</span> Init1();
00857 
00858     <span class="comment">// Initializes some members.</span>
00859         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
00860 
00864     <span class="keywordtype">void</span> RecalculatePositions ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00865 
00867     <span class="keywordtype">void</span> RecreateControls ();
00868 
00869     <span class="keywordtype">void</span> RefreshHelpBox ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height );
00870 
00871     <span class="keywordtype">void</span> RepaintSplitter ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height, <span class="keywordtype">bool</span> desc_too );
00872 
00873     <span class="keywordtype">void</span> SetDescribedProperty ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
00874 
00875     <span class="keyword">inline</span> wxPropertyGridPageData* GetPage ( size_t ind )<span class="keyword"> const</span>
00876 <span class="keyword">    </span>{
00877         <span class="keywordflow">return</span> (wxPropertyGridPageData*)m_arrPages.Item(ind);
00878     }
00879 
00880 <span class="preprocessor">#endif</span>
00881 <span class="preprocessor"></span>
00882 <span class="keyword">private</span>:
00883     DECLARE_EVENT_TABLE()
00884 };
00885 
00886 <span class="comment">// -----------------------------------------------------------------------</span>
00887 
00888 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
00889 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IPAM_DECL</span>
00890 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IMPLEMENT_PGMAN_METHOD_NORET1</span>
00891 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00892 <span class="preprocessor"></span>
00893 <span class="comment">// -----------------------------------------------------------------------</span>
00894 
00895 <span class="preprocessor">#endif // _WX_PROPGRID_MANAGER_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Apr 14 22:21:04 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
