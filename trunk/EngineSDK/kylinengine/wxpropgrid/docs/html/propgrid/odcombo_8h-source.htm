<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: odcombo.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>odcombo.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        odcombo.h</span>
00003 <span class="comment">// Purpose:     wxOwnerDrawnComboBox and related classes interface</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">//              (loosely based on wxUniv combo.h by Vadim Zeitlin)</span>
00006 <span class="comment">// Modified by:</span>
00007 <span class="comment">// Created:     Jan-25-2005</span>
00008 <span class="comment">// RCS-ID:      $Id:</span>
00009 <span class="comment">// Copyright:   (c) 2005 Jaakko Salli</span>
00010 <span class="comment">// Licence:     wxWindows licence</span>
00012 <span class="comment"></span>
00013 <span class="preprocessor">#ifndef _WX_ODCOMBO_H_</span>
00014 <span class="preprocessor"></span><span class="preprocessor">#define _WX_ODCOMBO_H_</span>
00015 <span class="preprocessor"></span>
00016 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00017 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "odcombobox.h"</span>
00018 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00019 <span class="preprocessor"></span>
00020 <span class="preprocessor">#include "wx/choice.h"</span>
00021 <span class="comment">//#include "wx/popupwin.h"</span>
00022 
00023 <span class="keyword">class </span>WXDLLEXPORT wxVListBox;
00024 <span class="keyword">class </span>WXDLLEXPORT wxTextCtrl;
00025 <span class="keyword">class </span>WXDLLEXPORT wxButton;
00026 
00027 <span class="comment">// Temp stuff</span>
00028 <span class="preprocessor">#ifdef WXMAKINGDLL_PROPGRID</span>
00029 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLEXPORT_PGODC WXEXPORT</span>
00030 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00031 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLEXPORT_PGODC WXIMPORT</span>
00032 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00033 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLEXPORT_PGODC</span>
00034 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00035 <span class="preprocessor"></span>
00036 <span class="keyword">class </span>WXDLLEXPORT_PGODC wxOwnerDrawnComboBox;
00037 
00038 <span class="comment">// ----------------------------------------------------------------------------</span>
00039 <span class="comment">// wxComboPopupInterface is the interface class that lies between</span>
00040 <span class="comment">// the wxOwnerDrawnComboBox and its popup window.</span>
00041 <span class="comment">// ----------------------------------------------------------------------------</span>
00042 
00043 <span class="comment">//</span>
00044 <span class="comment">// Callback flags</span>
00045 <span class="comment">//</span>
00046 
00047 <span class="comment">// when set, we are painting the selected item in control, not in the popup</span>
00048 <span class="preprocessor">#define wxODCB_CB_PAINTING_CONTROL  0x0001</span>
00049 <span class="preprocessor"></span>
00050 <span class="keyword">typedef</span> void (wxEvtHandler::* wxComboPaintCallback)(wxOwnerDrawnComboBox* pCb,
00051                                                     <span class="keywordtype">int</span> item,
00052                                                     wxDC&amp; dc,
00053                                                     wxRect&amp; rect,
00054                                                     <span class="keywordtype">int</span> flags );
00055 
00056 <span class="keyword">class </span>WXDLLEXPORT_PGODC wxComboPopupInterface : <span class="keyword">public</span> wxEvtHandler
00057 {
00058     <span class="keyword">friend</span> <span class="keyword">class </span>wxOwnerDrawnComboBox;
00059 <span class="keyword">public</span>:
00060 
00061     wxComboPopupInterface();
00062     <span class="keyword">virtual</span> ~wxComboPopupInterface();
00063 
00064     <span class="comment">// default implementation does nothing</span>
00065     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Clear();
00066 
00067     <span class="comment">// default implementation does nothing</span>
00068     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Delete( <span class="keywordtype">int</span> item );
00069 
00070     <span class="comment">// wxComboBox::FindString</span>
00071     <span class="comment">// default implementation returns wxNOT_FOUND</span>
00072     <span class="keyword">virtual</span> <span class="keywordtype">int</span> FindString(<span class="keyword">const</span> wxString&amp; s) <span class="keyword">const</span>;
00073 
00074     <span class="comment">// default implementation returns NULL</span>
00075     <span class="comment">//virtual void* GetClientData( int item ) const;</span>
00076 
00077     <span class="comment">// default implementation returns 0</span>
00078     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetCount() <span class="keyword">const</span>;
00079 
00080     <span class="comment">// wxComboBox::GetString</span>
00081     <span class="comment">// default implementation returns empty string</span>
00082     <span class="keyword">virtual</span> wxString GetString( <span class="keywordtype">int</span> item ) <span class="keyword">const</span>;
00083 
00084     <span class="comment">// default implementation does nothing</span>
00085     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Insert( <span class="keyword">const</span> wxString&amp; item, <span class="keywordtype">int</span> pos );
00086 
00087     <span class="comment">// default implementation does nothing</span>
00088     <span class="comment">//virtual void SetClientData( int item, void* clientData );</span>
00089 
00090     <span class="comment">// wxComboBox::SetSelection</span>
00091     <span class="comment">// default implementation does nothing</span>
00092     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSelection( <span class="keywordtype">int</span> item );
00093 
00094     <span class="comment">// wxComboBox::SetString</span>
00095     <span class="comment">// default implementation does nothing</span>
00096     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetString( <span class="keywordtype">int</span> item, <span class="keyword">const</span> wxString&amp; str );
00097 
00098     <span class="comment">// wxComboBox::SetValue</span>
00099     <span class="comment">// default implementation does nothing</span>
00100     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueFromString ( <span class="keyword">const</span> wxString&amp; value );
00101 
00102     <span class="comment">// default implementation returns NULL</span>
00103     <span class="comment">//virtual wxArrayString* GetArrayString();</span>
00104 
00105     <span class="comment">// default implementation returns false</span>
00106     <span class="comment">//virtual bool IsValueInt() const;</span>
00107 
00108     <span class="comment">// returns TRUE if item is hilited</span>
00109     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsHighlighted ( <span class="keywordtype">int</span> item ) <span class="keyword">const</span>;
00110 
00111     <span class="comment">// called by wxOwnerDrawComboBox after assigned to it</span>
00112     <span class="comment">// If returns TRUE, then GeneratePopup is called immediately</span>
00113     <span class="comment">// (instead of at the first time it is shown). Default returns</span>
00114     <span class="comment">// TRUE.</span>
00115     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Init( wxOwnerDrawnComboBox* combo );
00116 
00117     <span class="comment">// returns pointer to created popup control</span>
00118     <span class="comment">// parent = wxPopupWindow where combo popup should be placed</span>
00119     <span class="comment">//   if NULL, then it is not necesary to create the popup</span>
00120     <span class="comment">// minWidth = preferred minimum width for window</span>
00121     <span class="comment">// maxHeight = absolute maximum height for window</span>
00122     <span class="comment">// prefHeight = preferred height. Only applies if &gt; 0,</span>
00123     <span class="comment">//   and should only be rounded down, if necessary.</span>
00124     <span class="comment">// isVolatile = set to true if window should be destroyed</span>
00125     <span class="comment">//   when hidden. If not then this method is still called.</span>
00126     <span class="comment">//   In this case, the existing window, with adjusted</span>
00127     <span class="comment">//   dimensions should be returned.</span>
00128     <span class="keyword">virtual</span> wxWindow* GeneratePopup( wxWindow* parent, <span class="keywordtype">int</span> minWidth,
00129                                      <span class="keywordtype">int</span> maxHeight, <span class="keywordtype">int</span> prefHeight ) = 0;
00130 
00131     <span class="comment">// Returns pointer to the current value (if integer).</span>
00132     <span class="comment">// With the default popup, for example, this returns pointer</span>
00133     <span class="comment">// to int.</span>
00134     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">int</span>* GetIntPtr () <span class="keyword">const</span>;
00135 
00136     <span class="comment">// gets displayed string representation of the value</span>
00137     <span class="keyword">virtual</span> wxString GetValueAsString() <span class="keyword">const</span> = 0;
00138 
00139     <span class="comment">//</span>
00140     <span class="comment">// Helper methods.</span>
00141     <span class="comment">//wxPopupWindow* CreatePopupWindow () const;</span>
00142 
00143     <span class="comment">// Event handler handles this.</span>
00144     <span class="comment">//wxWindow*               m_handledWnd;</span>
00145 
00146     <span class="comment">//inline wxWindow* GetPopupControl() const { wxASSERT(m_popupAsWnd); return m_popupAsWnd; }</span>
00147 
00148     <span class="keyword">inline</span> wxComboPaintCallback GetCallback()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_callback; }
00149 
00150 <span class="keyword">protected</span>:
00151 
00152     <span class="comment">// TODO: Once popup transient window works Ok, remove these.</span>
00153     <span class="keywordtype">void</span> OnMouseEvent( wxMouseEvent&amp; event );
00154     <span class="comment">//void OnFocusChange ( wxFocusEvent&amp; event );</span>
00155 
00156     wxOwnerDrawnComboBox*   m_combo;
00157     <span class="comment">//wxWindow*               m_popupAsWnd;</span>
00158 
00159     <span class="comment">// Must be in all interfaces to paint the combobox too (in some cases)</span>
00160     wxComboPaintCallback    m_callback;
00161 
00162 <span class="keyword">private</span>:
00163     DECLARE_EVENT_TABLE()
00164 };
00165 
00166 <span class="comment">// ----------------------------------------------------------------------------</span>
00167 <span class="comment">// wxOwnerDrawnComboBox: a generic wxComboBox that allows custom paint items</span>
00168 <span class="comment">// and even a completely custom popup control.</span>
00169 <span class="comment">// ----------------------------------------------------------------------------</span>
00170 
00171 <span class="comment">// New window styles</span>
00172 
00173 <span class="comment">// if used, control itself is not custom paint using callback</span>
00174 <span class="comment">// even if this is not used, writable combo is never custom paint</span>
00175 <span class="comment">// until SetCustomPaintArea is called</span>
00176 <span class="preprocessor">#define wxODCB_STD_CONTROL_PAINT    0x0100</span>
00177 <span class="preprocessor"></span>
00178 <span class="comment">// Causes double-clicking to cycle the item instead of showing</span>
00179 <span class="comment">// the popup. Shift-pressed causes cycling direction to reverse.</span>
00180 <span class="preprocessor">#define wxODCB_DOUBLE_CLICK_CYCLES  0x0200</span>
00181 <span class="preprocessor"></span>
00182 
00183 <span class="preprocessor">#define wxOwnerDrawnComboBoxBase wxChoiceBase</span>
00184 <span class="preprocessor"></span>
00185 <span class="keyword">class </span>WXDLLEXPORT_PGODC wxOwnerDrawnComboBox : <span class="keyword">public</span> wxOwnerDrawnComboBoxBase
00186 {
00187     <span class="keyword">friend</span> <span class="keyword">class </span>wxComboPopupWindow;
00188 <span class="keyword">public</span>:
00189     <span class="comment">// ctors and such</span>
00190     wxOwnerDrawnComboBox() { Init(); }
00191 
00192     wxOwnerDrawnComboBox(wxWindow *parent,
00193                wxWindowID <span class="keywordtype">id</span>,
00194                <span class="keyword">const</span> wxString&amp; value,
00195                <span class="keyword">const</span> wxPoint&amp; pos,
00196                <span class="keyword">const</span> wxSize&amp; size,
00197                <span class="keywordtype">int</span> n,
00198                <span class="keyword">const</span> wxString choices[],
00199                wxComboPaintCallback callback,
00200                <span class="keywordtype">long</span> style = 0,
00201                <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
00202                <span class="keyword">const</span> wxString&amp; name = wxComboBoxNameStr)
00203     {
00204         Init();
00205 
00206         (<span class="keywordtype">void</span>)Create(parent, <span class="keywordtype">id</span>, value, pos, size, n, choices,
00207                      callback, style, validator, name);
00208     }
00209 
00210     wxOwnerDrawnComboBox(wxWindow *parent,
00211                wxWindowID <span class="keywordtype">id</span>,
00212                <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
00213                <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00214                <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00215                wxComboPopupInterface* iface = (wxComboPopupInterface*) NULL,
00216                <span class="keywordtype">long</span> style = 0,
00217                <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
00218                <span class="keyword">const</span> wxString&amp; name = wxComboBoxNameStr)
00219     {
00220         Init();
00221 
00222         (<span class="keywordtype">void</span>)Create(parent, <span class="keywordtype">id</span>, value, pos, size, iface,
00223                      style, validator, name);
00224     }
00225 
00226     <span class="keywordtype">bool</span> Create(wxWindow *parent,
00227                 wxWindowID <span class="keywordtype">id</span>,
00228                 <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
00229                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00230                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00231                 wxComboPopupInterface* iface = (wxComboPopupInterface*) NULL,
00232                 <span class="keywordtype">long</span> style = 0,
00233                 <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
00234                 <span class="keyword">const</span> wxString&amp; name = wxComboBoxNameStr);
00235 
00236     wxOwnerDrawnComboBox(wxWindow *parent,
00237                wxWindowID <span class="keywordtype">id</span>,
00238                <span class="keyword">const</span> wxString&amp; value,
00239                <span class="keyword">const</span> wxPoint&amp; pos,
00240                <span class="keyword">const</span> wxSize&amp; size,
00241                <span class="keyword">const</span> wxArrayString&amp; choices,
00242                wxComboPaintCallback callback = (wxComboPaintCallback) NULL,
00243                <span class="keywordtype">long</span> style = 0,
00244                <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
00245                <span class="keyword">const</span> wxString&amp; name = wxComboBoxNameStr);
00246 
00247     <span class="keywordtype">bool</span> Create(wxWindow *parent,
00248                 wxWindowID <span class="keywordtype">id</span>,
00249                 <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
00250                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00251                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00252                 <span class="keywordtype">int</span> n = 0,
00253                 <span class="keyword">const</span> wxString choices[] = (<span class="keyword">const</span> wxString *) NULL,
00254                 wxComboPaintCallback callback = (wxComboPaintCallback) NULL,
00255                 <span class="keywordtype">long</span> style = 0,
00256                 <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
00257                 <span class="keyword">const</span> wxString&amp; name = wxComboBoxNameStr);
00258 
00259     <span class="keywordtype">bool</span> Create(wxWindow *parent,
00260                 wxWindowID <span class="keywordtype">id</span>,
00261                 <span class="keyword">const</span> wxString&amp; value,
00262                 <span class="keyword">const</span> wxPoint&amp; pos,
00263                 <span class="keyword">const</span> wxSize&amp; size,
00264                 <span class="keyword">const</span> wxArrayString&amp; choices,
00265                 wxComboPaintCallback callback = (wxComboPaintCallback) NULL,
00266                 <span class="keywordtype">long</span> style = 0,
00267                 <span class="keyword">const</span> wxValidator&amp; validator = wxDefaultValidator,
00268                 <span class="keyword">const</span> wxString&amp; name = wxComboBoxNameStr);
00269 
00270     <span class="keyword">virtual</span> ~wxOwnerDrawnComboBox();
00271 
00272 <span class="comment">// a combo control needs a control for popup window it displays</span>
00273     <span class="comment">//void SetPopupControl(wxComboPopup *popup);</span>
00274     wxComboPopupInterface* GetPopupInterface()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_popupInterface; }
00275 
00276     <span class="comment">// show/hide popup window</span>
00277     <span class="keywordtype">void</span> ShowPopup();
00278     <span class="keywordtype">void</span> HidePopup( <span class="keywordtype">bool</span> sendEvent = <span class="keyword">true</span> );
00279 
00280     <span class="comment">// common code to be called on popup hide</span>
00281     <span class="keywordtype">void</span> OnPopupDismiss();
00282 
00283     <span class="comment">// return true if the popup is currently shown</span>
00284     <span class="keywordtype">bool</span> IsPopupShown()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_isPopupShown &gt; 0); }
00285 
00286     <span class="comment">// get the popup window containing the popup control</span>
00287     wxWindow *GetPopupWindow()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_winPopup; }
00288 
00289     <span class="comment">// get the popup control/panel in window</span>
00290     wxWindow *GetPopupControl()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_popup; }
00291 
00292     <span class="comment">// get the text control which is part of the combobox</span>
00293     wxTextCtrl *GetText()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_text; }
00294 
00295     <span class="comment">// get the dropdown button which is part of the combobox</span>
00296     wxWindow *GetButton()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_btn; }
00297 
00298     <span class="comment">// implementation only from now on</span>
00299     <span class="comment">// -------------------------------</span>
00300 
00301     <span class="comment">// notifications from wxComboPopup (shouldn't be called by anybody else)</span>
00302 
00303     <span class="comment">// forward these functions to all subcontrols</span>
00304     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Enable(<span class="keywordtype">bool</span> enable = <span class="keyword">true</span>);
00305     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Show(<span class="keywordtype">bool</span> show = <span class="keyword">true</span>);
00306     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont(<span class="keyword">const</span> wxFont&amp; font);
00307     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFocus();
00308     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetFocusFromKbd();
00309     <span class="keywordtype">void</span> SetId( wxWindowID winid );
00310 
00311     <span class="comment">// Return TRUE if item is hilited in the combo</span>
00312     <span class="keywordtype">bool</span> IsHighlighted ( <span class="keywordtype">int</span> item ) <span class="keyword">const</span>;
00313 
00314 <span class="preprocessor">#if wxUSE_TOOLTIPS</span>
00315 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetToolTip( wxToolTip *tip );
00316 <span class="preprocessor">#endif // wxUSE_TOOLTIPS</span>
00317 <span class="preprocessor"></span>
00318     <span class="comment">// the wxUniversal-specific methods</span>
00319     <span class="comment">// --------------------------------</span>
00320 
00321     <span class="comment">// implement the combobox interface</span>
00322 
00323     <span class="comment">// wxTextCtrl methods</span>
00324     <span class="keyword">virtual</span> wxString GetValue() <span class="keyword">const</span>;
00325     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValue(<span class="keyword">const</span> wxString&amp; value);
00326     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Copy();
00327     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Cut();
00328     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Paste();
00329     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetInsertionPoint(<span class="keywordtype">long</span> pos);
00330     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetInsertionPointEnd();
00331     <span class="keyword">virtual</span> <span class="keywordtype">long</span> GetInsertionPoint() <span class="keyword">const</span>;
00332     <span class="keyword">virtual</span> <span class="keywordtype">long</span> GetLastPosition() <span class="keyword">const</span>;
00333     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Replace(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to, <span class="keyword">const</span> wxString&amp; value);
00334     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Remove(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to);
00335     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSelection(<span class="keywordtype">long</span> from, <span class="keywordtype">long</span> to);
00336     <span class="comment">//virtual void SetEditable(bool editable);</span>
00337 
00338     <span class="comment">// wxControlWithItems methods</span>
00339     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Clear();
00340     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Delete(<span class="keywordtype">int</span> n);
00341     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetCount() <span class="keyword">const</span>;
00342     <span class="keyword">virtual</span> wxString GetString(<span class="keywordtype">int</span> n) <span class="keyword">const</span>;
00343     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetString(<span class="keywordtype">int</span> n, <span class="keyword">const</span> wxString&amp; s);
00344     <span class="keyword">virtual</span> <span class="keywordtype">int</span> FindString(<span class="keyword">const</span> wxString&amp; s) <span class="keyword">const</span>;
00345     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Select(<span class="keywordtype">int</span> n);
00346     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetSelection() <span class="keyword">const</span>;
00347     <span class="keywordtype">void</span> SetSelection(<span class="keywordtype">int</span> n) { Select(n); }
00348 
00349     <span class="comment">// wxOwnerDrawnComboBox-only methods</span>
00350 
00351     <span class="comment">// Adjust popup size.</span>
00352     <span class="comment">//   extLeft = how many pixels the popup extends to the left</span>
00353     <span class="comment">//   extRight = how many pixels the popup extends to the right</span>
00354     <span class="comment">//   prefHeight = preferred popup height</span>
00355     <span class="keywordtype">void</span> SetPopupExtents( <span class="keywordtype">int</span> extLeft, <span class="keywordtype">int</span> extRight = 0, <span class="keywordtype">int</span> prefHeight = -1 );
00356 
00357     <span class="comment">// set width of custom paint area in writable combo</span>
00358     <span class="comment">// in read-only, used to indicate area that is not covered by the</span>
00359     <span class="comment">// "blue" colour drawn when control is focused.</span>
00360     <span class="keywordtype">void</span> SetCustomPaintArea( <span class="keywordtype">int</span> width );
00361 
00362     <span class="keywordtype">void</span> SetPopupInterface( wxComboPopupInterface* iface );
00363 
00364     <span class="keyword">inline</span> <span class="keywordtype">void</span> PreventNextButtonPopup()
00365     {
00366         m_isPopupShown = -1;
00367     }
00368 
00369     <span class="comment">//void SetStringSelection(const wxString&amp; WXUNUSED(s)) {  }</span>
00370 
00371     wxCONTROL_ITEMCONTAINER_CLIENTDATAOBJECT_RECAST
00372 
00373     <span class="comment">//inline bool HasClientObjectData () const { return false; }</span>
00374 
00375 <span class="keyword">protected</span>:
00376 
00377     <span class="comment">// override the base class virtuals involved into geometry calculations</span>
00378     <span class="comment">//virtual wxSize DoGetBestClientSize() const;</span>
00379     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoMoveWindow(<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height);
00380     <span class="comment">/*virtual void DoSetSize(int x, int y,</span>
00381 <span class="comment">                           int width, int height,</span>
00382 <span class="comment">                           int sizeFlags = wxSIZE_AUTO);*/</span>
00383     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
00384 
00385     <span class="comment">// event handlers</span>
00386     <span class="keywordtype">void</span> OnMouseEvent( wxMouseEvent&amp; event );
00387     <span class="keywordtype">void</span> OnPaint( wxPaintEvent&amp; event );
00388     <span class="keywordtype">void</span> OnResize( wxSizeEvent&amp; event );
00389     <span class="comment">//void OnKey(wxKeyEvent&amp; event);</span>
00390     <span class="keywordtype">void</span> OnFocusEvent( wxFocusEvent&amp; event );
00391     <span class="keywordtype">void</span> OnButtonClick(wxCommandEvent&amp; event);
00392 
00393     <span class="comment">// common part of all ctors</span>
00394     <span class="keywordtype">void</span> Init();
00395 
00396     <span class="comment">// clears all allocated client datas</span>
00397     <span class="keywordtype">void</span> ClearClientDatas();
00398 
00399     <span class="keyword">virtual</span> <span class="keywordtype">int</span> DoAppend(<span class="keyword">const</span> wxString&amp; item);
00400     <span class="keyword">virtual</span> <span class="keywordtype">int</span> DoInsert(<span class="keyword">const</span> wxString&amp; item, <span class="keywordtype">int</span> pos);
00401     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetItemClientData(<span class="keywordtype">int</span> n, <span class="keywordtype">void</span>* clientData);
00402     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* DoGetItemClientData(<span class="keywordtype">int</span> n) <span class="keyword">const</span>;
00403     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetItemClientObject(<span class="keywordtype">int</span> n, wxClientData* clientData);
00404     <span class="keyword">virtual</span> wxClientData* DoGetItemClientObject(<span class="keywordtype">int</span> n) <span class="keyword">const</span>;
00405 
00406     <span class="comment">// get the associated listbox</span>
00407     <span class="comment">//wxListBox *GetLBox() const { return m_lbox; }</span>
00408 
00409     <span class="comment">// This is used when m_text is hidden (readonly).</span>
00410     wxString    m_valueString;
00411 
00412     <span class="comment">// the text control and button we show all the time</span>
00413     wxTextCtrl *m_text;
00414     wxWindow *m_btn;
00415 
00416     <span class="comment">// the popup control/panel</span>
00417     wxWindow *m_popup;
00418 
00419     <span class="comment">// popup interface</span>
00420     wxComboPopupInterface*  m_popupInterface;
00421 
00422     <span class="comment">// popup window containing the window managed by the interface .</span>
00423     wxWindow *m_winPopup;
00424 
00425     <span class="comment">// this is for this control itself</span>
00426     wxEvtHandler *m_extraEvtHandler;
00427 
00428     <span class="comment">// this is for text</span>
00429     wxEvtHandler *m_textEvtHandler;
00430 
00431     <span class="comment">// this is for the top level window</span>
00432     wxEvtHandler *m_toplevEvtHandler;
00433 
00434     <span class="comment">// holder for client datas</span>
00435     wxArrayPtrVoid m_clientDatas;
00436 
00437     <span class="comment">// how much popup should expand to the left/right of the control</span>
00438     wxCoord m_extLeft;
00439     wxCoord m_extRight;
00440 
00441     <span class="comment">// preferred popup height. default is -1.</span>
00442     wxCoord m_heightPopup;
00443 
00444     <span class="comment">// how much of writable combo is custom-paint by callback?</span>
00445     <span class="comment">// also used to indicate area that is not covered by "blue"</span>
00446     <span class="comment">// selection indicator.</span>
00447     wxCoord m_widthCustomPaint;
00448 
00449     <span class="comment">// FIXME: Only necessary for GTK and its kind</span>
00450     wxCoord m_widthCustomBorder;
00451 
00452     <span class="comment">// is the popup window currenty shown?</span>
00453     <span class="comment">// &lt; 0 is special value</span>
00454     <span class="keywordtype">int</span> m_isPopupShown;
00455 
00456     <span class="comment">// is the data type of interface 'int'?</span>
00457     <span class="keywordtype">bool</span> m_hasIntValue;
00458 
00459     <span class="comment">// TODO: Remove after real popup works ok.</span>
00460     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> m_fakePopupUsage;
00461 
00462     <span class="comment">// should popup be destroyed on close?</span>
00463     <span class="comment">//bool m_isPopupVolatile;</span>
00464 
00465 <span class="keyword">private</span>:
00466     DECLARE_EVENT_TABLE()
00467 
00468     DECLARE_DYNAMIC_CLASS(wxOwnerDrawnComboBox)
00469 };
00470 
00471 <span class="preprocessor">#endif // _WX_ODCOMBO_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Apr 14 22:21:05 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
