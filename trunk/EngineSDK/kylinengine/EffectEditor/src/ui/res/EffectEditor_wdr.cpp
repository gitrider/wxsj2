//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: SceneEditor.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "SceneEditor_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "EffectEditor_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include <wx/propgrid/propgrid.h>
#include <wx/propgrid/manager.h>


// Implement window functions

wxSizer *InitRenderingConfigDialog( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 1, 0, 0 );
    item1->AddGrowableCol( 0 );
    item1->AddGrowableRow( 1 );

    wxStaticBitmap *item2 = new wxStaticBitmap(parent, -1, wxBITMAP(LOGO));
    wxASSERT( item2 );
    item1->Add( item2, 0, wxGROW|wxALL, 5 );



	wxString RenderStrings[] = {wxT("")};
    wxChoice* RenderChoice = new wxChoice( parent, ID_RENDERSYSTSELECT, wxDefaultPosition, wxSize(80, -1), WXSIZEOF(RenderStrings),   RenderStrings, 0 );

   item1->Add( RenderChoice, 0, wxFIXED_MINSIZE|wxGROW|wxALL, 5 );

    wxPropertyGridManager *item3 = new wxPropertyGridManager(parent, ID_RENDERSYSTEMOPTIONS,
            wxDefaultPosition, // position 
            wxSize(80, 174), // size
            wxCLIP_CHILDREN | wxCLIP_SIBLINGS |
            wxPG_BOLD_MODIFIED | // Modified values are drawn in bold font
            wxPG_SPLITTER_AUTO_CENTER | // Automatically center splitter until user manually adjusts it
            wxPG_TOOLTIPS | // Display tooltips for cell text that cannot be shown completely
            wxPG_TOOLBAR | // Include toolbar
            wxPG_HIDE_MARGIN | // Disables margin and hides all expand/collapse buttons
            //wxPG_DESCRIPTION | // Include description box
            //wxPG_COMPACTOR | // Include compactor
            wxPGMAN_DEFAULT_STYLE); // Plus default style
    item3->SetExtraStyle(wxPG_EX_CLASSIC_SPACING | wxPG_EX_NO_MODE_BUTTONS);
    wxASSERT( item3 );
    item1->Add( item3, 0, wxFIXED_MINSIZE|wxGROW|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item5 = new wxButton( parent, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->SetDefault();
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
