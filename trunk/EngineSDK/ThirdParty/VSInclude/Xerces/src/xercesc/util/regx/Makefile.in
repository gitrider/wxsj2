#
# Copyright 2001,2004 The Apache Software Foundation.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
# $Log$
# Revision 1.5  2004/09/08 13:56:47  peiyongz
# Apache License Version 2.0
#
# Revision 1.4  2004/07/09 16:26:49  peiyongz
# Build on HP-Itanium, aCC A.05.52
#
# Revision 1.3  2002/07/31 17:16:08  tng
# [Bug 6321] gmake error in regx/Makefile.in.
#
# Revision 1.2  2002/07/26 16:49:29  tng
# [Bug 2681] Can't build with gcc/g++ not named 'gcc'/'g++'.  Patch from Jonathan Lennox.
#
# Revision 1.1.1.1  2002/02/01 22:22:29  peiyongz
# sane_include
#
# Revision 1.5  2001/07/06 17:12:09  tng
# Automatic build of single-threaded library.  By Martin Kalen.
#
# Revision 1.4  2001/06/27 17:09:43  tng
# [Bug 1147] Headers install in wrong directory.  By Murray Cumming.
#
# Revision 1.3  2001/05/11 13:26:42  tng
# Copyright update.
#
# Revision 1.2  2001/05/03 18:17:24  knoaman
# Some design changes:
# o Changed the TokenFactory from a single static instance, to a
#    normal class. Each RegularExpression object will have its own
#    instance of TokenFactory, and that instance will be passed to
#    other classes that need to use a TokenFactory to create Token
#    objects (with the exception of RangeTokenMap).
# o Added a new class RangeTokenMap to map a the different ranges
#    in a given category to a specific RangeFactory object. In the old
#    design RangeFactory had dual functionality (act as a Map, and as
#    a factory for creating RangeToken(s)). The RangeTokenMap will
#    have its own copy of the TokenFactory. There will be only one
#    instance of the RangeTokenMap class, and that instance will be
#    lazily deleted when XPlatformUtils::Terminate is called.
#
# Revision 1.1  2001/03/02 19:26:43  knoaman
# Schema: Regular expression handling part II
#
# Revision 1.0  2001/01/26 19:50:51  knoaman
#
#

PLATFORM = @platform@
CC  = @cc@
CXX = @cxx@
CXXVER = @cxxver@
GCC = @GCC@
GXX = @GXX@
CXXFLAGS = @cxxflags@
CFLAGS =  @cflags@
PREFIX = @prefix@
PREFIX_INCLUDE = @prefix_include@
LDFLAGS = @ldflags@
LIBS = @libs@
OSVER = @osver@
USELIBWWW = @uselibwww@
MESSAGELOADER = @messageloader@
TRANSCODER = @transcoder@
NETACCESSOR = @netaccessor@
THREADS = @threads@

MODULE = util
SUBMODULE = regx

include ../../Makefile.incl

CPP_PUBHEADERS = RegxDefs.hpp \
	UniCharTable.hpp \
	Op.hpp \
	OpFactory.hpp \
	BMPattern.hpp \
	Match.hpp \
	RegxUtil.hpp \
	RangeToken.hpp \
	Token.hpp \
	CharToken.hpp \
	ClosureToken.hpp \
	ConcatToken.hpp \
	ConditionToken.hpp \
	ModifierToken.hpp \
	ParenToken.hpp \
	StringToken.hpp \
	UnionToken.hpp \
	TokenInc.hpp \
	XMLUniCharacter.hpp \
	RangeFactory.hpp \
	XMLRangeFactory.hpp \
	BlockRangeFactory.hpp \
	UnicodeRangeFactory.hpp \
	ASCIIRangeFactory.hpp \
	RangeTokenMap.hpp \
	TokenFactory.hpp \
	RegxParser.hpp \
	ParserForXMLSchema.hpp \
	RegularExpression.hpp

CPP_OBJECTS = Op.$(TO) \
	OpFactory.$(TO) \
	BMPattern.$(TO) \
	Match.$(TO) \
	RegxUtil.$(TO) \
	RangeToken.$(TO) \
	Token.$(TO) \
	CharToken.$(TO) \
	ClosureToken.$(TO) \
	ConcatToken.$(TO) \
	ConditionToken.$(TO) \
	ModifierToken.$(TO) \
	ParenToken.$(TO) \
	StringToken.$(TO) \
	UnionToken.$(TO) \
	XMLUniCharacter.$(TO) \
	RangeFactory.$(TO) \
	XMLRangeFactory.$(TO) \
	BlockRangeFactory.$(TO) \
	UnicodeRangeFactory.$(TO) \
	ASCIIRangeFactory.$(TO) \
	RangeTokenMap.$(TO) \
	TokenFactory.$(TO) \
	RegxParser.$(TO) \
	ParserForXMLSchema.$(TO) \
	RegularExpression.$(TO)

include ../Makefile.util.submodule
